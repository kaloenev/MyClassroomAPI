%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 4.eps
%%Creator: Adobe Illustrator(R) 21.0
%%For: Lisa Taiga
%%CreationDate: 11/13/2017
%%BoundingBox: 0 0 500 500
%%HiResBoundingBox: 0 0 500 500
%%CropBox: 0 0 500 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 21.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 21.0.2 x242 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c137 79.159768, 2016/08/11-13:24:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">4</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-11-13T05:09:28+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-11-13T05:09:28+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-11-13T05:09:28+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2017 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A6lgcJ2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kq1tZ3V0/C3iaVu4UVp8&#xA;/DCkAlNE8o6wULuscQAqebjYfRXFmMRaPlPVjEJIfSnQ7gxuDX5E0GBTikllzZ3Vq/C4iaJuwYUr&#xA;8vHCwIIUcCHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FU&#xA;ytbGzg0241rWJfq2kWaNLLJ0LhBUhf1fgMWyEL5vO3/Ozzre2l3daPoa6f5ZtWo1zEpMqoxoGeRq&#xA;qx7twXbx75X4ounLlpzw+lW8sG483Xsn6VuHkjtqSSxmRi0nKoG5JNARvlWqkQAy7PxAyJKYeaLJ&#xA;fK8cWo6PK9pG59N4ElkDGTqrqSSenXfwyvSzJNN3aGEUJDYo7TNY/MnWNKSRrm3W1daxrcIjM4Iq&#xA;DXgx+muSyagiVBcGk4oAy3tPH02dtJttUSMrHKoFzF1MMwPF16n4eQ2OZUJWLddmxcBIQOFpdirs&#xA;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&#xA;uxV2KuxV2KuxV//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:ec681cea-5654-4941-8954-5ef0bc1aa4f0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:ec681cea-5654-4941-8954-5ef0bc1aa4f0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:c621999c-defe-4521-9ba4-ed313fae4428</stRef:instanceID>
            <stRef:documentID>xmp.did:869df81f-87d1-fb41-a280-0d9f32b7ef19</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:73c0a61a-3724-4a4b-ace4-731429ae32e2</stEvt:instanceID>
                  <stEvt:when>2016-08-10T19:21:36+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:ec681cea-5654-4941-8954-5ef0bc1aa4f0</stEvt:instanceID>
                  <stEvt:when>2017-11-13T05:09:28+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>500.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <pdfx:CreatorVersion>21.0.2</pdfx:CreatorVersion>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
500 500 li
500 0 li
cp
clp
500 500 mo
-.00012517 500 li
-.00012517 0 li
500 0 li
500 500 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.686275 .780392 .745098 rgb
f
250 359.835 mo
196.076 359.835 152.362 316.121 152.362 262.197 cv
152.362 208.272 196.076 164.558 250 164.558 cv
303.924 164.558 347.638 208.272 347.638 262.197 cv
347.638 316.121 303.924 359.835 250 359.835 cv
202.661 305.679 mo
212.805 316.293 226.428 323.712 241.072 326.179 cv
241.103 328.244 li
256.516 327.884 li
256.494 326.359 li
271.448 323.995 285.285 316.468 295.54 305.679 cv
318.978 305.679 li
318.978 298.422 li
322.049 298.422 li
322.049 275.378 li
322.049 250.826 li
324.876 250.826 li
324.876 219.044 li
324.178 219.044 li
324.178 218.347 li
294.848 218.347 li
283.21 206.462 266.993 199.102 249.105 199.102 cv
248.817 199.102 248.533 199.104 248.244 199.107 cv
230.63 199.339 214.762 206.672 203.335 218.347 cv
175.124 218.347 li
175.124 250.128 li
175.822 250.128 li
175.822 250.826 li
178.179 250.826 li
178.179 297.725 li
178.876 297.725 li
178.876 298.422 li
181.249 298.422 li
181.249 304.982 li
181.947 304.982 li
181.947 305.679 li
202.661 305.679 li
.501961 .65098 .596078 rgb
f
250 131.831 mo
235.868 131.831 223.075 125.997 213.9 116.61 cv
286.1 116.61 li
276.925 125.997 264.132 131.831 250 131.831 cv
200.801 92.7448 mo
199.95 89.0756 199.5 85.2553 199.5 81.3311 cv
199.5 79.2032 199.632 77.1082 199.889 75.0488 cv
200.801 75.0488 li
200.801 92.7448 li
298.936 68.8404 mo
294.421 68.8404 li
294.235 64.5843 292.506 62.0941 290.944 60.7009 cv
289.339 58.902 287.623 58.3594 287.623 58.3594 cv
287.623 58.3276 li
282.498 56.4204 li
282.46 56.5354 282.416 56.649 282.368 56.7606 cv
281.739 56.5378 li
281.102 55.229 li
280.829 55.229 li
280.829 53.791 li
280.858 53.7675 li
282.253 52.542 283.297 50.6865 283.756 48.5152 cv
283.845 48.4962 li
284.451 48.3081 285.006 47.4166 285.178 46.2744 cv
285.236 45.8841 285.244 45.5065 285.208 45.1627 cv
291.767 51.5492 296.602 59.7016 298.936 68.8404 cv
209.618 68.8404 mo
201.063 68.8404 li
203.87 57.8515 210.291 48.2915 218.979 41.5088 cv
217.9 43.1498 217.013 45.2385 216.777 47.0064 cv
216.421 49.5543 217.284 52.8519 218.983 54.098 cv
219.579 54.867 220.332 55.3546 221.216 55.3546 cv
221.43 55.3546 221.652 55.3258 221.882 55.2652 cv
221.882 56.4131 li
219.525 57.2461 li
219.611 57.4474 219.715 57.6428 219.835 57.8314 cv
218.439 58.3481 li
218.579 60.0632 219.117 61.3471 219.853 62.2547 cv
219.853 62.2544 219.852 62.2541 219.852 62.2538 cv
219.117 61.3464 218.579 60.0628 218.439 58.3491 cv
217.816 58.5807 li
217.757 58.2692 217.712 57.9403 217.684 57.5942 cv
215.014 58.587 li
214.32 58.8393 li
214.303 58.8511 li
214.278 58.8603 li
214.268 58.8603 li
209.089 60.7409 209.609 66.4978 209.618 68.8404 cv
278.083 58.6871 mo
277.869 58.4062 li
277.708 58.1973 li
277.708 58.1894 li
277.475 57.894 li
277.19 57.5107 li
276.895 57.128 li
276.899 57.1216 li
277.711 58.1894 li
278.086 58.6853 li
278.083 58.6871 li
231.583 57.3238 mo
230.065 56.7156 li
230.065 54.8355 li
230.465 55.0261 230.844 55.1102 231.201 55.1102 cv
231.796 55.1102 232.329 54.8766 232.795 54.514 cv
232.795 55.5712 li
232.454 55.5712 li
231.614 57.2998 li
231.621 57.3057 li
231.614 57.3125 li
231.583 57.3238 li
256.11 56.9521 mo
256.108 56.9472 li
256.227 56.8614 li
256.11 56.9521 li
262.795 56.7898 mo
258.279 55.1099 li
258.188 55.3821 258.071 55.6461 257.931 55.9002 cv
257.675 55.8096 li
257.184 56.1641 li
257.675 55.8052 li
256.756 53.9185 li
257.473 52.9253 258.013 51.7105 258.296 50.354 cv
258.384 50.335 li
258.937 50.1612 259.445 49.3467 259.597 48.3066 cv
259.69 47.6919 259.645 47.1123 259.496 46.6655 cv
259.527 46.5405 259.562 46.4185 259.589 46.291 cv
259.689 46.2695 li
259.775 46.243 259.859 46.2037 259.942 46.1527 cv
259.845 46.5618 259.825 47.0542 259.902 47.5703 cv
260.034 48.4302 260.401 49.1304 260.827 49.4438 cv
260.84 49.5103 li
261.253 51.5685 262.241 53.3193 263.569 54.4565 cv
263.595 54.4874 263.622 54.5181 263.649 54.5484 cv
263.649 55.7378 li
263.307 55.7378 li
262.795 56.7898 li
240.957 56.4647 mo
240.889 56.3261 li
240.636 56.3261 li
240.636 55.0112 li
240.663 54.9917 li
241.938 53.8774 242.89 52.1832 243.305 50.1992 cv
243.391 50.1807 li
243.821 50.0458 244.224 49.5252 244.453 48.8128 cv
244.603 49.0785 244.778 49.2892 244.964 49.4258 cv
244.977 49.4936 li
245.254 50.8768 245.792 52.1215 246.517 53.1342 cv
245.585 55.0503 li
245.597 55.0591 li
246.413 55.6546 li
246.339 55.8052 li
246.349 55.8116 li
246.341 55.8188 li
245.455 56.1474 li
245.409 56.0361 245.364 55.9249 245.327 55.8101 cv
244.968 55.9502 li
244.805 55.664 244.672 55.3649 244.573 55.0552 cv
240.957 56.4647 li
271.483 55.4069 mo
271.483 55.1772 li
271.51 55.1582 li
271.566 55.1089 271.622 55.0584 271.677 55.0069 cv
271.483 55.4069 li
272.311 54.4746 mo
272.189 54.4746 li
272.23 54.427 272.271 54.3787 272.311 54.3298 cv
272.311 54.4746 li
244.105 45.8603 mo
244.002 45.7681 243.89 45.6962 243.764 45.6694 cv
243.74 45.6636 li
243.716 45.6599 li
243.711 45.648 243.707 45.6364 243.702 45.6248 cv
243.767 45.3969 li
243.871 45.5737 243.984 45.73 244.105 45.8603 cv
243.335 41.9038 mo
243.246 41.8003 243.144 41.6943 243.012 41.5796 cv
242.948 41.5355 242.88 41.4976 242.811 41.4659 cv
242.697 41.2648 242.528 41.0606 242.257 40.8252 cv
242.037 40.6733 241.777 40.5945 241.518 40.5945 cv
241.466 40.5945 241.414 40.5977 241.363 40.6041 cv
241.181 39.8611 240.751 39.3106 240.19 38.9114 cv
239.306 37.6314 237.448 37.228 235.984 37.228 cv
233.96 37.228 232.05 38.1861 230.644 39.7194 cv
229.134 38.3126 227.359 37.7881 225.321 37.7881 cv
224.981 37.7881 224.666 37.8027 224.373 37.8303 cv
231.89 33.3851 240.653 30.8321 250 30.8321 cv
258.043 30.8321 265.65 32.7207 272.405 36.0794 cv
271.64 36.4931 271.115 36.9833 270.556 37.8056 cv
270.443 37.9686 270.336 38.1354 270.236 38.3057 cv
269.271 37.641 267.941 37.4106 266.834 37.4106 cv
264.337 37.4106 262.015 38.8697 260.597 41.0667 cv
260.463 40.9336 260.31 40.8441 260.141 40.8081 cv
260.112 40.7988 li
260.048 40.7955 li
260.361 39.9004 260.469 39.0463 260.248 37.7525 cv
260.092 37.0151 260.03 36.5537 259.227 35.8569 cv
258.964 35.6728 258.651 35.5781 258.339 35.5781 cv
257.976 35.5781 257.615 35.7064 257.338 35.9712 cv
257.545 32.4624 254.118 31.4995 251.629 31.4995 cv
248.573 31.4995 245.724 33.308 244.011 36.0254 cv
243.748 36.4766 243.237 36.9883 243.284 37.5532 cv
243.284 38.1192 243.767 38.7344 243.975 39.2412 cv
244.112 39.5635 244.193 39.5874 244.312 40.165 cv
244.351 40.3326 244.258 40.7085 244.282 40.7988 cv
243.849 40.8754 243.519 41.2998 243.335 41.9038 cv
259.083 41.1631 mo
258.647 40.751 258.208 40.1777 257.845 39.5444 cv
258.209 40.1772 258.648 40.7495 259.083 41.1611 cv
259.225 41.0454 li
259.083 41.1631 li
259.445 40.9034 mo
259.593 40.8305 li
259.684 40.8017 259.773 40.7913 259.863 40.7913 cv
259.869 40.7913 259.875 40.7914 259.881 40.7915 cv
259.689 40.8305 li
259.602 40.8736 li
259.594 40.832 li
259.445 40.9034 li
245.19 39.52 mo
245.407 38.7793 245.767 38.0268 246.084 37.5532 cv
246.434 37.0191 246.894 36.6855 247.408 36.4473 cv
246.894 36.6855 246.434 37.0196 246.084 37.5532 cv
245.769 38.0263 245.408 38.7793 245.19 39.52 cv
257.026 37.2192 mo
256.987 36.8574 256.988 36.5078 257.074 36.1963 cv
256.952 36.1114 256.838 36.0341 256.729 35.9644 cv
256.838 36.0341 256.953 36.1114 257.076 36.1963 cv
256.99 36.5078 256.987 36.8574 257.026 37.2192 cv
255.661 35.4687 mo
255.318 35.3799 254.942 35.3452 254.431 35.3452 cv
253.757 35.3452 253.108 35.3877 252.463 35.4477 cv
253.109 35.3867 253.759 35.3437 254.434 35.3437 cv
254.944 35.3437 255.319 35.3789 255.661 35.4687 cv
f
250 30.8321 mo
222.155 30.8321 199.5 53.4858 199.5 81.3311 cv
199.5 109.176 222.155 131.831 250 131.831 cv
277.845 131.831 300.499 109.176 300.499 81.3311 cv
300.499 53.4858 277.845 30.8321 250 30.8321 cv
250 136.746 mo
219.444 136.746 194.585 111.887 194.585 81.3311 cv
194.585 50.7754 219.444 25.9165 250 25.9165 cv
280.556 25.9165 305.415 50.7754 305.415 81.3311 cv
305.415 111.887 280.556 136.746 250 136.746 cv
1 1 1 rgb
f
34.3871 299.49 mo
27.3643 290.814 23.1522 279.772 23.1522 267.767 cv
23.1522 247.376 35.2986 229.769 52.7378 221.803 cv
51.2924 224.786 50.5884 227.803 51.0925 230.318 cv
48.5228 231.439 46.7245 234 46.7245 236.984 cv
46.7245 239.083 47.619 240.968 49.0414 242.295 cv
45.4627 242.751 42.6937 245.8 42.6937 249.502 cv
42.6937 252.038 43.9925 254.268 45.9598 255.569 cv
42.6366 256.24 40.1341 259.176 40.1341 262.697 cv
40.1341 265.009 41.2167 267.065 42.8988 268.397 cv
39.3934 268.918 36.701 271.932 36.701 275.582 cv
36.701 277.901 37.7909 279.962 39.4818 281.293 cv
36.4046 282.141 34.1414 284.953 34.1414 288.298 cv
34.1414 290.006 34.7342 291.573 35.7196 292.814 cv
35.2621 294.327 34.8143 296.665 34.3871 299.49 cv
115.142 296.525 mo
114.867 295.021 114.586 293.757 114.301 292.814 cv
115.286 291.573 115.878 290.006 115.878 288.298 cv
115.878 284.953 113.616 282.141 110.538 281.293 cv
112.229 279.962 113.319 277.901 113.319 275.582 cv
113.319 271.932 110.626 268.918 107.121 268.397 cv
108.803 267.065 109.886 265.009 109.886 262.697 cv
109.886 259.176 107.384 256.24 104.06 255.569 cv
106.027 254.268 107.326 252.038 107.326 249.502 cv
107.326 245.8 104.558 242.751 100.979 242.295 cv
102.401 240.968 103.295 239.083 103.295 236.984 cv
103.295 234 101.497 231.439 98.927 230.318 cv
99.3324 228.296 98.9569 225.95 98.043 223.558 cv
113.598 232.174 124.151 248.761 124.151 267.767 cv
124.151 278.445 120.821 288.358 115.142 296.525 cv
.501961 .65098 .596078 rgb
f
73.6511 217.267 mo
45.806 217.267 23.1522 239.921 23.1522 267.767 cv
23.1522 295.612 45.806 318.266 73.6511 318.266 cv
101.497 318.266 124.151 295.612 124.151 267.767 cv
124.151 239.921 101.497 217.267 73.6511 217.267 cv
73.6511 323.181 mo
43.0956 323.181 18.2366 298.322 18.2366 267.767 cv
18.2366 237.211 43.0956 212.352 73.6511 212.352 cv
104.207 212.352 129.067 237.211 129.067 267.767 cv
129.067 298.322 104.207 323.181 73.6511 323.181 cv
1 1 1 rgb
f
427.364 318.237 mo
430.327 317.338 432.285 315.017 433.751 312.158 cv
433.76 312.139 li
433.759 312.15 li
433.759 312.158 li
432.294 315.024 430.345 317.336 427.368 318.237 cv
427.366 318.237 427.366 318.237 427.364 318.237 cv
429.201 318.142 mo
431.168 317.255 432.275 315.82 433.795 314.219 cv
433.859 314.109 li
453.131 293.132 li
458.873 302.047 li
458.874 302.044 li
458.874 302.044 li
458.985 301.607 li
459.986 303.161 li
460.08 302.792 li
461.751 296.23 li
466.715 297.115 li
458.194 309.006 444.643 317.061 429.201 318.142 cv
418.154 317.712 mo
404.35 315.651 392.353 307.984 384.563 297.109 cv
384.586 297.113 384.609 297.116 384.632 297.119 cv
384.849 297.136 li
385.678 297.136 386.396 296.526 386.503 295.682 cv
387.673 286.933 li
388.833 295.682 li
388.942 296.526 389.659 297.136 390.487 297.136 cv
390.702 297.119 li
391.621 297.002 392.264 296.158 392.14 295.249 cv
390.955 286.307 li
393.96 293.404 li
394.23 294.041 394.845 294.421 395.495 294.421 cv
395.712 294.421 395.933 294.379 396.147 294.289 cv
397 293.929 397.392 292.953 397.031 292.101 cv
394.718 286.627 li
400.326 288.548 407.084 289.669 414.357 289.669 cv
418.035 289.669 421.578 289.38 424.909 288.846 cv
411.993 297.564 li
409.942 298.95 li
409.931 298.958 li
407.621 301.03 406.808 303.966 406.827 307.266 cv
406.827 307.589 407.257 307.735 407.704 307.735 cv
407.785 307.735 407.867 307.73 407.947 307.721 cv
407.941 307.938 407.939 308.158 407.94 308.379 cv
407.94 308.701 408.366 308.847 408.81 308.847 cv
409.209 308.847 409.622 308.729 409.756 308.518 cv
409.737 308.554 li
422.281 299.167 li
422.86 299.318 423.434 299.495 424 299.695 cv
417.482 304.808 li
417.323 304.798 417.165 304.794 417.008 304.794 cv
415.201 304.794 413.518 305.431 412.739 306.97 cv
411.788 308.846 413.037 311.462 413.803 313.144 cv
414.294 314.207 415.012 315.079 415.871 315.785 cv
416.506 316.565 417.287 317.201 418.154 317.712 cv
417.715 315.324 mo
417.708 315.319 417.701 315.313 417.694 315.307 cv
416.727 314.149 415.963 312.675 415.593 311.191 cv
415.968 312.683 416.74 314.164 417.715 315.324 cv
409.779 308.474 mo
409.789 308.268 li
408.743 305.385 410.998 299.629 416.543 298.52 cv
416.545 298.52 li
411.001 299.628 408.746 305.385 409.791 308.268 cv
409.779 308.474 li
414.283 307.424 mo
414.304 307.262 414.332 307.101 414.368 306.944 cv
414.586 305.966 415.428 305.555 416.468 305.555 cv
416.488 305.555 416.509 305.555 416.529 305.555 cv
414.873 306.854 li
415 306.767 li
414.734 306.953 414.493 307.172 414.283 307.424 cv
415.122 306.685 mo
415.767 306.267 416.548 306.029 417.383 305.944 cv
416.549 306.03 415.768 306.268 415.122 306.685 cv
417.651 305.923 mo
417.724 305.918 417.798 305.915 417.872 305.912 cv
417.798 305.915 417.724 305.918 417.651 305.923 cv
417.968 305.91 mo
417.993 305.91 418.019 305.909 418.045 305.909 cv
418.019 305.909 417.993 305.91 417.968 305.91 cv
418.245 305.909 mo
418.207 305.909 418.168 305.909 418.13 305.908 cv
418.168 305.909 418.207 305.909 418.245 305.909 cv
418.116 305.908 mo
418.118 305.908 418.12 305.908 418.123 305.908 cv
418.123 305.908 li
418.12 305.908 418.118 305.908 418.116 305.908 cv
430.219 303.276 mo
429.884 302.975 429.531 302.686 429.162 302.41 cv
429.531 302.686 429.883 302.974 430.219 303.275 cv
430.219 303.276 li
408.951 302.935 mo
409.814 300.669 411.746 298.42 414.743 297.572 cv
413.106 298.677 li
411.056 300.063 li
411.044 300.071 li
410.122 300.898 409.438 301.864 408.951 302.935 cv
428.125 301.689 mo
427.835 301.504 427.538 301.326 427.235 301.155 cv
427.538 301.326 427.835 301.504 428.125 301.689 cv
427.056 301.058 mo
426.801 300.918 426.541 300.782 426.278 300.653 cv
426.541 300.782 426.801 300.918 427.056 301.058 cv
425.054 300.097 mo
424.963 300.059 424.872 300.022 424.781 299.986 cv
424.872 300.022 424.963 300.059 425.054 300.097 cv
422.242 299.156 mo
421.926 299.075 421.611 299.001 421.295 298.935 cv
421.611 299.001 421.927 299.075 422.242 299.156 cv
420.811 298.839 mo
420.343 298.751 419.875 298.681 419.409 298.627 cv
419.875 298.68 420.343 298.751 420.811 298.839 cv
419.237 298.608 mo
418.813 298.563 418.39 298.532 417.972 298.516 cv
418.39 298.532 418.812 298.563 419.237 298.608 cv
416.564 298.52 mo
416.561 298.52 li
416.8 298.509 417.041 298.503 417.283 298.503 cv
417.341 298.503 417.399 298.504 417.457 298.504 cv
417.404 298.504 417.352 298.504 417.299 298.504 cv
417.052 298.504 416.807 298.509 416.564 298.52 cv
467.667 295.74 mo
466.234 293.514 li
468.582 294.319 li
468.285 294.798 467.98 295.271 467.667 295.74 cv
383.213 295.127 mo
382.686 294.312 382.181 293.482 381.701 292.636 cv
384.383 286.307 li
383.213 295.127 li
469.819 292.215 mo
468.235 288.664 li
472.61 286.321 li
471.805 288.353 470.87 290.322 469.819 292.215 cv
379.716 288.763 mo
376.779 282.365 375.142 275.255 375.142 267.767 cv
375.142 263.897 375.579 260.128 376.408 256.506 cv
378.068 257.289 li
378.068 270.683 li
378.068 273.681 379.519 276.506 382.084 278.987 cv
382.192 279.813 382.465 280.582 382.89 281.256 cv
379.716 288.763 li
473.177 284.822 mo
472.593 284.622 li
473.4 284.19 li
473.327 284.402 473.253 284.611 473.177 284.822 cv
473.407 284.169 mo
465.609 281.498 li
475.632 274.944 li
475.178 278.124 474.427 281.207 473.407 284.169 cv
449.521 271.002 mo
449.521 264.697 li
449.521 256.457 li
463.423 249.901 li
463.423 246.037 li
412.92 229.683 li
384.159 238.996 li
393.289 225.873 408.48 217.267 425.642 217.267 cv
447.014 217.267 465.328 230.614 472.688 249.409 cv
470.678 249.645 468.903 250.353 467.683 251.612 cv
467.352 251.962 li
449.521 271.002 li
.501961 .65098 .596078 rgb
f
425.642 217.267 mo
397.796 217.267 375.142 239.921 375.142 267.767 cv
375.142 295.612 397.796 318.266 425.642 318.266 cv
453.487 318.266 476.141 295.612 476.141 267.767 cv
476.141 239.921 453.487 217.267 425.642 217.267 cv
425.642 323.181 mo
395.086 323.181 370.226 298.322 370.226 267.767 cv
370.226 237.211 395.086 212.352 425.642 212.352 cv
456.198 212.352 481.056 237.211 481.056 267.767 cv
481.056 298.322 456.198 323.181 425.642 323.181 cv
1 1 1 rgb
f
381.664 444.597 mo
374.201 444.597 367.113 442.971 360.732 440.052 cv
387.451 413.333 li
410.547 413.333 li
410.547 397.567 li
413.238 400.258 li
411.437 402.059 li
420.201 410.823 li
431.916 399.109 li
431.073 407.626 428.104 415.53 423.55 422.278 cv
417.822 422.278 li
417.822 429.316 li
408.643 438.737 395.824 444.597 381.664 444.597 cv
354.206 436.463 mo
345.668 430.91 338.906 422.85 334.971 413.333 cv
372.293 413.333 li
353.08 432.546 li
354.206 436.463 li
428.446 385.05 mo
410.547 367.152 li
410.547 366.801 li
409.547 365.934 li
409.547 365.801 li
408.244 364.672 li
409.956 362.959 li
407.182 360.185 li
401.53 354.532 li
401.53 347.67 li
416.593 354.141 427.902 367.736 431.187 384.191 cv
430.246 383.25 li
428.446 385.05 li
.501961 .65098 .596078 rgb
f
381.664 343.598 mo
353.818 343.598 331.164 366.252 331.164 394.097 cv
331.164 421.943 353.818 444.597 381.664 444.597 cv
409.509 444.597 432.163 421.943 432.163 394.097 cv
432.163 366.252 409.509 343.598 381.664 343.598 cv
381.664 449.513 mo
351.108 449.513 326.248 424.653 326.248 394.097 cv
326.248 363.541 351.108 338.683 381.664 338.683 cv
412.22 338.683 437.079 363.541 437.079 394.097 cv
437.079 424.653 412.22 449.513 381.664 449.513 cv
1 1 1 rgb
f
118.62 445.565 mo
116.357 445.565 114.126 445.416 111.94 445.125 cv
125.301 445.125 li
123.115 445.416 120.884 445.565 118.62 445.565 cv
149.19 435.237 mo
142.085 435.237 li
142.085 428.91 li
142.085 425.889 li
142.085 423.503 li
141.418 423.503 li
141.418 422.836 li
123.884 422.836 li
123.884 359.561 li
124.82 358.875 125.574 357.961 126.066 356.898 cv
129.907 358.076 133.755 360.01 137.058 361.832 cv
140.221 363.575 143.872 364.326 146.669 364.326 cv
147.136 364.326 147.578 364.305 147.991 364.265 cv
150.122 364.054 152.246 363.423 154.36 362.516 cv
141.247 387.53 li
141.204 387.612 141.184 387.699 141.184 387.786 cv
139.565 387.786 li
139.565 390.486 li
140.232 390.486 li
140.232 391.154 li
142.008 391.154 li
142.892 393.179 144.177 394.989 145.76 396.485 cv
148.731 399.632 152.942 401.595 157.612 401.595 cv
157.612 401.598 li
162.092 401.598 166.146 399.798 169.087 396.882 cv
168.532 412.505 160.845 426.346 149.19 435.237 cv
97.5716 435.237 mo
88.05 435.237 li
75.9452 426.003 68.1204 411.431 68.1204 395.066 cv
68.1204 394.6 68.1267 394.135 68.1393 393.673 cv
68.8244 394.699 69.623 395.643 70.517 396.487 cv
73.4874 399.633 77.698 401.595 82.3666 401.595 cv
82.3666 401.598 li
89.3158 401.598 95.239 397.268 97.5775 391.156 cv
99.7449 391.156 li
99.7449 391.154 li
99.7484 391.154 li
99.7484 388.453 li
99.7449 388.453 li
99.0809 388.453 li
99.0809 387.786 li
97.8489 387.786 li
84.3885 362.109 li
86.8031 363.233 89.2323 364.024 91.6697 364.265 cv
92.0822 364.305 92.525 364.326 92.9915 364.326 cv
95.7869 364.326 99.4382 363.575 102.598 361.832 cv
105.903 360.01 109.753 358.075 113.595 356.898 cv
113.963 357.695 114.479 358.408 115.109 359.004 cv
115.109 422.836 li
115.776 422.836 li
96.9042 422.836 li
96.9042 435.237 li
97.5716 435.237 li
168.596 387.786 mo
158.16 387.786 li
158.16 363.686 li
159.109 364.88 160.007 366.119 160.847 367.397 cv
165.469 376.212 li
166.95 379.879 168.012 383.754 168.596 387.786 cv
156.396 387.786 mo
143.369 387.786 li
156.396 362.941 li
156.396 387.786 li
96.2915 387.786 mo
82.9173 387.786 li
82.9173 362.277 li
96.2915 387.786 li
81.1502 387.786 mo
68.6437 387.786 li
68.7127 387.31 68.788 386.838 68.8702 386.367 cv
81.1502 362.942 li
81.1502 387.786 li
71.2992 377.425 mo
72.7805 373.464 74.744 369.74 77.1208 366.32 cv
71.2992 377.425 li
147.796 360.34 mo
143.764 360.34 140.444 358.318 137.058 356.226 cv
133.83 354.245 129.972 352.362 126.118 351.239 cv
125.627 350.13 124.851 349.179 123.884 348.471 cv
123.884 344.839 li
135.646 346.063 146.222 351.341 154.185 359.247 cv
152.337 359.882 150.413 360.253 148.227 360.332 cv
148.082 360.337 147.938 360.34 147.796 360.34 cv
91.8647 360.34 mo
91.7218 360.34 91.5781 360.337 91.4334 360.332 cv
88.561 360.228 86.1413 359.616 83.753 358.568 cv
92.0322 350.656 102.989 345.523 115.109 344.687 cv
115.109 349.027 li
114.451 349.649 113.915 350.398 113.544 351.238 cv
109.689 352.362 105.83 354.245 102.598 356.226 cv
99.216 358.317 95.8961 360.34 91.8647 360.34 cv
.501961 .65098 .596078 rgb
f
118.62 344.566 mo
90.7747 344.566 68.1204 367.221 68.1204 395.066 cv
68.1204 422.912 90.7747 445.565 118.62 445.565 cv
146.466 445.565 169.119 422.912 169.119 395.066 cv
169.119 367.221 146.466 344.566 118.62 344.566 cv
118.62 450.481 mo
88.0643 450.481 63.2048 425.622 63.2048 395.066 cv
63.2048 364.51 88.0643 339.651 118.62 339.651 cv
149.176 339.651 174.035 364.51 174.035 395.066 cv
174.035 425.622 149.176 450.481 118.62 450.481 cv
1 1 1 rgb
f
118.62 193.085 mo
110.898 193.085 103.573 191.342 97.0217 188.229 cv
131.095 188.229 li
131.095 158.156 li
166.664 158.156 li
160.084 178.405 141.034 193.085 118.62 193.085 cv
168.98 146.354 mo
160.68 146.354 li
160.68 114.662 li
163.169 118.4 165.174 122.485 166.604 126.831 cv
166.961 134.152 li
167.765 134.152 li
167.597 134.668 167.316 135.105 166.849 135.292 cv
168.982 141.499 li
168.983 141.124 li
169.099 141.124 li
169.113 141.61 169.119 142.096 169.119 142.585 cv
169.119 143.853 169.073 145.109 168.98 146.354 cv
107.323 98.7031 mo
93.6474 98.7031 li
93.6902 98.6787 93.7359 98.6527 93.7787 98.6284 cv
107.323 98.6284 li
107.323 98.7031 li
107.323 97.5205 mo
95.8415 97.5205 li
99.4436 95.6924 103.291 94.2841 107.323 93.3594 cv
107.323 97.5205 li
.501961 .65098 .596078 rgb
f
118.62 92.0854 mo
90.7747 92.0854 68.1204 114.739 68.1204 142.585 cv
68.1204 170.43 90.7747 193.085 118.62 193.085 cv
146.466 193.085 169.119 170.43 169.119 142.585 cv
169.119 114.739 146.466 92.0854 118.62 92.0854 cv
118.62 198 mo
88.0643 198 63.2048 173.141 63.2048 142.585 cv
63.2048 112.029 88.0643 87.17 118.62 87.17 cv
149.176 87.17 174.035 112.029 174.035 142.585 cv
174.035 173.141 149.176 198 118.62 198 cv
1 1 1 rgb
f
381.664 193.417 mo
363.414 193.417 347.392 183.685 338.519 169.139 cv
385.605 169.139 li
387.418 172.482 390.041 175.717 393.174 178.751 cv
396.405 182.091 400.281 185.21 404.427 187.99 cv
397.583 191.46 389.847 193.417 381.664 193.417 cv
336.116 164.72 mo
332.943 158.117 331.164 150.721 331.164 142.918 cv
331.164 137.959 331.882 133.165 333.221 128.633 cv
333.221 144.254 li
333.632 144.395 334.055 144.534 334.488 144.67 cv
334.488 145.521 li
335.01 145.699 335.556 145.873 336.116 146.044 cv
336.116 164.72 li
428.057 151.178 mo
428.057 146.347 li
427.983 146.368 li
427.983 146.337 li
429.045 146.026 430.072 145.707 431.021 145.375 cv
431.021 132.212 li
431.769 135.664 432.163 139.246 432.163 142.918 cv
432.163 144.842 432.055 146.742 431.844 148.611 cv
430.633 149.518 429.369 150.372 428.057 151.178 cv
405.36 98.3315 mo
402.707 98.3315 li
402.707 97.0143 li
403.607 97.4284 404.49 97.8669 405.36 98.3315 cv
395.992 98.3315 mo
369.373 98.3315 li
369.373 95.788 li
368.097 95.788 li
368.097 95.2548 368.148 94.7333 368.245 94.228 cv
372.52 93.0483 377.019 92.4185 381.664 92.4185 cv
387.036 92.4185 392.213 93.261 397.073 94.8221 cv
397.11 95.1389 397.129 95.4614 397.129 95.788 cv
395.992 95.788 li
395.992 98.3315 li
362.659 98.3315 mo
357.967 98.3315 li
359.487 97.52 361.052 96.7852 362.659 96.1298 cv
362.659 98.3315 li
364.038 95.788 mo
363.521 95.788 li
363.694 95.7209 363.865 95.656 364.04 95.5907 cv
364.039 95.6564 364.038 95.7221 364.038 95.788 cv
.501961 .65098 .596078 rgb
f
381.664 92.4185 mo
353.818 92.4185 331.164 115.073 331.164 142.918 cv
331.164 170.764 353.818 193.417 381.664 193.417 cv
409.509 193.417 432.163 170.764 432.163 142.918 cv
432.163 115.073 409.509 92.4185 381.664 92.4185 cv
381.664 198.333 mo
351.107 198.333 326.248 173.474 326.248 142.918 cv
326.248 112.362 351.107 87.5029 381.664 87.5029 cv
412.219 87.5029 437.078 112.362 437.078 142.918 cv
437.078 173.474 412.219 198.333 381.664 198.333 cv
1 1 1 rgb
f
362.141 259.409 mo
337.35 252.866 li
337.369 257.871 li
329.332 257.901 li
328.431 257.905 327.703 258.638 327.706 259.54 cv
327.709 260.438 328.44 261.165 329.338 261.165 cv
329.345 261.165 li
337.381 261.134 li
337.4 266.14 li
362.141 259.409 li
cp
f
313.349 324.142 mo
307.665 318.458 li
307.028 317.821 305.995 317.821 305.358 318.458 cv
304.721 319.096 304.721 320.129 305.358 320.766 cv
311.041 326.45 li
307.502 329.989 li
329.707 342.808 li
316.888 320.603 li
313.349 324.142 li
cp
f
306.114 207.04 mo
306.492 207.04 306.873 206.908 307.181 206.641 cv
313.258 201.38 li
316.534 205.164 li
330.912 183.935 li
307.845 195.129 li
311.121 198.913 li
305.045 204.174 li
304.364 204.764 304.29 205.794 304.88 206.476 cv
305.202 206.849 305.657 207.04 306.114 207.04 cv
cp
f
249.719 148.111 mo
243.363 172.951 li
248.368 172.894 li
248.459 180.931 li
248.47 181.826 249.198 182.543 250.091 182.543 cv
250.11 182.543 li
251.011 182.534 251.733 181.794 251.723 180.893 cv
251.632 172.857 li
256.637 172.8 li
249.719 148.111 li
cp
f
185.29 200.96 mo
191.059 206.556 li
191.376 206.864 191.785 207.017 192.195 207.017 cv
192.62 207.017 193.046 206.851 193.366 206.521 cv
193.993 205.875 193.978 204.842 193.331 204.214 cv
187.563 198.617 li
191.048 195.025 li
168.651 182.543 li
181.805 204.552 li
185.29 200.96 li
cp
f
171.069 263.088 mo
171.136 263.089 li
172.007 263.089 172.729 262.401 172.765 261.522 cv
172.801 260.622 172.1 259.863 171.2 259.826 cv
163.169 259.504 li
163.369 254.503 li
138.357 260.141 li
162.837 267.767 li
163.038 262.766 li
171.069 263.088 li
cp
f
191.156 318.407 mo
185.222 323.828 li
181.847 320.132 li
168.038 341.736 li
190.799 329.933 li
187.423 326.237 li
193.357 320.817 li
194.023 320.209 194.069 319.177 193.461 318.511 cv
192.853 317.846 191.822 317.8 191.156 318.407 cv
cp
f
480.934 271.478 mo
480.975 270.847 481.007 270.212 481.027 269.575 cv
485 266.977 li
485.186 266.857 li
486.507 266.036 487.599 264.816 488.255 263.187 cv
489.562 259.85 488.677 256.894 486.652 254.577 cv
489.43 257.023 490.895 260.403 489.368 264.301 cv
488.712 265.929 487.62 267.149 486.3 267.97 cv
486.114 268.091 li
480.934 271.478 li
371.866 254.362 mo
362.416 249.901 li
362.416 249.313 li
371.999 253.837 li
371.954 254.011 371.909 254.187 371.866 254.362 cv
372.997 250.448 mo
366.156 247.219 li
363.153 245.799 li
376.948 241.331 li
375.372 244.223 374.044 247.275 372.997 250.448 cv
.447059 .509804 .486274 rgb
f
425.642 318.266 mo
424.592 318.266 423.548 318.233 422.513 318.17 cv
422.557 318.17 422.602 318.171 422.646 318.171 cv
424.217 318.171 425.804 317.835 427.266 317.348 cv
429.772 316.516 430.962 314.917 432.682 313.106 cv
432.745 312.996 li
452.25 291.765 li
453.131 293.132 li
433.859 314.109 li
433.795 314.219 li
432.275 315.82 431.168 317.255 429.201 318.142 cv
428.593 318.184 427.982 318.216 427.368 318.237 cv
430.345 317.336 432.294 315.024 433.759 312.158 cv
433.759 312.15 li
433.76 312.139 li
433.751 312.158 li
432.285 315.017 430.327 317.338 427.364 318.237 cv
426.793 318.256 426.218 318.266 425.642 318.266 cv
421.248 318.076 mo
420.207 317.986 419.176 317.864 418.154 317.712 cv
417.287 317.201 416.506 316.565 415.871 315.785 cv
417.164 316.847 418.777 317.532 420.42 317.921 cv
420.693 317.986 420.97 318.037 421.248 318.076 cv
423.945 317.463 mo
422.033 317.463 420.118 316.821 418.497 315.871 cv
418.231 315.715 417.969 315.531 417.715 315.324 cv
416.74 314.164 415.968 312.683 415.593 311.191 cv
415.963 312.675 416.727 314.149 417.694 315.307 cv
415.554 313.554 413.929 310.149 414.283 307.424 cv
414.493 307.172 414.734 306.953 415 306.767 cv
414.873 306.854 li
416.529 305.555 li
419.183 305.596 423.05 308.263 421.159 311.037 cv
421.132 311.074 421.243 311.095 421.421 311.095 cv
421.858 311.095 422.702 310.97 422.905 310.667 cv
424.954 307.668 421.105 305.024 417.482 304.808 cv
424 299.695 li
423.434 299.495 422.86 299.318 422.281 299.167 cv
409.737 308.554 li
409.756 308.518 li
409.622 308.729 409.209 308.847 408.81 308.847 cv
408.366 308.847 407.94 308.701 407.94 308.379 cv
407.939 308.158 407.941 307.938 407.947 307.721 cv
408.397 307.668 408.786 307.468 408.676 307.155 cv
408.269 306.035 408.361 304.481 408.951 302.935 cv
409.438 301.864 410.122 300.898 411.044 300.071 cv
411.056 300.063 li
413.106 298.677 li
414.743 297.572 li
414.966 297.509 415.195 297.454 415.43 297.407 cv
415.448 297.407 li
415.703 297.395 415.959 297.389 416.218 297.389 cv
421.23 297.389 426.986 299.613 430.219 303.275 cv
429.883 302.974 429.531 302.686 429.162 302.41 cv
429.531 302.686 429.884 302.975 430.219 303.276 cv
432.113 305.422 433.141 308.061 432.645 311.037 cv
432.645 311.045 li
431.12 314.03 429.069 316.414 425.879 317.228 cv
425.242 317.389 424.594 317.463 423.945 317.463 cv
424.254 311.384 mo
424.246 311.396 li
424.254 311.384 li
424.432 310.973 mo
424.358 311.15 li
424.432 310.973 li
424.54 310.568 mo
424.489 310.776 li
424.54 310.568 li
424.583 310.171 mo
424.566 310.391 li
424.583 310.171 li
416.543 298.52 mo
410.998 299.629 408.743 305.385 409.789 308.268 cv
409.779 308.474 li
409.791 308.268 li
408.746 305.385 411.001 299.628 416.545 298.52 cv
416.543 298.52 li
417.383 305.944 mo
416.548 306.029 415.767 306.267 415.122 306.685 cv
415.768 306.268 416.549 306.03 417.383 305.944 cv
417.872 305.912 mo
417.798 305.915 417.724 305.918 417.651 305.923 cv
417.724 305.918 417.798 305.915 417.872 305.912 cv
418.045 305.909 mo
418.019 305.909 417.993 305.91 417.968 305.91 cv
417.993 305.91 418.019 305.909 418.045 305.909 cv
418.13 305.908 mo
418.168 305.909 418.207 305.909 418.245 305.909 cv
418.207 305.909 418.168 305.909 418.13 305.908 cv
418.123 305.908 mo
418.12 305.908 418.118 305.908 418.116 305.908 cv
418.118 305.908 418.12 305.908 418.123 305.908 cv
418.123 305.908 li
427.235 301.155 mo
427.538 301.326 427.835 301.504 428.125 301.689 cv
427.835 301.504 427.538 301.326 427.235 301.155 cv
426.278 300.653 mo
426.541 300.782 426.801 300.918 427.056 301.058 cv
426.801 300.918 426.541 300.782 426.278 300.653 cv
424.781 299.986 mo
424.872 300.022 424.963 300.059 425.054 300.097 cv
424.963 300.059 424.872 300.022 424.781 299.986 cv
421.295 298.935 mo
421.611 299.001 421.926 299.075 422.242 299.156 cv
421.927 299.075 421.611 299.001 421.295 298.935 cv
419.409 298.627 mo
419.875 298.681 420.343 298.751 420.811 298.839 cv
420.343 298.751 419.875 298.68 419.409 298.627 cv
417.972 298.516 mo
418.39 298.532 418.813 298.563 419.237 298.608 cv
418.812 298.563 418.39 298.532 417.972 298.516 cv
417.283 298.503 mo
417.041 298.503 416.8 298.509 416.561 298.52 cv
416.564 298.52 li
416.807 298.509 417.052 298.504 417.299 298.504 cv
417.352 298.504 417.404 298.504 417.457 298.504 cv
417.399 298.504 417.341 298.503 417.283 298.503 cv
417.944 298.516 mo
417.944 298.516 li
417.944 298.516 li
459.986 303.161 mo
458.985 301.607 li
460.638 295.117 li
467.286 296.303 li
467.098 296.575 466.908 296.846 466.715 297.115 cv
461.751 296.23 li
460.08 302.792 li
459.986 303.161 li
390.487 297.136 mo
389.659 297.136 388.942 296.526 388.833 295.682 cv
387.673 286.933 li
386.503 295.682 li
386.396 296.526 385.678 297.136 384.849 297.136 cv
384.632 297.119 li
384.609 297.116 384.586 297.113 384.563 297.109 cv
384.098 296.459 383.648 295.799 383.213 295.127 cv
384.383 286.307 li
381.701 292.636 li
380.987 291.379 380.323 290.084 379.716 288.763 cv
382.89 281.256 li
382.465 280.582 382.192 279.813 382.084 278.987 cv
387.967 284.678 399.713 288.556 413.244 288.556 cv
418.38 288.556 423.26 287.996 427.659 286.99 cv
424.909 288.846 li
421.578 289.38 418.035 289.669 414.357 289.669 cv
407.084 289.669 400.326 288.548 394.718 286.627 cv
397.031 292.101 li
397.392 292.953 397 293.929 396.147 294.289 cv
395.933 294.379 395.712 294.421 395.495 294.421 cv
394.845 294.421 394.23 294.041 393.96 293.404 cv
390.955 286.307 li
392.14 295.249 li
392.264 296.158 391.621 297.002 390.702 297.119 cv
390.487 297.136 li
467.464 296.041 mo
465.121 292.401 li
468.952 293.714 li
468.83 293.916 468.707 294.118 468.582 294.319 cv
466.234 293.514 li
467.667 295.74 li
467.6 295.84 467.532 295.941 467.464 296.041 cv
469.474 292.825 mo
467.122 287.55 li
472.593 284.622 li
473.177 284.822 li
472.996 285.326 472.807 285.825 472.61 286.321 cv
468.235 288.664 li
469.819 292.215 li
469.705 292.419 469.59 292.623 469.474 292.825 cv
465.609 281.498 mo
463.761 280.865 li
475.878 272.942 li
475.809 273.613 475.727 274.281 475.632 274.944 cv
465.609 281.498 li
411.807 272.62 mo
411.807 272.62 li
411.807 268.757 li
388.737 257.877 li
377.48 252.564 li
379.025 247.68 381.293 243.116 384.159 238.996 cv
412.92 229.683 li
463.423 246.037 li
463.423 249.901 li
449.521 256.457 li
449.521 264.697 li
449.521 271.002 li
448.298 272.308 li
448.286 272.309 448.276 272.31 448.264 272.311 cv
448.359 271.775 448.408 271.232 448.408 270.683 cv
448.408 263.583 li
448.408 263.583 li
448.408 255.341 li
445.042 256.937 li
440.217 259.22 li
421.176 268.203 li
411.807 272.62 li
378.068 257.289 mo
376.408 256.506 li
376.448 256.329 376.489 256.152 376.532 255.976 cv
378.068 256.702 li
378.07 256.703 li
378.068 256.702 li
378.068 257.289 li
.32549 .423529 .388235 rgb
f
423.759 319.284 mo
423.009 319.284 422.262 319.207 421.533 319.034 cv
420.355 318.755 419.193 318.324 418.154 317.712 cv
419.176 317.864 420.207 317.986 421.248 318.076 cv
421.604 318.126 421.963 318.155 422.323 318.166 cv
423.213 318.427 424.136 318.576 425.058 318.576 cv
425.707 318.576 426.356 318.502 426.992 318.341 cv
427.119 318.309 427.245 318.274 427.368 318.237 cv
427.982 318.216 428.593 318.184 429.201 318.142 cv
428.943 318.258 428.67 318.365 428.379 318.461 cv
426.917 318.949 425.331 319.284 423.759 319.284 cv
425.067 318.574 mo
424.148 318.574 423.23 318.426 422.343 318.166 cv
422.4 318.168 422.456 318.169 422.513 318.17 cv
423.548 318.233 424.592 318.266 425.642 318.266 cv
426.218 318.266 426.793 318.256 427.364 318.237 cv
427.243 318.273 427.121 318.308 426.997 318.339 cv
426.361 318.5 425.714 318.574 425.067 318.574 cv
468.791 297.485 mo
466.715 297.115 li
466.908 296.846 467.098 296.575 467.286 296.303 cv
467.678 296.373 li
467.464 296.041 li
467.532 295.941 467.6 295.84 467.667 295.74 cv
468.791 297.485 li
384.563 297.109 mo
383.682 296.96 383.076 296.135 383.197 295.249 cv
383.213 295.127 li
383.648 295.799 384.098 296.459 384.563 297.109 cv
471.148 295.196 mo
471.139 295.193 li
471.14 295.195 li
468.582 294.319 li
468.707 294.118 468.83 293.916 468.952 293.714 cv
470.027 294.082 li
470.026 294.08 li
470.035 294.083 li
469.474 292.825 li
469.59 292.623 469.705 292.419 469.819 292.215 cv
471.148 295.196 li
379.841 294.421 mo
379.624 294.421 379.403 294.379 379.189 294.289 cv
378.337 293.929 377.946 292.953 378.305 292.101 cv
379.716 288.763 li
380.323 290.084 380.987 291.379 381.701 292.636 cv
381.376 293.404 li
381.108 294.041 380.492 294.421 379.841 294.421 cv
472.61 286.321 mo
472.807 285.825 472.996 285.326 473.177 284.822 cv
474.539 285.289 li
472.61 286.321 li
475.632 274.944 mo
475.727 274.281 475.809 273.613 475.878 272.942 cv
481.027 269.575 li
481.007 270.212 480.975 270.847 480.934 271.478 cv
475.632 274.944 li
376.408 256.506 mo
371.866 254.362 li
371.909 254.187 371.954 254.011 371.999 253.837 cv
376.532 255.976 li
376.489 256.152 376.448 256.329 376.408 256.506 cv
377.48 252.564 mo
372.997 250.448 li
374.044 247.275 375.372 244.223 376.948 241.331 cv
384.159 238.996 li
381.293 243.116 379.025 247.68 377.48 252.564 cv
.65098 .65098 .65098 rgb
f
411.807 268.757 mo
411.807 272.622 li
385.057 259.999 li
378.068 256.702 li
361.303 248.788 li
361.303 244.924 li
366.156 247.219 li
388.737 257.877 li
411.807 268.757 li
.231373 .231373 .231373 rgb
f
462.31 244.924 mo
457.456 247.219 li
436.3 257.204 li
411.807 268.757 li
388.737 257.877 li
366.157 247.219 li
361.303 244.924 li
411.807 228.569 li
462.31 244.924 li
cp
.301961 .301961 .301961 rgb
f
411.807 228.572 mo
411.807 268.759 li
388.733 257.873 li
366.159 247.219 li
361.299 244.928 li
411.807 228.572 li
cp
.368627 .368627 .368627 rgb
f
448.408 255.345 mo
448.408 270.683 li
448.408 280.561 432.658 288.556 413.244 288.556 cv
393.816 288.556 378.068 280.561 378.068 270.683 cv
378.068 256.702 li
385.057 259.999 li
411.807 272.622 li
440.217 259.22 li
448.408 255.345 li
.180392 .180392 .180392 rgb
f
411.807 272.622 mo
385.057 259.999 li
378.07 256.703 li
385.057 259.999 li
411.807 272.622 li
411.807 272.62 li
421.176 268.203 li
411.807 272.622 li
448.408 263.583 mo
448.408 255.345 li
445.042 256.937 li
448.408 255.341 li
448.408 263.583 li
448.408 263.583 li
.266667 .34902 .317647 rgb
f
411.807 272.622 mo
385.057 259.999 li
378.07 256.703 li
378.07 256.7 li
385.064 259.999 li
411.807 272.62 li
411.807 272.622 li
.188235 .188235 .188235 rgb
f
412.053 288.536 mo
411.675 288.536 411.297 288.521 410.918 288.505 cv
408.72 284.652 405.846 280.854 402.345 277.361 cv
394.859 269.876 386.043 265.248 378.07 263.935 cv
378.07 256.703 li
385.057 259.999 li
411.807 272.622 li
421.176 268.203 li
440.221 259.223 li
445.042 256.937 li
448.408 255.345 li
448.408 263.583 li
439.639 264.026 429.4 268.85 420.899 277.361 cv
417.388 280.864 414.514 284.661 412.305 288.533 cv
412.221 288.535 412.137 288.536 412.053 288.536 cv
.14902 .14902 .14902 rgb
f
462.31 244.924 mo
462.31 248.788 li
448.408 255.345 li
440.217 259.22 li
411.807 272.623 li
411.807 268.757 li
436.3 257.204 li
457.456 247.219 li
462.31 244.924 li
cp
.231373 .231373 .231373 rgb
f
386.553 279.228 mo
385.276 279.228 384.241 278.194 384.241 276.918 cv
384.241 256.845 li
384.241 255.883 384.839 255.02 385.738 254.682 cv
410.994 245.187 li
412.192 244.737 413.519 245.34 413.969 246.536 cv
414.418 247.729 413.814 249.062 412.619 249.511 cv
388.863 258.442 li
388.863 276.918 li
388.863 278.194 387.828 279.228 386.553 279.228 cv
cp
1 1 1 rgb
f
387.086 272.442 mo
386.892 272.396 li
387.04 272.425 li
387.086 272.442 li
cp
.94902 .94902 .94902 rgb
f
395.034 293.176 mo
394.182 293.534 393.206 293.141 392.847 292.291 cv
389.842 285.193 li
391.027 294.136 li
391.151 295.045 390.508 295.889 389.59 296.006 cv
389.374 296.023 li
388.546 296.023 387.828 295.413 387.72 294.569 cv
386.56 285.82 li
385.39 294.569 li
385.284 295.413 384.565 296.023 383.737 296.023 cv
383.518 296.006 li
382.601 295.889 381.959 295.045 382.084 294.136 cv
383.269 285.193 li
380.263 292.291 li
379.905 293.141 378.928 293.534 378.076 293.176 cv
377.224 292.815 376.832 291.84 377.193 290.988 cv
385.014 272.484 li
385.081 272.359 li
385.223 272.134 li
385.406 271.934 li
385.599 271.775 li
385.742 271.665 385.899 271.59 386.075 271.542 cv
386.25 271.5 li
386.459 271.458 386.659 271.458 386.861 271.5 cv
387.034 271.542 li
387.211 271.59 387.369 271.665 387.519 271.783 cv
387.711 271.934 li
387.887 272.134 li
388.028 272.359 li
388.096 272.484 li
395.918 290.988 li
396.279 291.84 395.887 292.815 395.034 293.176 cv
cp
1 1 1 rgb
f
386.117 271.525 mo
386.25 271.5 li
386.075 271.542 li
386.117 271.525 li
cp
.94902 .94902 .94902 rgb
f
392.217 277.13 mo
392.217 280.257 389.683 282.792 386.555 282.792 cv
383.428 282.792 380.893 280.257 380.893 277.13 cv
380.893 274.001 383.428 271.467 386.555 271.467 cv
389.683 271.467 392.217 274.001 392.217 277.13 cv
cp
1 1 1 rgb
f
473.426 284.176 mo
467.122 287.55 li
470.035 294.083 li
452.112 287.944 li
455.503 278.036 li
473.426 284.176 li
1 .678431 .329412 rgb
f
467.678 296.373 mo
460.639 295.113 li
458.874 302.044 li
448.62 286.117 li
457.424 280.446 li
467.678 296.373 li
1 .764706 .509804 rgb
f
488.255 263.187 mo
487.599 264.816 486.507 266.036 485.186 266.857 cv
485 266.977 li
460.014 283.315 li
432.745 312.996 li
432.682 313.106 li
430.962 314.917 429.772 316.516 427.266 317.348 cv
425.105 318.068 422.674 318.457 420.42 317.921 cv
417.684 317.273 415.033 315.805 413.803 313.144 cv
413.037 311.462 411.788 308.846 412.739 306.97 cv
415.134 302.239 426.074 306.027 422.905 310.667 cv
422.619 311.093 421.066 311.166 421.159 311.037 cv
423.81 307.147 415.143 303.468 414.368 306.944 cv
413.664 310.058 415.846 314.316 418.497 315.871 cv
420.668 317.143 423.366 317.864 425.879 317.228 cv
429.069 316.414 431.12 314.03 432.645 311.045 cv
432.645 311.037 li
434.03 302.721 423.516 297.027 415.448 297.407 cv
415.43 297.407 li
409.885 298.516 407.63 304.272 408.676 307.155 cv
408.915 307.83 406.827 307.978 406.827 307.266 cv
406.808 303.966 407.621 301.03 409.931 298.958 cv
409.942 298.95 li
411.993 297.564 li
446.385 274.351 li
467.352 251.962 li
467.683 251.612 li
473.589 245.513 492.504 252.341 488.255 263.187 cv
.913725 .913725 .913725 rgb
f
460.89 283.832 mo
460.655 284.413 460.361 284.923 459.996 285.381 cv
458.586 286.73 li
457.669 287.372 456.559 288.126 455.451 288.282 cv
456.087 285.777 455.133 283.651 453.669 282.031 cv
452.398 280.595 450.59 279.469 448.633 278.725 cv
446.556 277.939 444.304 277.727 442.313 277.916 cv
440.877 278.056 440.105 278.625 438.82 279.42 cv
443.656 274.269 li
444.124 273.818 li
444.166 273.783 li
449.525 269.421 464.334 275.038 460.89 283.832 cv
1 .764706 .509804 rgb
f
458.873 302.047 mo
453.131 293.132 li
453.134 293.129 li
458.874 302.044 li
458.873 302.047 li
.454902 .556863 .458824 rgb
f
467.286 296.303 mo
460.638 295.117 li
460.639 295.113 li
467.286 296.302 li
467.286 296.303 li
453.131 293.132 mo
452.25 291.765 li
452.254 291.762 li
453.134 293.129 li
453.131 293.132 li
.294118 .360784 .298039 rgb
f
467.678 296.373 mo
467.286 296.303 li
467.286 296.302 li
467.678 296.373 li
.588235 .556863 .501961 rgb
f
468.952 293.714 mo
465.121 292.401 li
465.12 292.4 li
468.953 293.712 li
468.952 293.714 li
.294118 .360784 .298039 rgb
f
470.027 294.082 mo
468.952 293.714 li
468.953 293.712 li
470.026 294.08 li
470.027 294.082 li
.588235 .556863 .501961 rgb
f
470.026 294.08 mo
468.953 293.712 li
465.12 292.4 li
460.316 284.938 li
460.538 284.599 460.728 284.232 460.89 283.832 cv
461.069 283.374 461.199 282.925 461.283 282.485 cv
463.09 281.304 li
463.761 280.867 li
473.426 284.176 li
467.115 287.549 li
470.026 294.08 li
.905882 .580392 .254902 rgb
f
458.874 302.044 mo
453.134 293.129 li
452.254 291.762 li
455.451 288.282 li
456.189 288.178 456.927 287.81 457.609 287.385 cv
457.95 287.174 458.278 286.949 458.586 286.737 cv
459.991 285.388 li
459.992 285.386 459.994 285.384 459.995 285.383 cv
459.996 285.381 li
460.11 285.239 460.216 285.091 460.316 284.938 cv
465.12 292.4 li
465.121 292.401 li
465.118 292.4 li
467.678 296.373 li
467.286 296.302 li
460.639 295.113 li
460.638 295.117 li
460.638 295.117 li
458.874 302.044 li
.905882 .654902 .392157 rgb
f
452.25 291.765 mo
452.248 291.762 li
454.88 288.898 li
455.444 288.279 li
455.452 288.279 li
455.451 288.28 455.451 288.281 455.451 288.282 cv
455.451 288.282 455.451 288.282 455.451 288.282 cv
452.254 291.762 li
452.25 291.765 li
461.283 282.485 mo
461.284 282.483 461.284 282.481 461.285 282.479 cv
463.09 281.304 li
461.283 282.485 li
.827451 .780392 .701961 rgb
f
455.451 288.282 mo
455.451 288.281 455.451 288.28 455.452 288.279 cv
455.454 288.279 li
456.193 288.174 456.928 287.807 457.609 287.385 cv
456.927 287.81 456.189 288.178 455.451 288.282 cv
455.451 288.282 455.451 288.282 455.451 288.282 cv
459.995 285.383 mo
460.113 285.234 460.213 285.089 460.313 284.935 cv
460.535 284.592 460.72 284.233 460.886 283.835 cv
461.063 283.373 461.201 282.928 461.275 282.485 cv
461.285 282.479 li
461.284 282.481 461.284 282.483 461.283 282.485 cv
461.199 282.925 461.069 283.374 460.89 283.832 cv
460.728 284.232 460.538 284.599 460.316 284.938 cv
460.216 285.091 460.11 285.239 459.996 285.381 cv
459.995 285.383 li
.905882 .654902 .392157 rgb
f
408.623 307.441 mo
408.696 307.367 408.715 307.266 408.678 307.155 cv
407.633 304.272 409.888 298.515 415.432 297.407 cv
415.451 297.407 li
417.29 297.324 419.248 297.554 421.169 298.052 cv
408.623 307.441 li
cp
.756863 .756863 .756863 rgb
f
422.908 310.657 mo
425.736 306.518 417.281 303.052 413.761 305.74 cv
422.889 298.581 li
425.827 299.615 428.545 301.298 430.384 303.468 cv
422.908 310.657 li
cp
.85098 .85098 .85098 rgb
f
432.647 311.025 mo
432.638 311.045 li
431.113 314.021 429.053 316.414 425.884 317.227 cv
423.368 317.864 420.672 317.135 418.501 315.869 cv
415.849 314.309 413.667 310.056 414.361 306.941 cv
415.146 303.458 423.813 307.147 421.162 311.037 cv
421.069 311.166 422.621 311.082 422.908 310.657 cv
430.384 303.468 li
432.176 305.574 433.128 308.144 432.647 311.025 cv
cp
.756863 .756863 .756863 rgb
f
413.343 190.056 mo
412.924 189.778 412.509 189.495 412.097 189.209 cv
412.385 189.019 412.671 188.826 412.956 188.63 cv
423.959 186.615 434.727 183.92 445.072 180.287 cv
454.172 177.095 462.572 172.676 469.167 166.301 cv
469.756 166.563 470.347 166.818 470.942 167.067 cv
464.273 173.713 455.675 178.279 446.338 181.553 cv
435.718 185.284 424.651 188.024 413.343 190.056 cv
.447059 .509804 .486274 rgb
f
404.427 187.99 mo
400.281 185.21 396.405 182.091 393.174 178.751 cv
396.194 181.675 399.69 184.413 403.393 186.879 cv
404.919 186.605 406.442 186.317 407.96 186.017 cv
406.811 186.72 405.633 187.378 404.427 187.99 cv
.32549 .423529 .388235 rgb
f
412.097 189.209 mo
411.217 188.598 410.351 187.972 409.501 187.333 cv
409.387 187.247 li
407.815 187.56 406.24 187.861 404.659 188.146 cv
404.582 188.094 404.504 188.042 404.427 187.99 cv
405.633 187.378 406.811 186.72 407.96 186.017 cv
408.013 186.006 408.065 185.996 408.118 185.985 cv
409.401 186.953 410.725 187.89 412.076 188.79 cv
412.369 188.737 412.663 188.684 412.956 188.63 cv
412.671 188.826 412.385 189.019 412.097 189.209 cv
.65098 .65098 .65098 rgb
f
385.605 169.139 mo
338.519 169.139 li
338.263 168.721 338.015 168.299 337.771 167.873 cv
384.96 167.873 li
385.162 168.297 385.377 168.718 385.605 169.139 cv
.32549 .423529 .388235 rgb
f
338.519 169.139 mo
337.383 169.139 li
337.383 167.873 li
337.771 167.873 li
338.015 168.299 338.263 168.721 338.519 169.139 cv
.65098 .65098 .65098 rgb
f
431.021 117.739 mo
430.617 116.95 430.194 116.173 429.754 115.406 cv
429.754 99.5977 li
431.021 99.5977 li
431.021 117.739 li
.447059 .509804 .486274 rgb
f
426.79 151.933 mo
426.79 145.081 li
426.766 145.088 426.741 145.095 426.717 145.102 cv
426.717 145.08 li
427.786 144.767 428.8 144.443 429.754 144.109 cv
429.754 127.493 li
430.25 129.035 430.674 130.61 431.021 132.212 cv
431.021 145.375 li
430.072 145.707 429.045 146.026 427.983 146.337 cv
427.983 146.368 li
428.057 146.347 li
428.057 151.178 li
427.64 151.434 427.216 151.686 426.79 151.933 cv
.32549 .423529 .388235 rgb
f
431.021 132.212 mo
430.674 130.61 430.25 129.035 429.754 127.493 cv
429.754 115.406 li
430.194 116.173 430.617 116.95 431.021 117.739 cv
431.021 132.212 li
.65098 .65098 .65098 rgb
f
336.116 146.044 mo
335.556 145.873 335.01 145.699 334.488 145.521 cv
334.488 144.67 li
335.016 144.837 335.558 145.001 336.116 145.162 cv
336.116 146.044 li
.32549 .423529 .388235 rgb
f
400.065 90.6435 mo
397.798 89.8429 395.46 89.1853 393.069 88.683 cv
391.835 87.9506 390.395 87.5298 388.86 87.5298 cv
383.403 87.5298 li
382.826 87.5119 382.246 87.5029 381.664 87.5029 cv
381.082 87.5029 380.502 87.5119 379.925 87.5298 cv
376.367 87.5298 li
375.264 87.5298 374.211 87.747 373.247 88.1409 cv
370.614 88.5438 368.043 89.1321 365.546 89.893 cv
366.113 88.8594 366.825 87.9148 367.656 87.0864 cv
369.897 84.8575 372.972 83.4805 376.367 83.4805 cv
388.86 83.4805 li
393.834 83.4805 398.115 86.4139 400.065 90.6435 cv
.447059 .509804 .486274 rgb
f
402.707 98.3315 mo
395.992 98.3315 li
395.992 95.788 li
397.129 95.788 li
397.129 95.4614 397.11 95.1389 397.073 94.8221 cv
399.003 95.4419 400.885 96.1761 402.707 97.0143 cv
402.707 98.3315 li
369.373 98.3315 mo
362.659 98.3315 li
362.659 96.1298 li
362.945 96.0136 363.233 95.8991 363.521 95.788 cv
364.038 95.788 li
364.038 95.7221 364.039 95.6564 364.04 95.5907 cv
365.413 95.0778 366.819 94.6217 368.245 94.228 cv
368.148 94.7333 368.097 95.2548 368.097 95.788 cv
369.373 95.788 li
369.373 98.3315 li
.32549 .423529 .388235 rgb
f
402.707 97.0143 mo
400.885 96.1761 399.003 95.4419 397.073 94.8221 cv
396.767 92.2101 395.234 89.9674 393.069 88.683 cv
395.46 89.1853 397.798 89.8429 400.065 90.6435 cv
400.787 92.2085 401.189 93.9512 401.189 95.788 cv
402.707 95.788 li
402.707 97.0143 li
362.659 96.1298 mo
362.659 95.788 li
363.521 95.788 li
363.233 95.8991 362.945 96.0136 362.659 96.1298 cv
364.04 95.5907 mo
364.072 93.5289 364.613 91.5906 365.546 89.893 cv
368.043 89.1321 370.614 88.5438 373.247 88.1409 cv
370.697 89.183 368.777 91.4622 368.245 94.228 cv
366.819 94.6217 365.413 95.0778 364.04 95.5907 cv
383.403 87.5298 mo
379.925 87.5298 li
380.502 87.5119 381.082 87.5029 381.664 87.5029 cv
382.246 87.5029 382.826 87.5119 383.403 87.5298 cv
.65098 .65098 .65098 rgb
f
426.717 167.873 mo
336.116 167.873 li
336.116 101.031 li
426.717 101.031 li
426.717 167.873 li
.364706 .278431 .219608 rgb
f
429.754 98.3315 mo
429.754 144.109 li
419.196 147.807 401.429 150.227 381.274 150.227 cv
361.389 150.227 343.821 147.872 333.221 144.254 cv
333.221 98.3315 li
429.754 98.3315 li
.568627 .431373 .345098 rgb
f
399.923 94.522 mo
395.863 94.522 li
395.863 89.9663 392.147 86.2632 387.594 86.2632 cv
375.101 86.2632 li
370.547 86.2632 366.83 89.9663 366.83 94.522 cv
362.772 94.522 li
362.772 91.126 364.152 88.0522 366.39 85.8198 cv
368.631 83.5913 371.705 82.2139 375.101 82.2139 cv
387.594 82.2139 li
394.408 82.2139 399.923 87.7202 399.923 94.522 cv
cp
.180392 .180392 .180392 rgb
f
368.106 100.191 mo
361.393 100.191 li
361.393 94.522 li
368.106 94.522 li
368.106 100.191 li
cp
1 .705882 .388235 rgb
f
401.44 100.191 mo
394.726 100.191 li
394.726 94.522 li
401.44 94.522 li
401.44 100.191 li
cp
f
388.032 158.421 mo
374.943 158.421 li
374.943 142.039 li
388.032 142.039 li
388.032 158.421 li
.690196 .545098 .427451 rgb
f
386.513 148.548 mo
386.513 148.628 li
376.436 148.628 li
376.436 148.548 li
376.436 145.76 378.7 143.501 381.476 143.501 cv
382.877 143.501 384.138 144.071 385.05 144.981 cv
385.951 145.892 386.513 147.147 386.513 148.548 cv
cp
.709804 .584314 .482353 rgb
f
386.513 152.934 mo
376.436 152.934 li
376.436 150.655 li
386.513 150.655 li
386.513 152.934 li
f
426.717 151.975 mo
426.717 145.102 li
426.741 145.095 426.766 145.088 426.79 145.081 cv
426.79 151.933 li
426.766 151.947 426.742 151.961 426.717 151.975 cv
.266667 .345098 .317647 rgb
f
421.215 154.791 mo
388.032 154.791 li
388.032 150.138 li
403.595 149.718 417.3 147.85 426.717 145.102 cv
426.717 151.975 li
424.954 152.992 423.115 153.927 421.215 154.791 cv
374.943 154.791 mo
336.186 154.791 li
336.186 145.182 li
345.67 147.905 359.396 149.75 374.943 150.147 cv
374.943 154.791 li
.298039 .227451 .180392 rgb
f
374.943 150.147 mo
359.396 149.75 345.67 147.905 336.186 145.182 cv
336.186 145.173 li
345.661 147.89 359.39 149.743 374.943 150.145 cv
374.943 150.147 li
.462745 .352941 .282353 rgb
f
388.032 154.791 mo
374.943 154.791 li
374.943 150.147 li
374.943 150.145 li
377.045 150.2 379.18 150.227 381.343 150.227 cv
383.604 150.227 385.837 150.197 388.032 150.138 cv
388.032 154.791 li
376.436 150.655 mo
376.436 152.934 li
386.513 152.934 li
386.513 150.655 li
376.436 150.655 li
.564706 .443137 .34902 rgb
f
386.513 152.934 mo
376.436 152.934 li
376.436 150.655 li
386.513 150.655 li
386.513 152.934 li
.580392 .478431 .392157 rgb
f
469.676 165.801 mo
463.007 172.447 454.408 177.012 445.072 180.287 cv
434.451 184.017 423.385 186.758 412.076 188.79 cv
402.906 182.681 395.007 174.91 392.443 166.745 cv
409.544 163.706 429.783 159.746 442.613 148.864 cv
451.157 156.006 460.037 161.764 469.676 165.801 cv
.827451 .854902 .858824 rgb
f
460.991 163.891 mo
454.32 170.538 445.722 175.103 436.387 178.376 cv
425.768 182.108 414.7 184.847 403.393 186.879 cv
394.222 180.771 386.323 173 383.759 164.838 cv
400.86 161.793 421.099 157.834 433.926 146.952 cv
442.473 154.092 451.351 159.854 460.991 163.891 cv
.921569 .921569 .921569 rgb
f
409.001 186.636 mo
408.705 186.42 408.409 186.205 408.123 185.984 cv
417.788 184.061 427.254 181.586 436.387 178.376 cv
444.656 175.477 452.346 171.564 458.632 166.088 cv
459.665 166.646 460.698 167.184 461.755 167.691 cv
454.731 173.954 445.894 178.04 436.388 180.791 cv
427.489 183.376 418.328 185.271 409.001 186.636 cv
.690196 .72549 .752941 rgb
f
408.123 185.984 mo
408.118 185.98 408.112 185.975 408.106 185.971 cv
417.764 184.039 427.228 181.569 436.359 178.362 cv
444.633 175.468 452.323 171.545 458.608 166.075 cv
458.616 166.079 458.624 166.083 458.632 166.088 cv
452.346 171.564 444.656 175.477 436.387 178.376 cv
427.254 181.586 417.788 184.061 408.123 185.984 cv
.768627 .780392 .807843 rgb
f
118.138 322.773 mo
80.3925 322.773 li
94.7042 321.031 107.347 313.812 116.159 303.28 cv
116.936 309.32 117.621 316.602 118.138 322.773 cv
66.9099 322.773 mo
31.8812 322.773 li
32.3245 317.488 32.8904 311.391 33.5316 305.955 cv
42.1712 315.027 53.845 321.182 66.9099 322.773 cv
93.5414 216.042 mo
87.9435 213.882 81.9098 212.606 75.6122 212.386 cv
76.8797 209.474 78.8964 208.269 81.2304 208.269 cv
85.1285 208.269 89.9086 211.636 93.5414 216.042 cv
57.6418 214.709 mo
61.0921 210.975 65.2952 208.269 68.7895 208.269 cv
71.115 208.269 73.1271 209.466 74.3951 212.356 cv
74.1478 212.353 73.8992 212.352 73.6511 212.352 cv
68.088 212.352 62.7117 213.176 57.6418 214.709 cv
.447059 .509804 .486274 rgb
f
73.6511 318.266 mo
57.8115 318.266 43.6527 310.936 34.3871 299.49 cv
34.8143 296.665 35.2621 294.327 35.7196 292.814 cv
34.7342 291.573 34.1414 290.006 34.1414 288.298 cv
34.1414 284.953 36.4046 282.141 39.4818 281.293 cv
37.7909 279.962 36.701 277.901 36.701 275.582 cv
36.701 271.932 39.3934 268.918 42.8988 268.397 cv
41.2167 267.065 40.1341 265.009 40.1341 262.697 cv
40.1341 259.176 42.6366 256.24 45.9598 255.569 cv
43.9925 254.268 42.6937 252.038 42.6937 249.502 cv
42.6937 245.8 45.4627 242.751 49.0414 242.295 cv
47.619 240.968 46.7245 239.083 46.7245 236.984 cv
46.7245 234 48.5228 231.439 51.0925 230.318 cv
50.5884 227.803 51.2924 224.786 52.7378 221.803 cv
59.1129 218.891 66.197 217.267 73.6511 217.267 cv
82.4906 217.267 90.8085 219.551 98.043 223.558 cv
98.9569 225.95 99.3324 228.296 98.927 230.318 cv
101.497 231.439 103.295 234 103.295 236.984 cv
103.295 239.083 102.401 240.968 100.979 242.295 cv
104.558 242.751 107.326 245.8 107.326 249.502 cv
107.326 252.038 106.027 254.268 104.06 255.569 cv
107.384 256.24 109.886 259.176 109.886 262.697 cv
109.886 265.009 108.803 267.065 107.121 268.397 cv
110.626 268.918 113.319 271.932 113.319 275.582 cv
113.319 277.901 112.229 279.962 110.538 281.293 cv
113.616 282.141 115.878 284.953 115.878 288.298 cv
115.878 290.006 115.286 291.573 114.301 292.814 cv
114.586 293.757 114.867 295.021 115.142 296.525 cv
106.014 309.654 90.8185 318.266 73.6511 318.266 cv
.32549 .423529 .388235 rgb
f
80.3925 322.773 mo
66.9099 322.773 li
53.845 321.182 42.1712 315.027 33.5316 305.955 cv
33.8044 303.642 34.0908 301.449 34.3871 299.49 cv
43.6527 310.936 57.8115 318.266 73.6511 318.266 cv
90.8185 318.266 106.014 309.654 115.142 296.525 cv
115.494 298.444 115.835 300.754 116.159 303.28 cv
107.347 313.812 94.7042 321.031 80.3925 322.773 cv
98.043 223.558 mo
90.8085 219.551 82.4906 217.267 73.6511 217.267 cv
66.197 217.267 59.1129 218.891 52.7378 221.803 cv
53.9458 219.31 55.6704 216.842 57.6418 214.709 cv
62.7117 213.176 68.088 212.352 73.6511 212.352 cv
73.8992 212.352 74.1478 212.353 74.3951 212.356 cv
74.6254 212.881 74.8315 213.463 75.0101 214.102 cv
75.1854 213.474 75.387 212.903 75.6122 212.386 cv
81.9098 212.606 87.9435 213.882 93.5414 216.042 cv
95.4621 218.371 97.0625 220.991 98.043 223.558 cv
.65098 .65098 .65098 rgb
f
76.3822 306.72 mo
6.9222 306.72 62.8748 220.446 76.3822 220.446 cv
89.8885 220.446 138.202 306.72 76.3822 306.72 cv
cp
.780392 .780392 .780392 rgb
f
82.3231 267.004 mo
75.0506 267.004 li
73.5047 267.004 li
66.2323 267.004 li
66.2323 267.004 68.6893 280.983 56.9852 292.541 cv
73.5047 312.498 li
75.0506 312.498 li
91.5701 292.541 li
79.866 280.983 82.3231 267.004 82.3231 267.004 cv
cp
.984314 .796078 .678431 rgb
f
82.3231 267.004 mo
75.0506 267.004 li
73.5047 267.004 li
66.2323 267.004 li
66.2323 267.004 67.4232 273.816 64.1668 281.858 cv
70.8885 279.237 76.2449 273.705 82.1571 268.625 cv
82.2205 267.597 82.3231 267.004 82.3231 267.004 cv
cp
.984314 .737255 .580392 rgb
f
95.472 240.586 mo
94.8509 238.984 93.7664 239.812 92.9217 240.867 cv
93.1639 228.438 86.6019 222.126 86.6019 222.126 cv
74.2777 222.126 li
61.9539 222.126 li
61.9539 222.126 55.348 228.424 55.557 240.775 cv
54.7244 239.767 53.6859 239.031 53.0833 240.586 cv
51.9632 243.476 54.596 247.435 54.0916 251.448 cv
53.7508 254.161 55.8914 253.888 57.2464 253.13 cv
57.7562 255.182 58.514 257.603 59.7323 260.437 cv
62.3094 266.43 69.7039 271.887 74.241 271.887 cv
78.7786 271.887 86.0653 266.386 88.7498 260.437 cv
89.9837 257.702 90.7542 255.431 91.2449 253.097 cv
92.5941 253.881 94.8099 254.203 94.4637 251.448 cv
93.9593 247.435 96.5931 243.476 95.472 240.586 cv
cp
.984314 .796078 .678431 rgb
f
59.0116 279.971 mo
58.4222 280.138 57.7987 280.316 57.1439 280.507 cv
57.2825 280.484 li
57.9139 280.382 58.4881 280.207 59.0116 279.971 cv
cp
.301961 .313726 .32549 rgb
f
89.7659 280.035 mo
90.2415 280.233 90.7567 280.387 91.3182 280.48 cv
90.7786 280.322 90.2616 280.175 89.7659 280.035 cv
cp
f
113.05 290.741 mo
112.875 290.424 112.628 290.107 112.339 289.79 cv
108.995 286.127 98.4505 282.563 91.3182 280.48 cv
90.7567 280.387 90.2415 280.233 89.7659 280.035 cv
87.4393 279.06 86.095 276.908 85.3402 274.432 cv
78.805 279.39 li
77.2449 280.264 75.6991 284.939 74.3109 284.939 cv
72.9422 284.939 71.4056 280.264 69.849 279.39 cv
63.2821 274.432 li
62.5448 276.854 61.2445 278.968 59.0116 279.971 cv
58.4881 280.207 57.9139 280.382 57.2825 280.484 cv
57.1439 280.507 li
50.0892 282.571 39.7616 286.067 36.3192 289.673 cv
35.9798 290.028 35.7015 290.385 35.5057 290.741 cv
33.7923 293.862 32.1551 310.05 31.1488 322.041 cv
117.406 322.041 li
116.4 310.05 114.764 293.862 113.05 290.741 cv
cp
.207843 .207843 .207843 rgb
f
72.5301 287.615 mo
62.909 301.579 li
62.3753 302.352 62.868 303.413 63.8021 303.507 cv
78.3905 304.965 li
79.2362 305.05 79.9124 304.274 79.7132 303.447 cv
75.9886 288.025 li
75.8543 287.472 75.3587 287.082 74.7889 287.082 cv
73.5462 287.082 li
73.1405 287.082 72.7611 287.28 72.5301 287.615 cv
cp
1 1 1 rgb
f
76.0941 287.615 mo
85.7161 301.579 li
86.2489 302.352 85.7572 303.413 84.8221 303.507 cv
70.2337 304.965 li
69.388 305.05 68.7117 304.274 68.9115 303.447 cv
72.6366 288.025 li
72.7694 287.472 73.2659 287.082 73.8363 287.082 cv
75.078 287.082 li
75.4837 287.082 75.8641 287.28 76.0941 287.615 cv
cp
f
72.5428 287.703 mo
62.6302 305.051 li
62.1966 305.81 62.6678 306.767 63.5345 306.886 cv
78.4085 308.921 li
79.2479 309.037 79.9505 308.291 79.786 307.459 cv
75.9569 288.076 li
75.8431 287.498 75.3358 287.082 74.7464 287.082 cv
73.6146 287.082 li
73.1717 287.082 72.7625 287.318 72.5428 287.703 cv
cp
.898039 .886275 .882353 rgb
f
76.0814 287.703 mo
85.9949 305.051 li
86.4285 305.81 85.9569 306.767 85.0902 306.886 cv
70.2166 308.921 li
69.3773 309.037 68.6737 308.291 68.8382 307.459 cv
72.6683 288.076 li
72.7821 287.498 73.2894 287.082 73.8787 287.082 cv
75.0096 287.082 li
75.4525 287.082 75.8616 287.318 76.0814 287.703 cv
cp
f
72.6082 287.906 mo
65.7088 307.512 li
65.4261 308.314 66.0218 309.156 66.8729 309.156 cv
81.786 309.156 li
82.637 309.156 83.2327 308.314 82.95 307.512 cv
76.0506 287.906 li
75.8763 287.411 75.41 287.082 74.8866 287.082 cv
73.7728 287.082 li
73.2489 287.082 72.7821 287.411 72.6082 287.906 cv
cp
.952941 .952941 .952941 rgb
f
70.3324 286.536 mo
70.3324 287.187 69.8045 287.713 69.1546 287.713 cv
68.5047 287.713 67.9774 287.187 67.9774 286.536 cv
67.9774 285.886 68.5047 285.359 69.1546 285.359 cv
69.8045 285.359 70.3324 285.886 70.3324 286.536 cv
cp
1 1 1 rgb
f
80.9256 286.536 mo
80.9256 287.187 80.3983 287.713 79.7484 287.713 cv
79.0985 287.713 78.5706 287.187 78.5706 286.536 cv
78.5706 285.886 79.0985 285.359 79.7484 285.359 cv
80.3983 285.359 80.9256 285.886 80.9256 286.536 cv
cp
f
109.806 280.562 mo
111.497 279.23 112.586 277.169 112.586 274.85 cv
112.586 271.199 109.894 268.186 106.389 267.665 cv
108.071 266.333 109.154 264.277 109.154 261.964 cv
109.154 258.443 106.651 255.508 103.327 254.837 cv
105.295 253.535 106.594 251.305 106.594 248.771 cv
106.594 245.068 103.826 242.019 100.246 241.563 cv
101.669 240.236 102.563 238.35 102.563 236.251 cv
102.563 233.268 100.764 230.707 98.1947 229.585 cv
100.438 218.399 78.7733 197.279 74.2777 213.37 cv
69.7821 197.279 48.1175 218.399 50.3607 229.585 cv
47.7908 230.707 45.992 233.268 45.992 236.251 cv
45.992 238.35 46.8866 240.236 48.3089 241.563 cv
44.7303 242.019 41.9613 245.068 41.9613 248.771 cv
41.9613 251.305 43.2606 253.535 45.2279 254.837 cv
41.9041 255.508 39.4017 258.443 39.4017 261.964 cv
39.4017 264.277 40.4847 266.333 42.1668 267.665 cv
38.6615 268.186 35.9691 271.199 35.9691 274.85 cv
35.9691 277.169 37.0584 279.23 38.7493 280.562 cv
35.6722 281.409 33.409 284.22 33.409 287.566 cv
33.409 291.583 36.6654 294.839 40.681 294.839 cv
44.6981 294.839 47.9539 291.583 47.9539 287.566 cv
47.9539 285.247 46.8641 283.187 45.1737 281.854 cv
48.2508 281.007 50.514 278.196 50.514 274.85 cv
50.514 272.537 49.431 270.48 47.7489 269.149 cv
51.2537 268.628 53.9466 265.615 53.9466 261.964 cv
53.9466 259.43 52.6473 257.2 50.6805 255.898 cv
54.0042 255.227 56.5067 252.292 56.5067 248.771 cv
56.5067 246.671 55.6121 244.786 54.1898 243.458 cv
57.7684 243.003 60.5374 239.954 60.5374 236.251 cv
60.5374 236.113 60.5242 235.977 60.5164 235.84 cv
69.5716 236.282 72.9925 229.242 74.2777 224.063 cv
75.5633 229.242 78.9837 236.282 88.0389 235.84 cv
88.0311 235.977 88.0179 236.113 88.0179 236.251 cv
88.0179 239.954 90.7869 243.003 94.3656 243.458 cv
92.9432 244.786 92.0487 246.671 92.0487 248.771 cv
92.0487 252.292 94.5521 255.227 97.8748 255.898 cv
95.908 257.2 94.6092 259.43 94.6092 261.964 cv
94.6092 265.615 97.3016 268.628 100.806 269.149 cv
99.1243 270.48 98.0413 272.537 98.0413 274.85 cv
98.0413 278.196 100.305 281.007 103.382 281.854 cv
101.691 283.187 100.601 285.247 100.601 287.566 cv
100.601 291.583 103.857 294.839 107.874 294.839 cv
111.89 294.839 115.146 291.583 115.146 287.566 cv
115.146 284.22 112.883 281.409 109.806 280.562 cv
cp
.890196 .890196 .890196 rgb
f
318.978 305.679 mo
295.54 305.679 li
295.76 305.448 295.977 305.216 296.194 304.982 cv
318.281 304.982 li
318.281 297.725 li
321.351 297.725 li
321.351 274.681 li
321.351 250.128 li
311.812 250.128 li
311.812 250.128 li
324.178 250.128 li
324.178 219.044 li
324.876 219.044 li
324.876 250.826 li
322.049 250.826 li
322.049 275.378 li
322.049 298.422 li
318.978 298.422 li
318.978 305.679 li
202.661 305.679 mo
181.947 305.679 li
181.947 304.982 li
202.004 304.982 li
202.221 305.215 202.441 305.449 202.661 305.679 cv
181.249 298.422 mo
178.876 298.422 li
178.876 297.725 li
181.249 297.725 li
181.249 298.422 li
178.179 250.826 mo
175.822 250.826 li
175.822 250.128 li
186.379 250.128 li
186.379 250.128 li
178.179 250.128 li
178.179 250.826 li
.32549 .423529 .388235 rgb
f
318.281 297.711 mo
318.281 304.982 li
181.249 304.982 li
181.249 297.711 li
318.281 297.711 li
.811765 .811765 .811765 rgb
f
324.178 218.347 mo
324.178 250.128 li
175.124 250.128 li
175.124 218.347 li
324.178 218.347 li
.760784 .760784 .760784 rgb
f
321.351 250.128 mo
321.351 297.725 li
178.179 297.725 li
178.179 250.128 li
321.351 250.128 li
.858824 .858824 .858824 rgb
f
297.438 271.842 mo
287.674 271.842 li
287.674 258.468 li
297.438 258.468 li
297.438 271.842 li
.941176 .941176 .941176 rgb
f
288.927 270.588 mo
288.927 259.722 li
296.187 259.722 li
296.187 270.588 li
288.927 270.588 li
.580392 .580392 .580392 rgb
f
315.043 271.842 mo
305.278 271.842 li
305.278 258.468 li
315.043 258.468 li
315.043 271.842 li
.941176 .941176 .941176 rgb
f
306.53 270.588 mo
306.53 259.722 li
313.789 259.722 li
313.789 270.588 li
306.53 270.588 li
.580392 .580392 .580392 rgb
f
297.438 293.046 mo
287.674 293.046 li
287.674 279.672 li
297.438 279.672 li
297.438 293.046 li
.941176 .941176 .941176 rgb
f
288.927 291.793 mo
288.927 280.926 li
296.187 280.926 li
296.187 291.793 li
288.927 291.793 li
.580392 .580392 .580392 rgb
f
315.043 293.046 mo
305.278 293.046 li
305.278 279.672 li
315.043 279.672 li
315.043 293.046 li
.941176 .941176 .941176 rgb
f
306.53 291.793 mo
306.53 280.926 li
313.789 280.926 li
313.789 291.793 li
306.53 291.793 li
.580392 .580392 .580392 rgb
f
315.043 261.294 mo
313.789 261.294 li
313.789 259.722 li
313.05 259.722 li
313.028 259.303 313.001 258.885 312.971 258.468 cv
315.043 258.468 li
315.043 261.294 li
.701961 .733333 .741176 rgb
f
313.789 261.294 mo
313.115 261.294 li
313.099 260.769 313.078 260.243 313.05 259.722 cv
313.789 259.722 li
313.789 261.294 li
.431373 .45098 .458824 rgb
f
194.097 271.842 mo
184.33 271.842 li
184.33 258.468 li
194.097 258.468 li
194.097 271.842 li
.941176 .941176 .941176 rgb
f
185.582 270.588 mo
185.582 259.722 li
192.844 259.722 li
192.844 270.588 li
185.582 270.588 li
.580392 .580392 .580392 rgb
f
211.699 271.842 mo
201.933 271.842 li
201.933 258.468 li
211.699 258.468 li
211.699 271.842 li
.941176 .941176 .941176 rgb
f
203.187 270.588 mo
203.187 259.722 li
210.444 259.722 li
210.444 270.588 li
203.187 270.588 li
.580392 .580392 .580392 rgb
f
194.097 293.046 mo
184.33 293.046 li
184.33 279.672 li
194.097 279.672 li
194.097 293.046 li
.941176 .941176 .941176 rgb
f
185.582 291.793 mo
185.582 280.926 li
192.844 280.926 li
192.844 291.793 li
185.582 291.793 li
.580392 .580392 .580392 rgb
f
211.699 293.046 mo
201.933 293.046 li
201.933 279.672 li
211.699 279.672 li
211.699 293.046 li
.941176 .941176 .941176 rgb
f
203.187 291.793 mo
203.187 280.926 li
210.444 280.926 li
210.444 291.793 li
203.187 291.793 li
.580392 .580392 .580392 rgb
f
185.698 271.842 mo
184.33 271.842 li
184.33 258.468 li
185.224 258.468 li
185.093 260.289 185.038 262.131 185.063 263.989 cv
185.097 266.65 185.313 269.271 185.698 271.842 cv
.701961 .733333 .741176 rgb
f
187.417 293.046 mo
184.33 293.046 li
184.33 279.672 li
187.424 279.672 li
187.547 280.092 187.675 280.51 187.807 280.926 cv
185.582 280.926 li
185.582 291.793 li
187.417 291.793 li
187.417 293.046 li
f
187.417 291.793 mo
185.582 291.793 li
185.582 280.926 li
187.807 280.926 li
187.974 281.452 188.148 281.977 188.33 282.498 cv
187.417 282.498 li
187.417 291.793 li
.431373 .45098 .458824 rgb
f
318.281 304.982 mo
296.194 304.982 li
298.304 302.699 300.258 300.272 302.028 297.725 cv
318.281 297.725 li
318.281 304.982 li
.682353 .682353 .682353 rgb
f
321.351 297.725 mo
318.281 297.725 li
302.028 297.725 li
303.193 296.05 304.277 294.323 305.278 292.547 cv
305.278 293.046 li
308.365 293.046 li
315.043 293.046 li
315.043 282.498 li
315.043 279.672 li
310.736 279.672 li
311.487 277.121 312.072 274.507 312.477 271.842 cv
315.043 271.842 li
315.043 268.372 li
321.351 274.681 li
321.351 297.725 li
297.44 280.666 mo
297.44 279.672 li
297.438 279.672 li
296.981 279.672 li
297.914 277.725 298.726 275.736 299.419 273.709 cv
298.92 276.092 298.257 278.414 297.44 280.666 cv
.721569 .721569 .721569 rgb
f
315.043 271.842 mo
312.477 271.842 li
312.54 271.426 312.599 271.007 312.654 270.588 cv
313.789 270.588 li
313.789 267.118 li
313.795 267.124 li
315.043 268.372 li
315.043 271.842 li
.788235 .788235 .788235 rgb
f
313.789 270.588 mo
312.654 270.588 li
312.834 269.197 312.966 267.792 313.046 266.375 cv
313.789 267.118 li
313.789 270.588 li
.486274 .486274 .486274 rgb
f
291.691 291.934 mo
291.718 291.887 291.745 291.839 291.771 291.793 cv
291.786 291.793 li
291.755 291.839 291.722 291.887 291.691 291.934 cv
296.187 283.795 mo
296.187 282.498 li
296.736 282.498 li
296.558 282.934 296.376 283.365 296.187 283.795 cv
.788235 .788235 .788235 rgb
f
291.786 291.793 mo
291.771 291.793 li
293.434 288.868 294.804 285.758 295.843 282.498 cv
296.187 282.498 li
296.187 283.795 li
294.955 286.6 293.479 289.275 291.786 291.793 cv
.486274 .486274 .486274 rgb
f
315.043 293.046 mo
308.365 293.046 li
308.365 291.793 li
313.789 291.793 li
313.789 282.498 li
315.043 282.498 li
315.043 293.046 li
.788235 .788235 .788235 rgb
f
313.789 291.793 mo
308.365 291.793 li
308.365 286.283 li
308.893 285.04 309.382 283.777 309.828 282.498 cv
313.789 282.498 li
313.789 291.793 li
.486274 .486274 .486274 rgb
f
308.365 293.046 mo
305.278 293.046 li
305.278 292.547 li
305.711 291.778 306.129 290.999 306.53 290.213 cv
306.53 291.793 li
308.365 291.793 li
308.365 293.046 li
315.043 282.498 mo
313.789 282.498 li
313.789 280.926 li
310.352 280.926 li
310.485 280.509 310.612 280.092 310.736 279.672 cv
315.043 279.672 li
315.043 282.498 li
.588235 .615686 .623529 rgb
f
308.365 291.793 mo
306.53 291.793 li
306.53 290.213 li
307.187 288.924 307.798 287.617 308.365 286.283 cv
308.365 291.793 li
313.789 282.498 mo
309.828 282.498 li
310.01 281.977 310.185 281.452 310.352 280.926 cv
313.789 280.926 li
313.789 282.498 li
.360784 .380392 .384314 rgb
f
297.438 280.672 mo
297.438 279.672 li
297.44 279.672 li
297.44 280.666 li
297.44 280.668 297.439 280.67 297.438 280.672 cv
.537255 .564706 .568627 rgb
f
296.736 282.498 mo
296.187 282.498 li
296.187 281.371 li
296.211 281.289 296.235 281.205 296.258 281.124 cv
296.506 280.644 296.748 280.158 296.981 279.672 cv
297.438 279.672 li
297.438 280.672 li
297.216 281.285 296.981 281.895 296.736 282.498 cv
.588235 .615686 .623529 rgb
f
296.187 282.498 mo
295.843 282.498 li
295.962 282.124 296.076 281.749 296.187 281.371 cv
296.187 282.498 li
.360784 .380392 .384314 rgb
f
281.25 250.134 mo
281.25 292.523 li
267.142 292.523 li
267.142 250.134 li
281.25 250.134 li
1 1 1 rgb
f
290.732 244.068 mo
290.021 244.978 li
289.131 244.287 li
249.508 214.738 li
209.793 244.356 li
208.893 245.036 li
208.183 244.137 li
249.508 213.32 li
290.732 244.068 li
.823529 .823529 .823529 rgb
f
289.131 244.287 mo
287.334 246.581 li
211.537 246.581 li
209.793 244.356 li
249.508 214.738 li
289.131 244.287 li
.94902 .94902 .94902 rgb
f
220.777 241.976 mo
249.508 220.542 li
278.242 241.976 li
220.777 241.976 li
.898039 .898039 .898039 rgb
f
284.907 246.581 mo
284.907 248.405 li
282.168 248.405 li
282.168 250.134 li
216.939 250.134 li
216.939 248.405 li
213.911 248.405 li
213.911 246.581 li
284.907 246.581 li
f
234.685 294.645 mo
234.685 297.715 li
214.561 297.715 li
214.561 294.645 li
216.171 294.645 li
216.171 292.523 li
233.081 292.523 li
233.081 294.645 li
234.685 294.645 li
.94902 .94902 .94902 rgb
f
284.258 294.645 mo
284.258 297.715 li
264.133 297.715 li
264.133 294.645 li
265.744 294.645 li
265.744 292.523 li
282.653 292.523 li
282.653 294.645 li
284.258 294.645 li
f
231.68 250.134 mo
231.68 292.523 li
217.571 292.523 li
217.571 250.134 li
231.68 250.134 li
1 1 1 rgb
f
287.213 300.142 mo
211.699 300.142 li
211.699 297.719 li
287.213 297.719 li
287.213 300.142 li
f
289.722 304.988 mo
209.193 304.988 li
209.193 300.142 li
289.722 300.142 li
289.722 304.988 li
.894118 .894118 .890196 rgb
f
264.133 300.142 mo
234.685 300.142 li
234.685 297.715 li
264.133 297.715 li
264.133 300.142 li
1 1 1 rgb
f
264.133 302.569 mo
234.685 302.569 li
234.685 300.142 li
264.133 300.142 li
264.133 302.569 li
.94902 .94902 .94902 rgb
f
259.47 294.661 mo
259.47 297.73 li
239.346 297.73 li
239.346 294.661 li
240.956 294.661 li
240.956 292.539 li
257.867 292.539 li
257.867 294.661 li
259.47 294.661 li
f
256.466 250.15 mo
256.466 292.539 li
242.357 292.539 li
242.357 250.15 li
256.466 250.15 li
1 1 1 rgb
f
274.761 58.1878 mo
274.76 58.1876 li
274.937 57.9551 li
274.761 58.1878 li
272.632 57.5449 mo
272.629 57.5449 li
272.531 57.4727 li
272.476 57.4345 li
272.393 57.3714 li
272.481 57.4345 li
272.632 57.5449 li
275.355 57.4066 mo
275.404 57.3413 li
275.404 57.3457 li
275.355 57.4066 li
272.312 57.3135 mo
272.311 57.3135 li
272.307 57.3135 li
271.616 56.8059 li
272.312 57.3135 li
275.571 57.1216 mo
275.906 56.6808 li
275.85 56.7559 li
275.626 57.0503 li
275.571 57.1216 li
271.151 56.0886 mo
270.98 55.7378 li
270.728 55.7378 li
270.728 54.4223 li
270.755 54.4038 li
271.235 53.9843 271.669 53.4823 272.046 52.9136 cv
272.133 52.9931 272.221 53.0701 272.311 53.1446 cv
272.311 54.3298 li
272.271 54.3787 272.23 54.427 272.189 54.4746 cv
271.936 54.4746 li
271.677 55.0069 li
271.622 55.0584 271.566 55.1089 271.51 55.1582 cv
271.483 55.1772 li
271.483 55.4069 li
271.151 56.0886 li
.32549 .423529 .388235 rgb
f
306.703 116.61 mo
292.704 116.61 li
294.264 114.725 295.7 112.737 297.003 110.656 cv
302.48 110.656 li
302.48 99.1401 li
302.75 98.348 303.001 97.5508 303.235 96.7431 cv
303.235 111.411 li
306.703 111.411 li
306.703 116.61 li
207.296 116.61 mo
198.09 116.61 li
198.09 111.411 li
201.556 111.411 li
201.556 110.656 li
202.997 110.656 li
204.3 112.737 205.737 114.725 207.296 116.61 cv
306.703 75.0488 mo
305.061 75.0488 li
305.033 74.7971 305.003 74.5446 304.971 74.2939 cv
305.948 74.2939 li
305.948 71.5678 li
308.255 71.5678 li
308.255 69.5953 li
309.01 69.5953 li
309.01 72.3222 li
306.703 72.3222 li
306.703 75.0488 li
.447059 .509804 .486274 rgb
f
286.1 116.61 mo
213.9 116.61 li
212.09 114.758 210.42 112.767 208.909 110.656 cv
291.091 110.656 li
289.58 112.767 287.91 114.758 286.1 116.61 cv
200.801 75.0488 mo
199.889 75.0488 li
199.92 74.7971 199.954 74.5444 199.989 74.2939 cv
300.011 74.2939 li
300.011 74.2939 li
200.801 74.2939 li
200.801 75.0488 li
.32549 .423529 .388235 rgb
f
292.704 116.61 mo
286.1 116.61 li
287.91 114.758 289.58 112.767 291.091 110.656 cv
297.003 110.656 li
295.7 112.737 294.264 114.725 292.704 116.61 cv
213.9 116.61 mo
207.296 116.61 li
205.737 114.725 204.3 112.737 202.997 110.656 cv
208.909 110.656 li
210.42 112.767 212.09 114.758 213.9 116.61 cv
302.48 99.1401 mo
302.48 77.8804 li
302.48 74.2939 li
300.011 74.2939 li
300.011 74.2939 li
304.971 74.2939 li
305.003 74.5446 305.033 74.7971 305.061 75.0488 cv
303.235 75.0488 li
303.235 78.6353 li
303.235 96.7431 li
303.001 97.5508 302.75 98.348 302.48 99.1401 cv
199.889 75.0488 mo
198.09 75.0488 li
198.09 74.2939 li
199.989 74.2939 li
199.954 74.5444 199.92 74.7971 199.889 75.0488 cv
197.335 72.3222 mo
195.782 72.3222 li
195.782 71.5678 li
197.335 71.5678 li
197.335 72.3222 li
.65098 .65098 .65098 rgb
f
294.421 68.8404 mo
293.682 68.8404 li
293.681 64.8339 292.355 62.282 290.944 60.7009 cv
292.506 62.0941 294.235 64.5843 294.421 68.8404 cv
221.787 63.1693 mo
221.123 63.0345 220.454 62.7361 219.853 62.2547 cv
219.117 61.3471 218.579 60.0632 218.439 58.3481 cv
219.835 57.8314 li
220.631 59.0851 222.132 60.0397 223.959 60.4119 cv
223.22 61.0341 222.421 61.9238 221.787 63.1693 cv
219.852 62.2538 mo
218.914 61.5011 218.142 60.3016 217.816 58.5807 cv
218.439 58.3491 li
218.579 60.0628 219.117 61.3464 219.852 62.2538 cv
277.967 58.774 mo
277.92 58.71 li
277.115 57.6513 li
276.953 57.4424 li
276.953 57.4345 li
276.721 57.1391 li
276.435 56.7559 li
276.14 56.3732 li
276.145 56.3672 li
280.074 56.3672 li
280.074 53.0379 li
280.084 53.0295 280.094 53.0211 280.103 53.0126 cv
281.502 51.7842 282.549 49.9218 283.005 47.7426 cv
283.17 46.9614 283.258 46.1343 283.258 45.2803 cv
283.258 45.0514 283.251 44.825 283.239 44.601 cv
283.303 44.1564 283.342 43.78 283.362 43.452 cv
283.993 44.0076 284.607 44.5768 285.208 45.1627 cv
285.244 45.5065 285.236 45.8841 285.178 46.2744 cv
285.006 47.4166 284.451 48.3081 283.845 48.4962 cv
283.756 48.5152 li
283.297 50.6865 282.253 52.542 280.858 53.7675 cv
280.829 53.791 li
280.829 55.229 li
281.102 55.229 li
281.739 56.5378 li
281.27 56.3716 li
280.074 57.2319 li
279.803 57.4424 li
279.625 57.5713 li
278.086 58.6853 li
277.711 58.1894 li
276.899 57.1216 li
276.895 57.128 li
277.19 57.5107 li
277.475 57.894 li
277.708 58.1894 li
277.708 58.1973 li
277.869 58.4062 li
278.083 58.6871 li
278 58.7476 li
277.967 58.774 li
230.065 56.7156 mo
229.31 56.4131 li
229.31 54.089 li
229.708 54.2791 230.086 54.3629 230.442 54.3629 cv
231.07 54.3629 231.629 54.1022 232.114 53.7061 cv
232.329 53.941 232.557 54.158 232.795 54.3555 cv
232.795 54.514 li
232.329 54.8766 231.796 55.1102 231.201 55.1102 cv
230.844 55.1102 230.465 55.0261 230.065 54.8355 cv
230.065 56.7156 li
221.216 55.3546 mo
220.332 55.3546 219.579 54.867 218.983 54.098 cv
219.422 54.4197 219.917 54.6047 220.46 54.6048 cv
220.903 54.6048 221.378 54.4822 221.882 54.2112 cv
221.882 55.2652 li
221.652 55.3258 221.43 55.3546 221.216 55.3546 cv
219.08 47.956 mo
219.07 47.7813 219.065 47.6093 219.065 47.4341 cv
219.065 47.6093 219.071 47.7813 219.08 47.956 cv
219.065 47.4341 mo
219.065 47.2525 219.07 47.0722 219.081 46.8965 cv
219.071 47.0722 219.065 47.253 219.065 47.4341 cv
222.631 46.1758 mo
223.179 45.9944 223.69 45.8022 224.12 45.6296 cv
223.69 45.8023 223.179 45.9945 222.631 46.1758 cv
226.907 44.1452 mo
227.637 43.5737 228.269 42.8769 228.747 42.0747 cv
228.747 42.0752 228.747 42.0758 228.748 42.0763 cv
228.748 42.0764 228.748 42.0764 228.748 42.0765 cv
228.747 42.0761 228.747 42.0756 228.747 42.0752 cv
228.269 42.8773 227.638 43.5739 226.907 44.1452 cv
228.75 42.0803 mo
228.749 42.0791 228.748 42.0778 228.748 42.0766 cv
228.748 42.0764 li
228.748 42.0774 228.749 42.0784 228.749 42.0794 cv
228.749 42.0797 228.749 42.08 228.75 42.0803 cv
.32549 .423529 .388235 rgb
f
285.208 45.1627 mo
284.607 44.5768 283.993 44.0076 283.362 43.452 cv
283.422 42.5065 283.329 41.9628 283.233 41.3447 cv
283.008 40.0444 282.56 38.8472 281.836 37.8056 cv
281.712 37.6254 281.59 37.461 281.467 37.31 cv
281.875 37.6336 282.224 38.0272 282.591 38.5605 cv
283.315 39.6021 283.763 40.7993 283.988 42.0996 cv
284.059 42.5557 284.127 42.9747 284.134 43.5416 cv
284.229 43.5468 li
284.254 43.5557 li
284.765 43.6636 285.121 44.3084 285.208 45.1627 cv
.65098 .65098 .65098 rgb
f
255.422 57.853 mo
255.968 57.454 li
255.126 55.7261 li
254.873 55.7261 li
254.873 54.4107 li
254.901 54.3911 li
256.174 53.2769 257.127 51.5825 257.541 49.5991 cv
257.629 49.5801 li
258.182 49.4063 258.69 48.5923 258.842 47.5517 cv
259.03 46.3111 258.657 45.2089 258.003 45.0689 cv
257.976 45.063 li
257.929 45.0556 li
258.182 44.3217 258.276 43.6148 258.09 42.5473 cv
257.963 41.9399 257.908 41.5517 257.248 40.9795 cv
257.028 40.8276 256.768 40.7489 256.51 40.7489 cv
256.212 40.7489 255.916 40.8537 255.687 41.0718 cv
255.861 38.1763 253.031 37.3823 250.977 37.3823 cv
248.448 37.3823 246.1 38.877 244.685 41.1186 cv
244.466 41.4926 244.044 41.9136 244.083 42.3804 cv
244.083 42.8476 244.477 43.3549 244.652 43.7754 cv
244.766 44.0415 244.829 44.061 244.932 44.5352 cv
244.964 44.6753 244.885 44.9898 244.903 45.063 cv
244.239 45.1827 243.849 46.2974 244.037 47.5517 cv
244.112 48.0363 244.261 48.4703 244.453 48.8128 cv
244.224 49.5252 243.821 50.0458 243.391 50.1807 cv
243.305 50.1992 li
242.89 52.1832 241.938 53.8774 240.663 54.9917 cv
240.636 55.0112 li
240.636 56.3261 li
240.889 56.3261 li
240.957 56.4647 li
240.631 56.5918 li
240.135 55.5712 li
239.881 55.5712 li
239.881 54.2563 li
239.908 54.2368 li
241.183 53.1226 242.136 51.4283 242.55 49.4443 cv
242.637 49.4258 li
243.191 49.2519 243.699 48.4374 243.851 47.3974 cv
243.951 46.7379 243.892 46.1174 243.716 45.6599 cv
243.74 45.6636 li
243.764 45.6694 li
243.89 45.6962 244.002 45.7681 244.105 45.8603 cv
243.984 45.73 243.871 45.5737 243.767 45.3969 cv
243.702 45.6248 li
243.547 45.2407 243.307 44.9781 243.009 44.9145 cv
242.985 44.9087 li
242.938 44.9014 li
243.191 44.167 243.285 43.4604 243.097 42.3931 cv
243.022 42.0355 242.973 41.7539 242.811 41.4659 cv
242.88 41.4976 242.948 41.5355 243.012 41.5796 cv
243.144 41.6943 243.246 41.8003 243.335 41.9038 cv
243.519 41.2998 243.849 40.8754 244.282 40.7988 cv
244.258 40.7085 244.351 40.3326 244.312 40.165 cv
244.193 39.5874 244.112 39.5635 243.975 39.2412 cv
243.767 38.7344 243.284 38.1192 243.284 37.5532 cv
243.237 36.9883 243.748 36.4766 244.011 36.0254 cv
245.724 33.308 248.573 31.4995 251.629 31.4995 cv
254.118 31.4995 257.545 32.4624 257.338 35.9712 cv
257.615 35.7064 257.976 35.5781 258.339 35.5781 cv
258.651 35.5781 258.964 35.6728 259.227 35.8569 cv
260.03 36.5537 260.092 37.0151 260.248 37.7525 cv
260.469 39.0463 260.361 39.9004 260.048 40.7955 cv
260.112 40.7988 li
260.141 40.8081 li
260.31 40.8441 260.463 40.9336 260.597 41.0667 cv
260.581 41.0919 260.565 41.1171 260.549 41.1426 cv
260.327 41.5166 259.909 41.9365 259.947 42.4038 cv
259.947 42.8701 260.341 43.3775 260.515 43.7969 cv
260.629 44.064 260.693 44.0835 260.794 44.5576 cv
260.827 44.6967 260.748 45.0117 260.766 45.0845 cv
260.375 45.1545 260.081 45.5686 259.942 46.1527 cv
259.859 46.2037 259.775 46.243 259.689 46.2695 cv
259.589 46.291 li
259.562 46.4185 259.527 46.5405 259.496 46.6655 cv
259.645 47.1123 259.69 47.6919 259.597 48.3066 cv
259.445 49.3467 258.937 50.1612 258.384 50.335 cv
258.296 50.354 li
258.013 51.7105 257.473 52.9253 256.756 53.9185 cv
257.675 55.8052 li
257.184 56.1641 li
257.675 55.8096 li
257.931 55.9002 li
257.573 56.5494 257.061 57.1338 256.431 57.6255 cv
255.968 57.4599 li
255.422 57.853 li
256.227 56.8614 mo
256.108 56.9472 li
256.11 56.9521 li
256.227 56.8614 li
257.845 39.5444 mo
258.208 40.1777 258.647 40.751 259.083 41.1631 cv
259.225 41.0454 li
259.083 41.1611 li
258.648 40.7495 258.209 40.1772 257.845 39.5444 cv
259.863 40.7913 mo
259.773 40.7913 259.684 40.8017 259.593 40.8305 cv
259.445 40.9034 li
259.594 40.832 li
259.602 40.8736 li
259.689 40.8305 li
259.881 40.7915 li
259.875 40.7914 259.869 40.7913 259.863 40.7913 cv
247.408 36.4473 mo
246.894 36.6855 246.434 37.0191 246.084 37.5532 cv
245.767 38.0268 245.407 38.7793 245.19 39.52 cv
245.408 38.7793 245.769 38.0263 246.084 37.5532 cv
246.434 37.0196 246.894 36.6855 247.408 36.4473 cv
256.729 35.9644 mo
256.838 36.0341 256.952 36.1114 257.074 36.1963 cv
256.988 36.5078 256.987 36.8574 257.026 37.2192 cv
256.987 36.8574 256.99 36.5078 257.076 36.1963 cv
256.953 36.1114 256.838 36.0341 256.729 35.9644 cv
254.431 35.3452 mo
254.942 35.3452 255.318 35.3799 255.661 35.4687 cv
255.319 35.3789 254.944 35.3437 254.434 35.3437 cv
253.759 35.3437 253.109 35.3867 252.463 35.4477 cv
253.108 35.3877 253.757 35.3452 254.431 35.3452 cv
246.357 57.5581 mo
245.782 57.0938 245.309 56.5503 244.968 55.9502 cv
245.327 55.8101 li
245.364 55.9249 245.409 56.0361 245.455 56.1474 cv
246.341 55.8188 li
246.349 55.8116 li
246.339 55.8052 li
246.413 55.6546 li
247.023 56.1006 li
247.201 56.2282 li
246.605 57.454 li
246.614 57.4599 li
246.605 57.4673 li
246.357 57.5581 li
263.649 54.5484 mo
263.622 54.5181 263.595 54.4874 263.569 54.4565 cv
263.595 54.4794 263.622 54.5021 263.649 54.5245 cv
263.649 54.5484 li
240.695 40.9175 mo
240.744 40.0856 240.546 39.4274 240.19 38.9114 cv
240.751 39.3106 241.181 39.8611 241.363 40.6041 cv
241.119 40.6344 240.884 40.7373 240.695 40.9175 cv
.32549 .423529 .388235 rgb
f
231.743 57.3877 mo
231.583 57.3238 li
231.614 57.3125 li
231.621 57.3057 li
231.614 57.2998 li
232.454 55.5712 li
232.795 55.5712 li
232.795 54.514 li
232.821 54.4941 232.846 54.4738 232.871 54.4531 cv
233.088 54.6884 233.311 54.9126 233.55 55.1104 cv
233.55 56.3261 li
233.209 56.3261 li
232.736 57.2994 li
231.901 57.0039 li
231.857 57.1337 231.8 57.2622 231.743 57.3877 cv
231.743 57.3877 li
243.716 45.6599 mo
243.693 45.6563 li
243.702 45.6248 li
243.707 45.6364 243.711 45.648 243.716 45.6599 cv
241.449 41.6724 mo
241.473 41.2785 241.441 40.9235 241.363 40.6041 cv
241.414 40.5977 241.466 40.5945 241.518 40.5945 cv
241.777 40.5945 242.037 40.6733 242.257 40.8252 cv
242.528 41.0606 242.697 41.2648 242.811 41.4659 cv
242.641 41.3889 242.457 41.3494 242.273 41.3494 cv
241.975 41.3494 241.679 41.4542 241.449 41.6724 cv
231.399 40.4942 mo
231.362 40.4601 231.325 40.4264 231.289 40.3934 cv
231.079 40.1491 230.865 39.9249 230.644 39.7194 cv
232.05 38.1861 233.96 37.228 235.984 37.228 cv
237.448 37.228 239.306 37.6314 240.19 38.9114 cv
239.221 38.2209 237.864 37.9829 236.739 37.9829 cv
234.71 37.9829 232.806 38.9556 231.399 40.4942 cv
.509804 .6 .568627 rgb
f
228.717 63.2547 mo
227.079 63.2547 225.669 62.2586 225.669 60.582 cv
225.669 60.582 li
225.669 62.2582 227.079 63.254 228.717 63.254 cv
229.076 63.254 229.445 63.2063 229.813 63.1075 cv
229.813 63.1077 229.813 63.108 229.813 63.1082 cv
229.445 63.2069 229.076 63.2547 228.717 63.2547 cv
222.62 63.2538 mo
222.347 63.2538 222.067 63.2261 221.787 63.1693 cv
222.421 61.9238 223.22 61.0341 223.959 60.4119 cv
224.503 60.5229 225.077 60.582 225.669 60.582 cv
225.669 62.2582 224.258 63.2538 222.62 63.2538 cv
236.529 58.6423 mo
233.647 57.6215 li
233.647 57.622 233.647 57.6221 233.647 57.6225 cv
233.647 57.6225 li
233.647 57.6221 233.647 57.622 233.647 57.6215 cv
233.531 57.5807 li
233.087 57.4194 li
233.086 57.4204 233.085 57.4214 233.084 57.4224 cv
232.736 57.2994 li
233.209 56.3261 li
233.55 56.3261 li
233.55 55.1104 li
233.311 54.9126 233.088 54.6884 232.871 54.4531 cv
232.846 54.4738 232.821 54.4941 232.795 54.514 cv
232.795 54.3555 li
232.557 54.158 232.329 53.941 232.114 53.7061 cv
233.064 52.9294 233.727 51.6321 234.054 50.7597 cv
234.661 49.1425 234.625 47.6182 234.054 45.2515 cv
233.285 43.023 232.737 42.2735 231.63 40.8164 cv
231.518 40.6692 231.404 40.5282 231.289 40.3934 cv
231.325 40.4264 231.362 40.4601 231.399 40.4942 cv
232.806 38.9556 234.71 37.9829 236.739 37.9829 cv
237.864 37.9829 239.221 38.2209 240.19 38.9114 cv
240.546 39.4274 240.744 40.0856 240.695 40.9175 cv
240.884 40.7373 241.119 40.6344 241.363 40.6041 cv
241.441 40.9235 241.473 41.2785 241.449 41.6724 cv
241.679 41.4542 241.975 41.3494 242.273 41.3494 cv
242.457 41.3494 242.641 41.3889 242.811 41.4659 cv
242.973 41.7539 243.022 42.0355 243.097 42.3931 cv
243.285 43.4604 243.191 44.167 242.938 44.9014 cv
242.985 44.9087 li
243.009 44.9145 li
243.307 44.9781 243.547 45.2407 243.702 45.6248 cv
243.693 45.6563 li
243.716 45.6599 li
243.892 46.1174 243.951 46.7379 243.851 47.3974 cv
243.699 48.4374 243.191 49.2519 242.637 49.4258 cv
242.55 49.4443 li
242.136 51.4283 241.183 53.1226 239.908 54.2368 cv
239.881 54.2563 li
239.881 55.5712 li
240.135 55.5712 li
240.631 56.5918 li
239.748 56.936 li
238.986 57.2275 li
238.967 57.2426 li
238.938 57.2534 li
238.933 57.2534 li
238.933 57.2534 237.836 57.6004 236.529 58.6423 cv
232.118 47.4341 mo
232.118 46.8305 232.06 46.2446 231.955 45.6807 cv
232.062 46.2456 232.118 46.833 232.118 47.4341 cv
231.952 45.6643 mo
231.941 45.6085 li
231.939 45.6013 231.938 45.5942 231.937 45.587 cv
231.93 45.5526 li
231.937 45.5898 231.945 45.6271 231.952 45.6643 cv
.4 .462745 .439216 rgb
f
247.955 56.9858 mo
247.869 56.921 li
247.956 56.9829 li
247.955 56.9858 li
247.771 56.8511 mo
247.769 56.8511 li
247.248 56.4682 li
247.771 56.8511 li
246.517 53.1342 mo
245.792 52.1215 245.254 50.8768 244.977 49.4936 cv
244.964 49.4258 li
244.778 49.2892 244.603 49.0785 244.453 48.8128 cv
244.52 48.6071 244.572 48.3853 244.606 48.1523 cv
244.653 47.8389 244.664 47.5347 244.644 47.252 cv
244.678 47.3647 244.716 47.4741 244.752 47.5849 cv
244.746 47.8164 244.754 48.0572 244.792 48.3066 cv
244.925 49.1669 245.293 49.8681 245.719 50.1807 cv
245.732 50.2485 li
245.93 51.2347 246.262 52.1483 246.699 52.9585 cv
246.602 52.9585 li
246.517 53.1342 li
244.387 46.2353 mo
244.339 46.1397 244.285 46.0547 244.225 45.9805 cv
244.359 46.0869 li
244.37 46.1631 li
244.387 46.2353 li
.509804 .6 .568627 rgb
f
251.443 59.2397 mo
249.446 59.2397 247.644 58.5964 246.357 57.5581 cv
246.605 57.4673 li
246.614 57.4599 li
246.605 57.454 li
247.201 56.2282 li
247.206 56.2314 li
249.231 57.7119 li
250.359 56.2314 li
251.254 55.0503 li
247.023 52.9585 li
246.699 52.9585 li
246.262 52.1483 245.93 51.2347 245.732 50.2485 cv
245.719 50.1807 li
245.293 49.8681 244.925 49.1669 244.792 48.3066 cv
244.754 48.0572 244.746 47.8164 244.752 47.5849 cv
244.716 47.4741 244.678 47.3647 244.644 47.252 cv
244.664 47.5347 244.653 47.8389 244.606 48.1523 cv
244.572 48.3853 244.52 48.6071 244.453 48.8128 cv
244.261 48.4703 244.112 48.0363 244.037 47.5517 cv
243.849 46.2974 244.239 45.1827 244.903 45.063 cv
244.885 44.9898 244.964 44.6753 244.932 44.5352 cv
244.829 44.061 244.766 44.0415 244.652 43.7754 cv
244.477 43.3549 244.083 42.8476 244.083 42.3804 cv
244.044 41.9136 244.466 41.4926 244.685 41.1186 cv
246.1 38.877 248.448 37.3823 250.977 37.3823 cv
253.031 37.3823 255.861 38.1763 255.687 41.0718 cv
255.916 40.8537 256.212 40.7489 256.51 40.7489 cv
256.768 40.7489 257.028 40.8276 257.248 40.9795 cv
257.908 41.5517 257.963 41.9399 258.09 42.5473 cv
258.276 43.6148 258.182 44.3217 257.929 45.0556 cv
257.976 45.063 li
258.003 45.0689 li
258.657 45.2089 259.03 46.3111 258.842 47.5517 cv
258.69 48.5923 258.182 49.4063 257.629 49.5801 cv
257.541 49.5991 li
257.127 51.5825 256.174 53.2769 254.901 54.3911 cv
254.873 54.4107 li
254.873 55.7261 li
255.126 55.7261 li
255.968 57.454 li
255.422 57.853 li
255.968 57.4599 li
256.431 57.6255 li
255.153 58.6238 253.39 59.2397 251.443 59.2397 cv
247.869 56.921 mo
247.955 56.9858 li
247.956 56.9829 li
247.869 56.921 li
247.248 56.4682 mo
247.769 56.8511 li
247.771 56.8511 li
247.248 56.4682 li
244.225 45.9805 mo
244.285 46.0547 244.339 46.1397 244.387 46.2353 cv
244.37 46.1631 li
244.359 46.0869 li
244.225 45.9805 li
.4 .462745 .439216 rgb
f
263.745 57.1432 mo
262.795 56.7898 li
263.307 55.7378 li
263.649 55.7378 li
263.649 54.5484 li
263.887 54.8148 264.139 55.0591 264.404 55.2794 cv
264.404 56.4926 li
264.062 56.4926 li
263.745 57.1432 li
263.569 54.4565 mo
262.241 53.3193 261.253 51.5685 260.84 49.5103 cv
260.827 49.4438 li
260.401 49.1304 260.034 48.4302 259.902 47.5703 cv
259.825 47.0542 259.845 46.5618 259.942 46.1527 cv
260.441 45.8455 260.878 45.1128 261.088 44.1866 cv
261.157 44.313 261.222 44.436 261.27 44.5518 cv
261.384 44.8188 261.448 44.8384 261.549 45.3125 cv
261.582 45.4516 261.503 45.7666 261.521 45.8393 cv
260.856 45.9585 260.47 47.0722 260.657 48.3252 cv
260.789 49.1851 261.156 49.8853 261.582 50.1987 cv
261.595 50.2652 li
261.925 51.9111 262.623 53.3602 263.569 54.4565 cv
261.125 42.1656 mo
261.023 41.6953 260.841 41.3089 260.597 41.0667 cv
262.015 38.8697 264.337 37.4106 266.834 37.4106 cv
267.941 37.4106 269.271 37.641 270.236 38.3057 cv
270.18 38.4 270.127 38.4953 270.075 38.5917 cv
269.275 38.2841 268.376 38.1655 267.589 38.1655 cv
265.063 38.1655 262.717 39.6582 261.304 41.8974 cv
261.252 41.9839 261.189 42.0737 261.125 42.1656 cv
.509804 .6 .568627 rgb
f
274.323 58.774 mo
274.314 58.774 li
274.76 58.1876 li
274.761 58.1878 li
274.727 58.2329 li
274.323 58.774 li
265.625 58.1146 mo
264.662 57.4795 263.947 57.2534 263.947 57.2534 cv
263.947 57.2182 li
263.745 57.1432 li
264.062 56.4926 li
264.404 56.4926 li
264.404 55.2794 li
264.139 55.0591 263.887 54.8148 263.649 54.5484 cv
263.649 54.5245 li
263.622 54.5021 263.595 54.4794 263.569 54.4565 cv
262.623 53.3602 261.925 51.9111 261.595 50.2652 cv
261.582 50.1987 li
261.156 49.8853 260.789 49.1851 260.657 48.3252 cv
260.47 47.0722 260.856 45.9585 261.521 45.8393 cv
261.503 45.7666 261.582 45.4516 261.549 45.3125 cv
261.448 44.8384 261.384 44.8188 261.27 44.5518 cv
261.222 44.436 261.157 44.313 261.088 44.1866 cv
260.878 45.1128 260.441 45.8455 259.942 46.1527 cv
260.081 45.5686 260.375 45.1545 260.766 45.0845 cv
260.748 45.0117 260.827 44.6967 260.794 44.5576 cv
260.693 44.0835 260.629 44.064 260.515 43.7969 cv
260.341 43.3775 259.947 42.8701 259.947 42.4038 cv
259.909 41.9365 260.327 41.5166 260.549 41.1426 cv
260.565 41.1171 260.581 41.0919 260.597 41.0667 cv
260.841 41.3089 261.023 41.6953 261.125 42.1656 cv
261.189 42.0737 261.252 41.9839 261.304 41.8974 cv
262.717 39.6582 265.063 38.1655 267.589 38.1655 cv
268.376 38.1655 269.275 38.2841 270.075 38.5917 cv
269.624 39.4351 269.321 40.3604 269.151 41.3447 cv
269.079 41.8145 269.009 42.2412 269.006 42.8341 cv
268.364 43.0912 268.009 44.237 268.202 45.52 cv
268.344 46.4619 268.746 47.2302 269.22 47.5796 cv
269.224 47.6014 269.228 47.6232 269.232 47.645 cv
269.666 49.8097 270.681 51.6665 272.046 52.9136 cv
271.669 53.4823 271.235 53.9843 270.755 54.4038 cv
270.728 54.4223 li
270.728 55.7378 li
270.98 55.7378 li
271.151 56.0886 li
271.015 56.3672 li
271.022 56.3728 li
271.015 56.3785 li
270.211 56.6782 li
270.169 56.5774 270.132 56.4751 270.098 56.3716 cv
269.12 56.7529 li
269.119 56.7517 269.118 56.7506 269.116 56.7495 cv
265.976 57.9785 li
265.734 58.0728 li
265.625 58.1146 li
.4 .462745 .439216 rgb
f
305.948 74.2939 mo
197.335 74.2939 li
197.335 71.5678 li
305.948 71.5678 li
305.948 74.2939 li
.470588 .364706 .294118 rgb
f
305.948 115.855 mo
197.335 115.855 li
197.335 110.656 li
305.948 110.656 li
305.948 115.855 li
cp
f
308.255 71.5678 mo
195.027 71.5678 li
195.027 68.8404 li
308.255 68.8404 li
308.255 71.5678 li
.380392 .298039 .235294 rgb
f
302.48 110.656 mo
200.801 110.656 li
200.801 74.2939 li
302.48 74.2939 li
302.48 110.656 li
.364706 .282353 .227451 rgb
f
232.854 106.145 mo
206.188 106.145 li
206.188 79.4795 li
232.854 79.4795 li
232.854 106.145 li
.588235 .458824 .364706 rgb
f
206.188 106.145 mo
206.188 106.145 li
206.188 79.4795 li
219.521 92.8121 li
206.188 106.145 li
.498039 .388235 .313725 rgb
f
232.854 106.145 mo
232.854 106.145 li
219.521 92.8121 li
232.854 79.4795 li
232.854 106.145 li
f
232.854 106.145 mo
206.188 106.145 li
219.521 92.8121 li
232.854 106.145 li
.419608 .32549 .266667 rgb
f
265.176 106.145 mo
238.511 106.145 li
238.511 79.4795 li
265.176 79.4795 li
265.176 106.145 li
.588235 .458824 .364706 rgb
f
238.511 106.145 mo
238.511 106.145 li
238.511 79.4795 li
251.843 92.8121 li
238.511 106.145 li
.498039 .388235 .313725 rgb
f
265.176 106.145 mo
265.176 106.145 li
251.843 92.8121 li
265.176 79.4795 li
265.176 106.145 li
f
265.176 106.145 mo
238.511 106.145 li
251.843 92.8121 li
265.176 106.145 li
.419608 .32549 .266667 rgb
f
297.498 106.145 mo
270.832 106.145 li
270.832 79.4795 li
297.498 79.4795 li
297.498 106.145 li
.588235 .458824 .364706 rgb
f
270.832 106.145 mo
270.832 106.145 li
270.832 79.4795 li
284.165 92.8121 li
270.832 106.145 li
.498039 .388235 .313725 rgb
f
297.498 106.145 mo
297.498 106.145 li
284.165 92.8121 li
297.498 79.4795 li
297.498 106.145 li
f
297.498 106.145 mo
270.832 106.145 li
284.165 92.8121 li
297.498 106.145 li
.419608 .32549 .266667 rgb
f
280.074 56.3672 mo
272.311 56.3672 li
272.311 52.1118 li
280.074 52.1118 li
280.074 56.3672 li
.921569 .772549 .654902 rgb
f
269.905 47.7715 mo
269.709 47.8076 269.511 47.7613 269.323 47.6484 cv
268.805 47.3398 268.354 46.5297 268.202 45.52 cv
267.995 44.1426 268.419 42.9233 269.153 42.792 cv
269.353 42.7877 li
269.469 42.8052 li
269.628 42.8409 269.786 42.9267 269.928 43.0587 cv
270.363 43.435 270.722 44.1626 270.853 45.0435 cv
271.064 46.42 270.636 47.6377 269.905 47.7715 cv
f
284.423 45.52 mo
284.251 46.6616 283.697 47.5532 283.09 47.7412 cv
282.966 47.7822 282.843 47.7949 282.719 47.7715 cv
281.987 47.6377 281.561 46.4199 281.771 45.0435 cv
281.898 44.2075 282.222 43.5073 282.63 43.1211 cv
282.777 42.9775 282.93 42.8745 283.09 42.8218 cv
283.219 42.7788 283.344 42.7661 283.474 42.792 cv
283.499 42.8008 li
284.216 42.9521 284.626 44.1592 284.423 45.52 cv
cp
f
283.258 45.2803 mo
283.258 46.1343 283.17 46.9614 283.005 47.7426 cv
282.549 49.9218 281.502 51.7842 280.103 53.0126 cv
278.967 54.0136 277.598 54.5962 276.129 54.5962 cv
274.722 54.5962 273.413 54.0645 272.311 53.1446 cv
270.813 51.9019 269.694 49.9477 269.232 47.645 cv
269.085 46.8887 269.001 46.0996 269.001 45.2803 cv
269.001 44.419 269.094 43.5825 269.267 42.7877 cv
269.316 42.5566 li
269.379 42.8052 li
269.541 42.8384 269.697 42.9282 269.842 43.059 cv
269.622 42.1807 270.277 40.6177 270.783 39.8569 cv
271.489 38.7851 272.662 38.5791 273.836 38.3203 cv
275.382 38.0625 276.787 37.8598 278.335 37.8598 cv
279.412 37.8598 279.838 38.0112 280.725 38.6284 cv
280.348 40.0015 281.463 42.0996 282.541 43.1226 cv
282.689 42.9747 282.842 42.873 283.005 42.8222 cv
283.04 42.9863 283.077 43.1553 283.1 43.3291 cv
283.203 43.9585 283.258 44.6089 283.258 45.2803 cv
.984314 .796078 .678431 rgb
f
276.145 56.3672 mo
275.333 57.4345 li
274.314 58.7748 li
272.481 57.4345 li
272.316 57.3164 li
271.027 56.3765 li
271.015 56.3672 li
271.936 54.4746 li
272.316 54.4746 li
276.145 56.3672 li
1 1 1 rgb
f
281.268 56.3672 mo
280.073 57.2393 li
279.802 57.4346 li
277.97 58.7749 li
276.956 57.4346 li
276.145 56.3672 li
279.971 54.4746 li
280.347 54.4746 li
281.268 56.3672 li
cp
f
282.782 56.9072 mo
282.022 59.061 279.394 60.6455 276.269 60.6455 cv
273.115 60.6455 270.47 59.0347 269.732 56.8565 cv
271.015 56.3785 li
271.024 56.3716 li
272.307 57.3135 li
272.316 57.3135 li
272.476 57.4345 li
272.531 57.4727 li
272.629 57.5449 li
272.638 57.5449 li
272.996 57.8105 li
274.314 58.774 li
274.323 58.774 li
274.727 58.2329 li
275.332 57.4345 li
275.404 57.3457 li
275.404 57.3379 li
275.626 57.0503 li
275.85 56.7559 li
276.139 56.3716 li
276.435 56.7559 li
276.721 57.1391 li
276.953 57.4345 li
276.953 57.4424 li
277.115 57.6513 li
277.92 58.71 li
277.967 58.774 li
278 58.7476 li
279.625 57.5713 li
279.803 57.4424 li
280.074 57.2319 li
281.27 56.3716 li
282.782 56.9072 li
.898039 .898039 .898039 rgb
f
293.682 68.8463 mo
258.94 68.8463 li
258.94 60.2759 264.998 58.3594 264.998 58.3594 cv
265.002 58.3594 li
265.03 58.3515 li
265.046 58.3369 li
265.734 58.0728 li
270.098 56.3716 li
270.8 58.5513 273.315 60.1567 276.314 60.1567 cv
279.282 60.1567 281.778 58.5742 282.498 56.4204 cv
287.623 58.3276 li
287.623 58.3594 li
287.623 58.3594 293.682 60.2759 293.682 68.8463 cv
.776471 .580392 .85098 rgb
f
288.467 68.8463 mo
287.327 68.8463 li
288.467 65.9677 li
288.467 68.8463 li
.635294 .47451 .698039 rgb
f
283.188 44.9351 mo
282.452 41.9791 278.619 39.1768 276.127 40.7349 cv
273.644 39.1685 269.934 41.9791 269.196 44.9351 cv
268.89 42.9609 269.014 42.229 269.151 41.3447 cv
269.375 40.0444 269.833 38.8472 270.556 37.8056 cv
271.23 36.8144 271.854 36.3056 272.91 35.832 cv
273.945 35.3549 275.392 35.3735 276.197 35.956 cv
277.008 35.3735 278.447 35.3642 279.482 35.832 cv
280.533 36.3056 281.154 36.8144 281.836 37.8056 cv
282.56 38.8472 283.008 40.0444 283.233 41.3447 cv
283.37 42.229 283.502 42.9609 283.188 44.9351 cv
.580392 .466667 .376471 rgb
f
269.195 44.938 mo
269.195 44.9363 269.195 44.9348 269.196 44.9332 cv
269.196 44.9338 269.196 44.9345 269.196 44.9351 cv
269.276 44.6163 269.39 44.2991 269.533 43.989 cv
270.458 41.9924 272.597 40.2885 274.543 40.2885 cv
275.098 40.2885 275.637 40.4268 276.129 40.7364 cv
273.633 41.1196 270.484 42.5864 269.195 44.938 cv
.827451 .670588 .584314 rgb
f
269.196 44.9351 mo
269.196 44.9345 269.196 44.9338 269.196 44.9332 cv
269.276 44.615 269.39 44.2984 269.533 43.989 cv
269.39 44.2991 269.276 44.6163 269.196 44.9351 cv
.486274 .392157 .321569 rgb
f
225.669 60.582 mo
225.669 64.4219 218.263 64.6914 217.684 57.5933 cv
219.412 56.9536 li
219.444 57.0527 219.478 57.1494 219.525 57.2461 cv
220.358 59.1831 222.79 60.582 225.669 60.582 cv
cp
.94902 .94902 .94902 rgb
f
233.647 57.6215 mo
233.054 64.6914 225.669 64.417 225.669 60.582 cv
228.469 60.582 230.856 59.2515 231.743 57.3877 cv
231.8 57.2622 231.857 57.1337 231.901 57.0039 cv
233.647 57.6215 li
f
241.716 68.8974 mo
209.618 68.8974 li
209.618 66.5928 209.046 60.7564 214.268 58.8603 cv
214.278 58.8603 li
214.303 58.8511 li
214.32 58.8393 li
215.014 58.587 li
217.684 57.5942 li
218.263 64.6914 225.669 64.4219 225.669 60.582 cv
225.669 64.4185 233.055 64.6914 233.647 57.6215 cv
237.061 58.8305 li
237.061 58.8603 li
242.288 60.7564 241.716 66.5928 241.716 68.8974 cv
.239216 .4 .333333 rgb
f
231.743 57.3877 mo
230.856 59.2515 228.469 60.582 225.669 60.582 cv
222.79 60.582 220.358 59.1831 219.525 57.2461 cv
221.882 56.4131 li
221.882 53.1704 li
229.31 53.1704 li
229.31 56.4131 li
231.743 57.3877 li
.921569 .772549 .654902 rgb
f
232.118 47.4341 mo
232.118 50.1899 230.954 52.6147 229.193 54.0303 cv
228.162 54.8618 226.925 55.3442 225.594 55.3442 cv
224.297 55.3442 223.095 54.8877 222.08 54.0981 cv
220.382 52.7837 219.219 50.539 219.08 47.956 cv
219.071 47.7813 219.065 47.6093 219.065 47.4341 cv
219.065 47.253 219.071 47.0722 219.081 46.8965 cv
221.015 46.8867 223.701 45.8272 224.852 45.3227 cv
226.449 44.686 227.861 43.562 228.747 42.0752 cv
229.394 43.3159 230.573 44.8105 231.862 45.2377 cv
231.911 45.459 li
231.955 45.6802 li
231.955 45.6807 li
232.06 46.2446 232.118 46.8305 232.118 47.4341 cv
.984314 .796078 .678431 rgb
f
222.08 54.0981 mo
220.382 52.7837 219.219 50.538 219.08 47.956 cv
219.07 47.7813 219.065 47.6093 219.065 47.4341 cv
219.065 47.2525 219.07 47.0722 219.081 46.8965 cv
221.015 46.8877 223.701 45.8262 224.852 45.3232 cv
226.447 44.687 227.861 43.562 228.747 42.0747 cv
229.394 43.3169 230.572 44.8105 231.862 45.2397 cv
231.896 45.3862 231.927 45.5336 231.955 45.6807 cv
232.062 46.2456 232.118 46.833 232.118 47.4341 cv
232.118 50.1899 230.954 52.6147 229.193 54.0303 cv
231.738 55.3657 233.456 52.3535 234.054 50.7597 cv
234.661 49.1425 234.625 47.6182 234.054 45.2515 cv
233.285 43.023 232.737 42.2735 231.63 40.8164 cv
229.925 38.5772 227.822 37.7881 225.321 37.7881 cv
221.849 37.7881 220.975 39.3013 219.451 40.8359 cv
218.166 42.5473 217.047 44.9863 216.777 47.0064 cv
216.244 50.8169 218.439 56.3047 222.08 54.0981 cv
.301961 .25098 .223529 rgb
f
228.748 42.0766 mo
228.748 42.0765 li
228.748 42.0764 228.748 42.0764 228.748 42.0763 cv
228.748 42.0764 li
228.748 42.0766 li
.321569 .407843 .376471 rgb
f
219.08 47.956 mo
219.08 47.956 li
219.08 47.956 li
219.071 47.7813 219.065 47.6093 219.065 47.4341 cv
219.065 47.253 219.071 47.0722 219.081 46.8965 cv
221.016 46.8877 223.701 45.8262 224.853 45.3232 cv
226.448 44.6872 227.86 43.5641 228.748 42.0765 cv
228.748 42.0766 li
228.676 42.2095 li
227.858 43.7242 226.139 45.1699 224.206 46.2343 cv
222.512 47.1709 220.652 47.8125 219.08 47.956 cv
.894118 .733333 .631373 rgb
f
219.08 47.956 mo
219.08 47.956 li
219.08 47.956 li
219.08 47.956 li
219.08 47.956 li
219.08 47.956 li
219.065 47.4341 mo
219.065 47.4341 li
219.065 47.4341 li
219.065 47.4341 li
228.748 42.0764 mo
228.748 42.0763 li
228.748 42.0759 228.748 42.0756 228.748 42.0752 cv
228.748 42.0764 li
.301961 .258824 .235294 rgb
f
231.941 45.6085 mo
231.937 45.587 li
231.938 45.5942 231.939 45.6013 231.941 45.6085 cv
.305882 .396078 .356863 rgb
f
228.982 42.4974 mo
228.899 42.3564 228.821 42.2169 228.75 42.0803 cv
228.749 42.08 228.749 42.0797 228.749 42.0794 cv
228.821 42.2163 228.899 42.3562 228.982 42.4974 cv
.247059 .360784 .317647 rgb
f
231.955 45.6821 mo
230.031 44.9996 229.005 43.2008 228.75 42.0803 cv
228.821 42.2169 228.899 42.3564 228.982 42.4974 cv
229.658 43.6364 230.715 44.8583 231.862 45.2397 cv
231.862 45.2397 li
231.889 45.3549 231.914 45.4707 231.937 45.587 cv
231.941 45.6085 li
231.946 45.633 231.95 45.6575 231.955 45.6821 cv
.752941 .682353 .552941 rgb
f
231.862 45.2397 mo
230.715 44.8583 229.658 43.6364 228.982 42.4974 cv
228.899 42.3562 228.821 42.2163 228.749 42.0794 cv
228.749 42.078 228.749 42.0766 228.748 42.0752 cv
229.394 43.3169 230.573 44.8105 231.862 45.2397 cv
.231373 .215686 .180392 rgb
f
255.601 55.0503 mo
247.019 55.0503 li
247.019 50.3462 li
255.601 50.3462 li
255.601 55.0503 li
cp
.921569 .772549 .654902 rgb
f
244.356 45.5479 mo
244.142 45.5879 243.921 45.5386 243.714 45.4116 cv
243.142 45.0723 242.644 44.1758 242.475 43.0586 cv
242.247 41.5376 242.715 40.1885 243.527 40.0439 cv
243.748 40.0391 li
243.877 40.0576 li
244.053 40.0972 244.226 40.1924 244.385 40.3379 cv
244.864 40.7544 245.26 41.5596 245.409 42.5327 cv
245.639 44.0537 245.166 45.4009 244.356 45.5479 cv
cp
f
260.407 43.0586 mo
260.217 44.3218 259.603 45.3076 258.934 45.5146 cv
258.799 45.562 258.66 45.5742 258.524 45.5479 cv
257.715 45.4009 257.242 44.0537 257.475 42.5327 cv
257.617 41.6089 257.977 40.8359 258.425 40.4063 cv
258.586 40.248 258.757 40.1348 258.934 40.0757 cv
259.076 40.0303 259.216 40.0156 259.357 40.0439 cv
259.387 40.0532 li
260.178 40.2217 260.631 41.5557 260.407 43.0586 cv
cp
f
259.121 42.7935 mo
259.121 43.7378 259.022 44.6523 258.839 45.5161 cv
258.337 47.9253 257.178 49.9854 255.631 51.3428 cv
254.375 52.4497 252.865 53.0933 251.24 53.0933 cv
249.685 53.0933 248.237 52.5049 247.019 51.4873 cv
245.361 50.1143 244.125 47.9541 243.616 45.4082 cv
243.451 44.5723 243.359 43.6992 243.359 42.7935 cv
243.359 41.8418 243.461 40.9175 243.652 40.0391 cv
243.709 39.7827 li
243.731 39.873 243.755 39.9644 243.779 40.0576 cv
243.956 40.0957 244.128 40.1934 244.287 40.3379 cv
244.044 39.3682 244.769 37.6401 245.329 36.7983 cv
246.107 35.6143 247.407 35.3843 248.704 35.1006 cv
250.412 34.8149 251.967 34.5903 253.677 34.5903 cv
254.868 34.5903 255.34 34.7578 256.319 35.4414 cv
255.904 36.959 257.136 39.2788 258.328 40.4082 cv
258.49 40.2446 258.659 40.1328 258.839 40.0771 cv
258.877 40.2583 258.918 40.4468 258.943 40.6372 cv
259.06 41.334 259.121 42.0513 259.121 42.7935 cv
cp
.984314 .796078 .678431 rgb
f
259.289 40.0532 mo
259.261 40.0439 li
259.121 40.0156 258.98 40.0303 258.838 40.0757 cv
258.659 40.1348 258.49 40.248 258.328 40.4063 cv
257.137 39.2788 255.9 36.959 256.321 35.4414 cv
255.338 34.7617 254.869 34.5889 253.68 34.5889 cv
251.967 34.5889 250.411 34.8179 248.701 35.1021 cv
247.404 35.3867 246.106 35.6143 245.329 36.7983 cv
244.766 37.6406 244.044 39.3691 244.291 40.3379 cv
244.128 40.1924 243.703 40.085 243.527 40.0439 cv
243.503 39.9536 243.597 39.5776 243.557 39.4102 cv
243.438 38.8325 243.357 38.8091 243.22 38.4863 cv
243.012 37.9795 242.53 37.3643 242.53 36.7983 cv
242.482 36.2334 242.993 35.7217 243.256 35.2705 cv
244.97 32.5532 247.818 30.7446 250.874 30.7446 cv
253.363 30.7446 256.79 31.7075 256.583 35.2163 cv
257.098 34.7241 257.904 34.7036 258.472 35.1021 cv
259.275 35.7988 259.337 36.2603 259.493 36.9976 cv
259.716 38.2979 259.606 39.1538 259.289 40.0532 cv
cp
.580392 .466667 .376471 rgb
f
251.254 55.0503 mo
250.359 56.2314 li
249.231 57.7119 li
247.206 56.2314 li
247.023 56.1006 li
245.597 55.0591 li
245.585 55.0503 li
246.602 52.9585 li
247.023 52.9585 li
251.254 55.0503 li
1 1 1 rgb
f
256.92 55.0503 mo
255.599 56.0146 li
255.299 56.2314 li
253.275 57.7119 li
252.152 56.2314 li
251.254 55.0503 li
255.487 52.9585 li
255.901 52.9585 li
256.92 55.0503 li
cp
f
247.057 56.1235 mo
247.023 56.1006 li
247.019 56.0962 li
247.023 56.0962 li
247.057 56.1235 li
.811765 .811765 .811765 rgb
f
258.594 55.6475 mo
257.752 58.0278 254.847 59.7798 251.394 59.7798 cv
247.905 59.7798 244.984 58.0005 244.165 55.5908 cv
245.586 55.064 li
245.596 55.0547 li
247.014 56.0962 li
247.023 56.0962 li
247.2 56.2314 li
247.262 56.2734 li
247.369 56.3525 li
247.378 56.3525 li
247.776 56.647 li
249.231 57.7109 li
249.24 57.7109 li
249.689 57.1133 li
250.357 56.2314 li
250.435 56.1333 li
250.435 56.1235 li
250.683 55.8066 li
250.93 55.48 li
251.248 55.0547 li
251.573 55.48 li
251.892 55.9043 li
252.149 56.2314 li
252.149 56.2397 li
252.328 56.4702 li
253.221 57.6416 li
253.269 57.7109 li
253.307 57.6831 li
255.104 56.3813 li
255.301 56.2397 li
255.599 56.0073 li
256.92 55.0547 li
258.594 55.6475 li
cp
.898039 .898039 .898039 rgb
f
255.104 56.4321 mo
255.104 57.6416 254.629 58.3823 254.051 58.0806 cv
253.47 57.7769 252.845 57.4497 252.659 57.3516 cv
252.574 57.3047 252.453 57.2446 252.318 57.1738 cv
252.289 57.2954 252.192 57.3843 252.071 57.3843 cv
250.689 57.3843 li
250.571 57.3843 250.474 57.2998 250.446 57.1826 cv
250.319 57.2534 250.203 57.3149 250.122 57.3569 cv
249.952 57.4497 249.348 57.7769 248.794 58.0806 cv
248.232 58.3823 247.776 57.6416 247.776 56.4321 cv
247.776 55.2192 248.232 54.4756 248.794 54.7788 cv
249.348 55.083 249.952 55.4106 250.122 55.5024 cv
250.203 55.5454 250.319 55.606 250.446 55.6763 cv
250.474 55.563 250.571 55.4741 250.689 55.4741 cv
252.071 55.4741 li
252.192 55.4741 252.289 55.5688 252.318 55.6904 cv
252.453 55.6191 252.574 55.5586 252.659 55.5117 cv
252.845 55.4106 253.47 55.083 254.051 54.7788 cv
254.629 54.4756 255.104 55.2192 255.104 56.4321 cv
cp
.180392 .180392 .180392 rgb
f
270.644 68.8463 mo
232.236 68.8463 li
232.236 59.3715 238.933 57.2534 238.933 57.2534 cv
238.938 57.2534 li
238.967 57.2426 li
238.986 57.2275 li
239.748 56.936 li
244.573 55.0552 li
245.349 57.4658 248.127 59.2397 251.443 59.2397 cv
254.724 59.2397 257.483 57.4902 258.279 55.1099 cv
263.947 57.2182 li
263.947 57.2534 li
263.947 57.2534 270.644 59.3715 270.644 68.8463 cv
1 .705882 .388235 rgb
f
239.31 68.8463 mo
238.047 68.8463 li
238.047 65.6646 li
239.31 68.8463 li
.819608 .580392 .317647 rgb
f
264.878 68.8463 mo
263.618 68.8463 li
264.878 65.6646 li
264.878 68.8463 li
f
229.813 63.1082 mo
229.813 63.108 229.813 63.1077 229.813 63.1075 cv
231.609 62.6249 233.369 60.9249 233.647 57.6225 cv
233.647 57.6225 li
233.37 60.9257 231.609 62.626 229.813 63.1082 cv
233.531 57.5807 mo
233.084 57.4224 li
233.085 57.4214 233.086 57.4204 233.087 57.4194 cv
233.531 57.5807 li
.337255 .392157 .372549 rgb
f
229.813 63.1075 mo
229.814 63.105 229.814 63.1026 229.815 63.1001 cv
230.581 60.6058 231.809 58.764 233.084 57.4224 cv
233.531 57.5807 li
233.644 57.6215 li
233.647 57.6225 li
233.369 60.9249 231.609 62.6249 229.813 63.1075 cv
.8 .8 .8 rgb
f
232.199 68.8941 mo
228.999 68.8941 li
228.999 68.8463 li
228.999 66.6271 229.304 64.731 229.813 63.1082 cv
231.609 62.626 233.37 60.9257 233.647 57.6225 cv
236.52 58.6402 li
234.627 60.1518 232.308 63.1255 232.236 68.5943 cv
232.221 68.6938 232.21 68.7944 232.199 68.8941 cv
.2 .337255 .282353 rgb
f
265.976 57.9785 mo
269.116 56.7495 li
269.118 56.7506 269.119 56.7517 269.12 56.7529 cv
265.976 57.9785 li
.337255 .392157 .372549 rgb
f
273.877 68.8463 mo
270.644 68.8463 li
270.644 68.8353 270.644 68.8241 270.644 68.8131 cv
270.644 68.8092 270.644 68.8063 270.644 68.8024 cv
270.644 68.7943 270.644 68.7864 270.644 68.7783 cv
270.644 68.7748 270.644 68.7713 270.644 68.7678 cv
270.644 68.7569 270.644 68.7459 270.644 68.735 cv
270.644 68.7335 270.644 68.7326 270.644 68.731 cv
270.644 68.7213 270.644 68.7116 270.644 68.7019 cv
270.644 68.698 270.644 68.6946 270.644 68.6907 cv
270.644 68.6827 270.644 68.6754 270.644 68.6674 cv
270.643 68.664 270.643 68.66 270.643 68.6566 cv
270.643 68.6457 270.643 68.6355 270.643 68.6246 cv
270.643 68.6219 270.643 68.6193 270.643 68.6166 cv
270.643 68.6086 270.643 68.6002 270.643 68.5922 cv
270.643 68.5876 270.643 68.5832 270.643 68.5786 cv
270.642 68.5723 270.642 68.5661 270.642 68.5599 cv
270.642 68.5549 270.642 68.55 270.642 68.545 cv
270.642 68.5353 270.642 68.5253 270.642 68.5157 cv
270.641 68.5107 270.641 68.5058 270.641 68.5008 cv
270.641 68.4952 270.641 68.4901 270.641 68.4845 cv
270.641 68.4787 270.641 68.4727 270.641 68.467 cv
270.641 68.4619 270.641 68.4572 270.64 68.4521 cv
270.64 68.4464 270.64 68.4406 270.64 68.4349 cv
270.64 68.4292 270.64 68.4241 270.64 68.4185 cv
270.639 68.4082 270.639 68.3982 270.639 68.3879 cv
270.639 68.3846 270.639 68.3801 270.639 68.3767 cv
270.639 68.3699 270.638 68.3627 270.638 68.3559 cv
270.638 68.3537 270.638 68.3507 270.638 68.3484 cv
270.54 64.4828 269.306 61.8972 267.925 60.2022 cv
267.922 60.199 267.92 60.1957 267.917 60.1925 cv
267.917 60.1916 267.916 60.1905 267.915 60.1897 cv
267.323 59.4654 266.704 58.9042 266.137 58.4759 cv
265.961 58.343 265.79 58.223 265.626 58.1147 cv
265.731 58.0743 li
265.976 57.9785 li
269.12 56.7529 li
271.447 58.8946 273.877 62.6201 273.877 68.8463 cv
.654902 .486274 .717647 rgb
f
270.644 68.8463 mo
270.644 68.8463 li
270.644 68.8353 270.644 68.824 270.644 68.8131 cv
270.644 68.8241 270.644 68.8353 270.644 68.8463 cv
270.644 68.8463 li
270.644 68.8024 mo
270.644 68.7946 270.644 68.7861 270.644 68.7783 cv
270.644 68.7864 270.644 68.7943 270.644 68.8024 cv
270.644 68.7678 mo
270.644 68.7569 270.644 68.7458 270.644 68.735 cv
270.644 68.7459 270.644 68.7569 270.644 68.7678 cv
270.644 68.731 mo
270.644 68.7214 270.644 68.7115 270.644 68.7019 cv
270.644 68.7116 270.644 68.7213 270.644 68.731 cv
270.644 68.6907 mo
270.644 68.683 270.644 68.6751 270.644 68.6674 cv
270.644 68.6754 270.644 68.6827 270.644 68.6907 cv
270.643 68.6566 mo
270.643 68.6458 270.643 68.6354 270.643 68.6246 cv
270.643 68.6355 270.643 68.6457 270.643 68.6566 cv
270.643 68.6166 mo
270.643 68.6085 270.643 68.6003 270.643 68.5922 cv
270.643 68.6002 270.643 68.6086 270.643 68.6166 cv
270.643 68.5786 mo
270.642 68.5725 270.642 68.566 270.642 68.5599 cv
270.642 68.5661 270.642 68.5723 270.643 68.5786 cv
270.642 68.545 mo
270.642 68.5354 270.642 68.5252 270.642 68.5157 cv
270.642 68.5253 270.642 68.5353 270.642 68.545 cv
270.641 68.5008 mo
270.641 68.4951 270.641 68.4902 270.641 68.4845 cv
270.641 68.4901 270.641 68.4952 270.641 68.5008 cv
270.641 68.467 mo
270.641 68.462 270.641 68.457 270.64 68.4521 cv
270.641 68.4572 270.641 68.4619 270.641 68.467 cv
270.64 68.4349 mo
270.64 68.4295 270.64 68.4238 270.64 68.4185 cv
270.64 68.4241 270.64 68.4292 270.64 68.4349 cv
270.639 68.3879 mo
270.639 68.3841 270.639 68.3805 270.639 68.3767 cv
270.639 68.3801 270.639 68.3846 270.639 68.3879 cv
270.638 68.3559 mo
270.638 68.3532 270.638 68.3511 270.638 68.3484 cv
270.638 68.3507 270.638 68.3537 270.638 68.3559 cv
267.925 60.2022 mo
267.922 60.1989 267.92 60.1958 267.917 60.1925 cv
267.92 60.1957 267.922 60.199 267.925 60.2022 cv
267.915 60.1897 mo
267.323 59.4653 266.704 58.9044 266.137 58.4759 cv
266.704 58.9042 267.323 59.4654 267.915 60.1897 cv
.843137 .596078 .32549 rgb
f
302.48 77.8804 mo
200.801 77.8804 li
200.801 74.2939 li
302.48 74.2939 li
302.48 77.8804 li
.286274 .219608 .184314 rgb
f
160.211 445.125 mo
142.379 445.125 li
142.834 444.908 143.282 444.687 143.731 444.458 cv
159.544 444.458 li
159.544 435.904 li
160.211 435.904 li
160.211 445.125 li
94.8615 445.125 mo
79.4461 445.125 li
79.4461 444.458 li
93.5096 444.458 li
93.958 444.687 94.4062 444.908 94.8615 445.125 cv
.447059 .509804 .486274 rgb
f
125.301 445.125 mo
111.94 445.125 li
110.635 444.952 109.349 444.73 108.077 444.458 cv
129.164 444.458 li
127.892 444.73 126.605 444.952 125.301 445.125 cv
.32549 .423529 .388235 rgb
f
142.379 445.125 mo
125.301 445.125 li
126.605 444.952 127.892 444.73 129.164 444.458 cv
143.731 444.458 li
143.282 444.687 142.834 444.908 142.379 445.125 cv
111.94 445.125 mo
94.8615 445.125 li
94.4062 444.908 93.958 444.687 93.5096 444.458 cv
108.077 444.458 li
109.349 444.73 110.635 444.952 111.94 445.125 cv
.65098 .65098 .65098 rgb
f
142.085 435.237 mo
141.418 435.237 li
141.418 423.503 li
142.085 423.503 li
142.085 425.889 li
142.085 428.91 li
142.085 435.237 li
.32549 .423529 .388235 rgb
f
161.75 360.309 mo
160.534 358.802 159.239 357.359 157.874 355.988 cv
158.365 354.854 159.494 354.061 160.806 354.061 cv
162.569 354.061 164.001 355.491 164.001 357.256 cv
164.001 358.691 163.053 359.906 161.75 360.309 cv
125.796 340.113 mo
124.941 340.002 124.083 339.911 123.217 339.84 cv
123.217 339.796 li
122.657 339.796 li
121.323 339.7 119.978 339.651 118.62 339.651 cv
117.059 339.651 115.512 339.716 113.983 339.843 cv
114.298 339.244 114.878 338.807 115.566 338.683 cv
114.949 337.822 114.581 336.77 114.581 335.629 cv
114.581 332.73 116.93 330.381 119.829 330.381 cv
122.728 330.381 125.079 332.73 125.079 335.629 cv
125.079 336.77 124.711 337.822 124.093 338.683 cv
124.882 338.824 125.527 339.377 125.796 340.113 cv
.447059 .509804 .486274 rgb
f
123.884 422.836 mo
115.776 422.836 li
123.217 422.836 li
123.217 344.774 li
123.44 344.794 123.662 344.816 123.884 344.839 cv
123.884 348.471 li
124.851 349.179 125.627 350.13 126.118 351.239 cv
129.972 352.362 133.83 354.245 137.058 356.226 cv
140.444 358.318 143.764 360.34 147.796 360.34 cv
147.938 360.34 148.082 360.337 148.227 360.332 cv
150.413 360.253 152.337 359.882 154.185 359.247 cv
154.601 359.661 155.01 360.081 155.412 360.509 cv
154.36 362.516 li
152.246 363.423 150.122 364.054 147.991 364.265 cv
147.578 364.305 147.136 364.326 146.669 364.326 cv
143.872 364.326 140.221 363.575 137.058 361.832 cv
133.755 360.01 129.907 358.076 126.066 356.898 cv
125.574 357.961 124.82 358.875 123.884 359.561 cv
123.884 422.836 li
.32549 .423529 .388235 rgb
f
173.096 387.786 mo
172.707 387.786 li
172.707 387.699 172.687 387.612 172.644 387.53 cv
157.431 358.514 li
157.424 358.501 157.416 358.488 157.408 358.476 cv
157.312 358.323 157.141 358.222 156.945 358.222 cv
156.764 358.222 156.603 358.309 156.503 358.444 cv
156.486 358.466 156.471 358.489 156.458 358.514 cv
155.412 360.509 li
155.01 360.081 154.601 359.661 154.185 359.247 cv
155.358 358.844 156.5 358.335 157.659 357.727 cv
157.637 357.572 157.612 357.418 157.612 357.256 cv
157.612 356.805 157.705 356.376 157.874 355.988 cv
159.239 357.359 160.534 358.802 161.75 360.309 cv
161.452 360.401 161.135 360.451 160.806 360.451 cv
160.221 360.451 159.679 360.282 159.206 360.006 cv
159.034 360.108 158.862 360.209 158.689 360.309 cv
173.096 387.786 li
123.884 344.839 mo
123.662 344.816 123.44 344.794 123.217 344.774 cv
123.217 339.84 li
124.083 339.911 124.941 340.002 125.796 340.113 cv
125.883 340.352 125.93 340.609 125.93 340.878 cv
125.93 342.047 125.029 342.996 123.884 343.092 cv
123.884 344.839 li
115.109 342.931 mo
114.299 342.598 113.728 341.807 113.728 340.878 cv
113.728 340.504 113.82 340.152 113.983 339.843 cv
115.512 339.716 117.059 339.651 118.62 339.651 cv
119.978 339.651 121.323 339.7 122.657 339.796 cv
115.109 339.796 li
115.109 342.931 li
.65098 .65098 .65098 rgb
f
174.991 391.156 mo
173.899 391.156 li
173.883 390.934 173.866 390.71 173.848 390.489 cv
174.324 390.489 li
174.324 390.486 li
174.326 390.486 li
174.326 388.453 li
174.991 388.453 li
174.993 388.453 li
174.993 391.154 li
174.991 391.154 li
174.991 391.156 li
.447059 .509804 .486274 rgb
f
157.612 401.598 mo
157.612 401.595 li
152.942 401.595 148.731 399.632 145.76 396.485 cv
148.679 399.24 152.614 400.928 156.945 400.928 cv
156.945 400.928 li
156.945 400.931 li
161.791 400.931 166.137 398.825 169.118 395.478 cv
169.114 395.948 169.104 396.415 169.087 396.882 cv
166.146 399.798 162.092 401.598 157.612 401.598 cv
.32549 .423529 .388235 rgb
f
169.087 396.882 mo
169.104 396.415 169.114 395.948 169.118 395.478 cv
170.412 394.026 171.448 392.339 172.156 390.489 cv
173.848 390.489 li
173.866 390.71 173.883 390.934 173.899 391.156 cv
172.823 391.156 li
171.992 393.328 170.709 395.274 169.087 396.882 cv
.65098 .65098 .65098 rgb
f
82.3666 401.598 mo
82.3666 401.595 li
77.698 401.595 73.4874 399.633 70.517 396.487 cv
73.4349 399.241 77.3701 400.928 81.6996 400.928 cv
81.6996 400.928 li
81.6996 400.931 li
88.6487 400.931 94.5721 396.601 96.9104 390.489 cv
99.078 390.489 li
99.078 390.486 li
99.0809 390.486 li
99.0809 388.453 li
99.7449 388.453 li
99.7484 388.453 li
99.7484 391.154 li
99.7449 391.154 li
99.7449 391.156 li
97.5775 391.156 li
95.239 397.268 89.3158 401.598 82.3666 401.598 cv
142.008 391.154 mo
140.232 391.154 li
140.232 390.486 li
141.734 390.486 li
141.821 390.711 141.912 390.934 142.008 391.154 cv
.32549 .423529 .388235 rgb
f
66.7624 391.154 mo
64.9886 391.154 li
64.9886 390.486 li
66.4885 390.486 li
66.575 390.711 66.6664 390.934 66.7624 391.154 cv
.65098 .65098 .65098 rgb
f
158.16 387.786 mo
157.493 387.786 li
157.493 362.865 li
157.719 363.137 157.94 363.409 158.16 363.686 cv
158.16 387.786 li
.32549 .423529 .388235 rgb
f
158.16 363.686 mo
157.94 363.409 157.719 363.137 157.493 362.865 cv
157.493 360.999 li
158.16 362.271 li
158.16 363.686 li
.65098 .65098 .65098 rgb
f
143.369 387.786 mo
142.352 387.786 li
156.203 361.37 li
156.267 361.442 156.332 361.514 156.396 361.586 cv
156.396 362.941 li
143.369 387.786 li
.32549 .423529 .388235 rgb
f
156.396 361.586 mo
156.332 361.514 156.267 361.442 156.203 361.37 cv
156.396 361.002 li
156.396 361.586 li
.65098 .65098 .65098 rgb
f
76.5332 359.055 mo
76.184 358.542 75.9798 357.923 75.9798 357.256 cv
75.9798 355.491 77.408 354.061 79.1726 354.061 cv
79.792 354.061 80.3702 354.238 80.8598 354.543 cv
79.3355 355.964 77.8899 357.471 76.5332 359.055 cv
.447059 .509804 .486274 rgb
f
97.8489 387.786 mo
97.4619 387.786 li
97.4618 387.699 97.4411 387.612 97.3977 387.53 cv
82.738 359.565 li
83.0722 359.228 83.4095 358.896 83.753 358.568 cv
86.1413 359.616 88.561 360.228 91.4334 360.332 cv
91.5781 360.337 91.7218 360.34 91.8647 360.34 cv
95.8961 360.34 99.216 358.317 102.598 356.226 cv
105.83 354.245 109.689 352.362 113.544 351.238 cv
113.915 350.398 114.451 349.649 115.109 349.027 cv
115.109 359.004 li
114.479 358.408 113.963 357.695 113.595 356.898 cv
109.753 358.075 105.903 360.01 102.598 361.832 cv
99.4382 363.575 95.7869 364.326 92.9915 364.326 cv
92.525 364.326 92.0822 364.305 91.6697 364.265 cv
89.2323 364.024 86.8031 363.233 84.3885 362.109 cv
97.8489 387.786 li
.32549 .423529 .388235 rgb
f
79.1726 360.451 mo
78.0751 360.451 77.1078 359.898 76.5332 359.055 cv
77.8899 357.471 79.3355 355.964 80.8598 354.543 cv
81.7646 355.106 82.3666 356.11 82.3666 357.256 cv
82.3666 357.469 82.3436 357.677 82.304 357.879 cv
82.7881 358.126 83.2698 358.356 83.753 358.568 cv
83.4095 358.896 83.0722 359.228 82.738 359.565 cv
82.1868 358.514 li
82.1813 358.503 82.1754 358.493 82.1691 358.483 cv
82.0721 358.326 81.8979 358.222 81.6996 358.222 cv
81.5111 358.222 81.3447 358.316 81.2458 358.461 cv
81.2338 358.477 81.2227 358.495 81.2128 358.514 cv
80.3141 360.228 li
79.9599 360.369 79.5773 360.451 79.1726 360.451 cv
.65098 .65098 .65098 rgb
f
82.9173 387.786 mo
82.2503 387.786 li
82.2503 361.005 li
82.9173 362.277 li
82.9173 387.786 li
68.8702 386.367 mo
69.0595 385.281 69.2833 384.208 69.5409 383.148 cv
80.8433 361.587 li
80.9449 361.473 81.0475 361.358 81.1502 361.245 cv
81.1502 362.942 li
68.8702 386.367 li
.32549 .423529 .388235 rgb
f
68.1264 387.786 mo
67.1096 387.786 li
69.5409 383.148 li
69.2833 384.208 69.0595 385.281 68.8702 386.367 cv
68.1264 387.786 li
80.8433 361.587 mo
81.1502 361.002 li
81.1502 361.245 li
81.0475 361.358 80.9449 361.473 80.8433 361.587 cv
.65098 .65098 .65098 rgb
f
96.9104 390.486 mo
94.5721 396.597 88.6487 400.928 81.6996 400.928 cv
74.763 400.928 68.8382 396.597 66.4885 390.486 cv
96.9104 390.486 li
.364706 .278431 .219608 rgb
f
96.9104 388.334 mo
96.7132 388.334 96.5248 388.229 96.4252 388.041 cv
81.6996 359.954 li
66.976 388.041 li
66.8343 388.309 66.4998 388.412 66.2337 388.272 cv
65.9647 388.132 65.8602 387.799 66.0018 387.53 cv
81.2128 358.514 li
81.4042 358.152 81.997 358.152 82.1868 358.514 cv
97.3977 387.53 li
97.5408 387.799 97.4364 388.132 97.1673 388.272 cv
96.9104 388.334 li
.898039 .898039 .898039 rgb
f
81.6996 389.685 mo
81.3963 389.685 81.1502 389.438 81.1502 389.135 cv
81.1502 358.771 li
81.1502 358.466 81.3963 358.222 81.6996 358.222 cv
82.0032 358.222 82.2503 358.466 82.2503 358.771 cv
82.2503 389.135 li
82.2503 389.438 82.0032 389.685 81.6996 389.685 cv
f
99.0809 387.786 mo
64.3211 387.786 li
64.3211 390.486 li
99.0809 390.486 li
99.0809 387.786 li
1 .705882 .388235 rgb
f
81.6996 400.931 mo
81.6996 400.928 li
88.6487 400.928 94.5721 396.597 96.9104 390.486 cv
99.078 390.486 li
99.078 390.489 li
96.9104 390.489 li
94.5721 396.601 88.6487 400.931 81.6996 400.931 cv
.294118 .360784 .298039 rgb
f
81.6996 400.928 mo
81.6996 390.486 li
96.9104 390.486 li
94.5721 396.597 88.6487 400.928 81.6996 400.928 cv
.329412 .239216 .168627 rgb
f
99.078 390.486 mo
96.9104 390.486 li
81.6996 390.486 li
81.6996 387.786 li
99.078 387.786 li
99.078 390.486 li
.905882 .603922 .298039 rgb
f
172.156 390.486 mo
169.817 396.597 163.894 400.928 156.945 400.928 cv
150.009 400.928 144.084 396.597 141.734 390.486 cv
172.156 390.486 li
.364706 .278431 .219608 rgb
f
172.156 388.334 mo
171.958 388.334 171.767 388.229 171.671 388.041 cv
156.945 359.954 li
142.218 388.041 li
142.079 388.309 141.745 388.412 141.479 388.272 cv
141.21 388.132 141.106 387.799 141.247 387.53 cv
156.458 358.514 li
156.65 358.152 157.242 358.152 157.431 358.514 cv
172.644 387.53 li
172.784 387.799 172.682 388.132 172.413 388.272 cv
172.156 388.334 li
.898039 .898039 .898039 rgb
f
156.945 389.685 mo
156.642 389.685 156.396 389.438 156.396 389.135 cv
156.396 358.771 li
156.396 358.466 156.642 358.222 156.945 358.222 cv
157.25 358.222 157.493 358.466 157.493 358.771 cv
157.493 389.135 li
157.493 389.438 157.25 389.685 156.945 389.685 cv
f
174.326 387.786 mo
139.565 387.786 li
139.565 390.486 li
174.326 390.486 li
174.326 387.786 li
1 .705882 .388235 rgb
f
174.324 390.489 mo
173.848 390.489 li
173.848 390.487 173.848 390.488 173.848 390.486 cv
174.324 390.486 li
174.324 390.489 li
.403922 .435294 .372549 rgb
f
156.945 400.931 mo
156.945 400.928 li
161.791 400.928 166.137 398.822 169.118 395.475 cv
169.118 395.477 169.118 395.477 169.118 395.478 cv
166.137 398.825 161.791 400.931 156.945 400.931 cv
.294118 .360784 .298039 rgb
f
169.118 395.478 mo
169.118 395.477 169.118 395.477 169.118 395.475 cv
170.412 394.023 171.448 392.336 172.156 390.486 cv
173.848 390.486 li
173.848 390.488 173.848 390.487 173.848 390.489 cv
172.156 390.489 li
171.448 392.339 170.412 394.026 169.118 395.478 cv
.588235 .556863 .501961 rgb
f
156.945 400.928 mo
156.945 390.486 li
172.156 390.486 li
171.448 392.336 170.412 394.023 169.118 395.475 cv
166.137 398.822 161.791 400.928 156.945 400.928 cv
.329412 .239216 .168627 rgb
f
174.324 390.486 mo
173.848 390.486 li
172.156 390.486 li
156.945 390.486 li
156.945 387.786 li
174.324 387.786 li
174.324 390.486 li
.905882 .603922 .298039 rgb
f
119.162 349.518 mo
119.162 355.122 li
113.483 355.236 107.052 358.341 101.931 361.165 cv
98.244 363.199 93.8875 363.882 91.0028 363.598 cv
86.7518 363.177 82.5257 361.091 78.3607 358.465 cv
78.3607 355.333 li
82.5257 357.954 86.0296 359.495 90.7659 359.665 cv
94.9935 359.816 98.429 357.725 101.931 355.559 cv
106.951 352.482 113.483 349.63 119.162 349.518 cv
cp
.458824 .364706 .298039 rgb
f
81.6995 356.589 mo
81.6995 358.353 80.2699 359.784 78.5052 359.784 cv
76.741 359.784 75.3128 358.353 75.3128 356.589 cv
75.3128 354.824 76.741 353.395 78.5052 353.395 cv
80.2699 353.395 81.6995 354.824 81.6995 356.589 cv
cp
1 .705882 .388235 rgb
f
119.162 349.518 mo
119.162 355.122 li
124.843 355.236 131.272 358.341 136.391 361.165 cv
140.082 363.199 144.437 363.882 147.325 363.598 cv
151.574 363.177 155.8 361.091 159.965 358.465 cv
159.965 355.333 li
155.8 357.954 152.296 359.495 147.56 359.665 cv
143.332 359.816 139.897 357.725 136.391 355.559 cv
131.376 352.482 124.843 349.63 119.162 349.518 cv
cp
.458824 .364706 .298039 rgb
f
156.945 356.589 mo
156.945 358.353 158.376 359.784 160.139 359.784 cv
161.902 359.784 163.334 358.353 163.334 356.589 cv
163.334 354.824 161.902 353.395 160.139 353.395 cv
158.376 353.395 156.945 354.824 156.945 356.589 cv
cp
1 .705882 .388235 rgb
f
123.217 422.836 mo
115.109 422.836 li
115.109 339.796 li
123.217 339.796 li
123.217 422.836 li
.364706 .278431 .219608 rgb
f
126.039 353.349 mo
126.039 357.146 122.96 360.225 119.162 360.225 cv
115.366 360.225 112.288 357.146 112.288 353.349 cv
112.288 349.551 115.366 346.472 119.162 346.472 cv
122.96 346.472 126.039 349.551 126.039 353.349 cv
cp
1 1 1 rgb
f
124.412 334.962 mo
124.412 337.861 122.061 340.211 119.162 340.211 cv
116.264 340.211 113.914 337.861 113.914 334.962 cv
113.914 332.063 116.264 329.714 119.162 329.714 cv
122.061 329.714 124.412 332.063 124.412 334.962 cv
cp
f
122.383 353.349 mo
122.383 355.127 120.94 356.567 119.162 356.567 cv
117.387 356.567 115.945 355.127 115.945 353.349 cv
115.945 351.571 117.387 350.13 119.162 350.13 cv
120.94 350.13 122.383 351.571 122.383 353.349 cv
cp
1 .705882 .388235 rgb
f
141.418 435.237 mo
96.9042 435.237 li
96.9042 422.836 li
141.418 422.836 li
141.418 435.237 li
.458824 .364706 .298039 rgb
f
159.544 444.458 mo
78.7791 444.458 li
78.7791 435.237 li
159.544 435.237 li
159.544 444.458 li
.364706 .278431 .219608 rgb
f
141.418 428.242 mo
96.9042 428.242 li
96.9042 425.222 li
141.418 425.222 li
141.418 428.242 li
1 .705882 .388235 rgb
f
125.263 340.211 mo
125.263 341.444 124.264 342.444 123.03 342.444 cv
115.296 342.444 li
114.062 342.444 113.061 341.444 113.061 340.211 cv
113.061 338.976 114.062 337.976 115.296 337.976 cv
123.03 337.976 li
124.264 337.976 125.263 338.976 125.263 340.211 cv
cp
f
141.418 435.237 mo
119.162 435.237 li
119.162 428.242 li
141.418 428.242 li
141.418 435.237 li
141.418 425.222 mo
119.162 425.222 li
119.162 422.836 li
141.418 422.836 li
141.418 425.222 li
.415686 .329412 .270588 rgb
f
141.418 428.242 mo
141.418 428.242 li
119.162 428.242 li
119.162 425.222 li
141.418 425.222 li
141.418 428.242 li
.905882 .639216 .352941 rgb
f
171.865 157.964 mo
172.017 157.436 172.163 156.903 172.3 156.369 cv
173.785 155.832 175.116 154.974 176.208 153.883 cv
177.881 152.217 178.997 149.986 179.264 147.51 cv
180.482 147.51 li
180.482 150.444 179.294 153.117 177.364 155.039 cv
175.895 156.508 173.992 157.553 171.865 157.964 cv
.372549 .45098 .419608 rgb
f
166.664 158.156 mo
131.095 158.156 li
131.095 157 li
167.024 157 li
166.908 157.388 166.788 157.772 166.664 158.156 cv
.239216 .345098 .301961 rgb
f
169.844 158.156 mo
166.664 158.156 li
166.788 157.772 166.908 157.388 167.024 157 cv
168.687 157 li
169.955 157 171.172 156.777 172.3 156.369 cv
172.163 156.903 172.017 157.436 171.865 157.964 cv
171.21 158.09 170.534 158.156 169.844 158.156 cv
.65098 .65098 .65098 rgb
f
160.68 106.542 mo
160.301 106.101 159.915 105.664 159.523 105.236 cv
159.523 84.3237 li
159.523 82.5804 159.104 80.9288 158.359 79.4727 cv
158.373 79.4585 li
157.995 78.7229 157.535 78.0352 156.999 77.4109 cv
157.2 77.584 157.394 77.7643 157.581 77.9516 cv
157.701 78.0698 157.796 78.2089 157.91 78.3325 cv
158.071 78.5092 158.228 78.6885 158.377 78.876 cv
158.536 79.0747 158.689 79.2744 158.832 79.4844 cv
158.972 79.6895 159.098 79.9042 159.223 80.1192 cv
159.322 80.2871 159.44 80.4414 159.529 80.6147 cv
159.508 80.6362 li
160.252 82.0918 160.68 83.7373 160.68 85.4799 cv
160.68 106.542 li
.372549 .45098 .419608 rgb
f
160.68 146.354 mo
131.095 146.354 li
159.523 146.354 li
159.523 112.999 li
159.919 113.545 160.305 114.101 160.68 114.662 cv
160.68 146.354 li
.239216 .345098 .301961 rgb
f
160.68 114.662 mo
160.305 114.101 159.919 113.545 159.523 112.999 cv
159.523 105.236 li
159.915 105.664 160.301 106.101 160.68 106.542 cv
160.68 114.662 li
.65098 .65098 .65098 rgb
f
108.805 98.7031 mo
108.804 98.7031 li
108.804 98.6284 li
108.805 98.6284 li
108.805 98.7031 li
.239216 .345098 .301961 rgb
f
108.804 88.0406 mo
108.804 84.3252 li
108.804 83.7306 108.755 83.1469 108.661 82.5785 cv
108.756 83.1469 108.805 83.7299 108.805 84.3237 cv
108.805 88.0405 li
108.804 88.0406 li
.372549 .45098 .419608 rgb
f
108.805 97.5205 mo
108.804 97.5205 li
108.804 93.043 li
108.805 93.0429 li
108.805 97.5205 li
.239216 .345098 .301961 rgb
f
108.804 93.043 mo
108.804 88.0406 li
108.805 88.0405 li
108.805 93.0429 li
108.804 93.043 li
.65098 .65098 .65098 rgb
f
107.323 85.4814 mo
90.1526 85.4814 li
88.6718 85.4814 li
88.6718 85.0907 88.6928 84.7051 88.7338 84.3252 cv
88.9965 84.3252 li
88.9965 83.3376 89.1536 82.3856 89.4443 81.4932 cv
90.5254 78.82 92.6605 76.6853 95.3344 75.6052 cv
96.2256 75.3154 97.1764 75.1587 98.1634 75.1587 cv
103.213 75.1587 107.323 79.2749 107.323 84.3252 cv
107.323 85.4814 li
.372549 .45098 .419608 rgb
f
173.092 132.372 mo
172.817 130.906 172.486 129.464 172.099 128.041 cv
172.75 115.364 li
172.75 113.286 li
172.743 113.286 li
172.75 113.286 li
172.75 85.9736 li
172.747 85.9736 li
172.747 83.8969 li
172.747 83.8969 li
172.747 83.2653 172.573 82.6742 172.271 82.1697 cv
173.25 82.7552 173.903 83.8274 173.903 85.0527 cv
173.903 87.1299 li
173.907 87.1299 li
173.907 114.442 li
173.907 116.52 li
173.092 132.372 li
f
170.968 142.67 mo
170.968 142.663 li
170.964 142.67 li
170.964 142.28 li
170.139 142.28 li
170.139 142.655 li
169.612 141.124 li
169.807 141.124 li
169.807 141.514 li
169.811 141.507 li
169.811 141.514 li
169.82 141.499 li
171.946 135.299 li
171.944 135.298 171.941 135.297 171.939 135.296 cv
171.939 135.296 li
171.899 135.28 171.861 135.262 171.825 135.243 cv
171.425 135.03 171.177 134.623 171.026 134.152 cv
171.781 134.152 li
171.785 134.152 li
172.099 128.041 li
172.486 129.464 172.817 130.906 173.092 132.372 cv
172.941 135.308 li
172.937 135.308 li
172.182 135.308 li
172.307 135.696 172.497 136.041 172.784 136.269 cv
172.839 136.301 li
172.921 136.36 173.005 136.417 173.102 136.456 cv
170.976 142.655 li
170.968 142.67 li
.65098 .65098 .65098 rgb
f
105.686 76.7954 mo
103.761 74.8697 101.094 73.6777 98.1634 73.6777 cv
92.284 73.6777 87.5154 78.4458 87.5154 84.3252 cv
88.9965 84.3252 li
88.9965 79.2749 93.1053 75.1587 98.1634 75.1587 cv
103.213 75.1587 107.323 79.2749 107.323 84.3252 cv
107.323 146.354 li
108.804 146.354 li
108.804 84.3252 li
108.804 81.3853 107.611 78.7193 105.686 76.7954 cv
.690196 .690196 .690196 rgb
f
107.323 84.3252 mo
88.9964 84.3252 li
88.9964 79.2749 93.1053 75.1587 98.1634 75.1587 cv
103.213 75.1587 107.323 79.2749 107.323 84.3252 cv
cp
.870588 .870588 .870588 rgb
f
159.523 84.3237 mo
159.523 146.354 li
127.128 146.354 li
127.128 151.401 123.014 155.516 117.966 155.516 cv
112.909 155.516 108.795 151.401 108.795 146.354 cv
108.805 146.354 li
108.805 84.3237 li
108.805 81.3896 107.608 78.7163 105.686 76.7954 cv
103.764 74.874 101.091 73.6773 98.1654 73.6773 cv
148.885 73.6773 li
151.82 73.6773 154.484 74.874 156.406 76.7954 cv
158.336 78.7163 159.523 81.3896 159.523 84.3237 cv
.929412 .929412 .929412 rgb
f
128.607 146.354 mo
127.131 146.354 li
127.131 151.401 123.017 155.515 117.969 155.515 cv
112.912 155.515 108.799 151.401 108.799 146.354 cv
107.323 146.354 li
107.323 152.231 112.091 157 117.969 157 cv
120.895 157 123.568 155.804 125.489 153.883 cv
127.419 151.961 128.607 149.288 128.607 146.354 cv
.788235 .788235 .788235 rgb
f
179.326 146.354 mo
128.607 146.354 li
128.607 149.288 127.419 151.961 125.489 153.883 cv
123.568 155.804 120.895 157 117.969 157 cv
168.687 157 li
171.623 157 174.286 155.804 176.208 153.883 cv
178.138 151.961 179.326 149.288 179.326 146.354 cv
.94902 .94902 .94902 rgb
f
155.224 87.9229 mo
112.917 87.9229 li
112.917 85.084 li
155.224 85.084 li
155.224 87.9229 li
.8 .8 .8 rgb
f
155.224 93.1631 mo
112.917 93.1631 li
112.917 90.3243 li
155.224 90.3243 li
155.224 93.1631 li
f
155.224 98.4028 mo
112.917 98.4028 li
112.917 95.5645 li
155.224 95.5645 li
155.224 98.4028 li
f
155.224 103.644 mo
112.917 103.644 li
112.917 100.805 li
155.224 100.805 li
155.224 103.644 li
f
155.224 108.885 mo
112.917 108.885 li
112.917 106.046 li
155.224 106.046 li
155.224 108.885 li
f
155.224 114.125 mo
112.917 114.125 li
112.917 111.286 li
155.224 111.286 li
155.224 114.125 li
f
155.224 119.365 mo
112.917 119.365 li
112.917 116.526 li
155.224 116.526 li
155.224 119.365 li
f
155.224 124.605 mo
112.917 124.605 li
112.917 121.767 li
155.224 121.767 li
155.224 124.605 li
f
126.127 136.178 mo
112.917 136.178 li
112.917 133.122 li
126.127 133.122 li
126.127 136.178 li
f
156.999 77.4109 mo
156.971 77.3869 156.943 77.363 156.915 77.3393 cv
156.751 77.152 156.582 76.9706 156.406 76.7954 cv
154.484 74.874 151.82 73.6773 148.885 73.6773 cv
148.906 73.6773 li
151.839 73.6773 154.504 74.874 156.425 76.7954 cv
156.625 76.9928 156.816 77.1981 156.999 77.4109 cv
.780392 .847059 .823529 rgb
f
158.359 79.4727 mo
157.964 78.7017 157.478 77.9855 156.915 77.3393 cv
156.943 77.363 156.971 77.3869 156.999 77.4109 cv
157.535 78.0352 157.995 78.7229 158.373 79.4585 cv
158.359 79.4727 li
.560784 .615686 .596078 rgb
f
131.785 106.046 mo
131.095 106.046 li
131.095 103.644 li
134.187 103.644 li
131.785 106.046 li
137.026 100.805 mo
131.095 100.805 li
131.095 99.8105 li
131.095 98.7031 li
108.824 98.7031 li
108.824 98.6284 li
129.912 98.6284 li
129.912 98.4028 li
139.429 98.4028 li
137.026 100.805 li
112.917 97.5205 mo
108.824 97.5205 li
108.824 84.3237 li
108.824 81.3896 107.628 78.7163 105.707 76.7954 cv
103.785 74.874 101.113 73.6773 98.1868 73.6773 cv
148.885 73.6773 li
151.82 73.6773 154.484 74.874 156.406 76.7954 cv
156.582 76.9706 156.751 77.152 156.915 77.3393 cv
157.478 77.9855 157.964 78.7017 158.359 79.4727 cv
152.747 85.084 li
112.917 85.084 li
112.917 87.9229 li
149.909 87.9229 li
147.507 90.3243 li
112.917 90.3243 li
112.917 93.1631 li
144.668 93.1631 li
142.267 95.5645 li
112.917 95.5645 li
112.917 97.5205 li
.94902 .94902 .94902 rgb
f
149.909 87.9229 mo
112.917 87.9229 li
112.917 85.084 li
152.747 85.084 li
149.909 87.9229 li
.858823 .858823 .858823 rgb
f
144.668 93.1631 mo
112.917 93.1631 li
112.917 90.3243 li
147.507 90.3243 li
144.668 93.1631 li
f
139.429 98.4028 mo
129.912 98.4028 li
129.912 97.5205 li
112.917 97.5205 li
112.917 95.5645 li
142.267 95.5645 li
139.429 98.4028 li
f
134.187 103.644 mo
131.095 103.644 li
131.095 100.805 li
137.026 100.805 li
134.187 103.644 li
f
131.095 106.737 mo
131.095 106.046 li
131.785 106.046 li
131.095 106.737 li
f
146.622 141.489 mo
145.408 141.489 144.273 141.122 143.338 140.484 cv
141.757 139.428 140.726 137.636 140.726 135.593 cv
140.726 135.47 140.726 135.349 140.744 135.226 cv
140.929 132.134 143.487 129.698 146.622 129.698 cv
146.805 129.698 146.989 129.706 147.173 129.733 cv
149.304 129.925 151.102 131.252 151.959 133.113 cv
152.317 133.864 152.518 134.703 152.518 135.593 cv
152.518 138.851 149.871 141.489 146.622 141.489 cv
cp
153.496 131.794 mo
152.544 130.064 150.954 128.737 149.05 128.125 cv
148.282 127.863 147.469 127.732 146.622 127.732 cv
142.282 127.732 138.762 131.252 138.762 135.593 cv
138.762 136.021 138.796 136.439 138.858 136.842 cv
139.181 138.851 140.263 140.606 141.801 141.793 cv
143.129 142.834 144.805 143.454 146.622 143.454 cv
150.963 143.454 154.482 139.934 154.482 135.593 cv
154.482 134.213 154.125 132.921 153.496 131.794 cv
cp
.67451 .501961 .741176 rgb
f
151.601 135.593 mo
151.601 138.345 149.373 140.58 146.622 140.58 cv
145.687 140.58 144.814 140.319 144.063 139.864 cv
142.614 139 141.635 137.41 141.635 135.593 cv
141.635 135.148 141.696 134.72 141.81 134.317 cv
142.325 132.335 144.028 130.842 146.116 130.632 cv
146.282 130.614 146.448 130.606 146.622 130.606 cv
148.718 130.606 150.5 131.898 151.234 133.732 cv
151.47 134.309 151.601 134.938 151.601 135.593 cv
cp
f
143.338 140.484 mo
141.801 141.793 li
140.263 140.606 139.181 138.851 138.858 136.842 cv
140.744 135.226 li
140.726 135.349 140.726 135.47 140.726 135.593 cv
140.726 137.636 141.757 139.428 143.338 140.484 cv
cp
.776471 .580392 .85098 rgb
f
151.234 133.732 mo
144.063 139.864 li
142.614 139 141.635 137.41 141.635 135.593 cv
141.635 135.148 141.696 134.72 141.81 134.317 cv
146.116 130.632 li
146.282 130.614 146.448 130.606 146.622 130.606 cv
148.718 130.606 150.5 131.898 151.234 133.732 cv
cp
f
153.496 131.794 mo
151.959 133.113 li
151.102 131.252 149.304 129.925 147.173 129.733 cv
149.05 128.125 li
150.954 128.737 152.544 130.064 153.496 131.794 cv
cp
f
171.946 135.299 mo
169.82 141.499 li
169.811 141.514 li
169.811 141.499 li
169.82 136.247 li
169.811 136.006 169.633 135.811 169.401 135.811 cv
169.176 135.811 168.989 136.006 168.989 136.247 cv
168.982 141.499 li
166.849 135.292 li
167.778 134.92 167.973 133.555 167.996 132.553 cv
170.798 132.553 li
170.82 133.555 171.007 134.92 171.946 135.299 cv
1 1 1 rgb
f
172.75 113.286 mo
166.044 113.286 li
166.044 85.9736 li
172.75 85.9736 li
172.75 113.286 li
.180392 .180392 .180392 rgb
f
171.785 134.152 mo
166.961 134.152 li
166.044 115.364 li
172.75 115.364 li
171.785 134.152 li
f
172.75 115.364 mo
166.044 115.364 li
166.044 113.286 li
172.75 113.286 li
172.75 115.364 li
.776471 .580392 .85098 rgb
f
172.747 83.8969 mo
172.747 85.9751 li
166.048 85.9751 li
166.048 83.8969 li
172.747 83.8969 li
.921569 .819608 .737255 rgb
f
169.82 136.217 mo
169.811 141.124 li
168.982 141.124 li
168.989 136.217 li
168.989 135.993 169.176 135.811 169.401 135.811 cv
169.633 135.811 169.811 135.993 169.82 136.217 cv
.827451 .827451 .827451 rgb
f
172.747 83.8969 mo
166.048 83.8969 li
166.048 82.0439 167.55 80.5415 169.401 80.5415 cv
171.253 80.5415 172.747 82.0439 172.747 83.8969 cv
.180392 .180392 .180392 rgb
f
169.122 101.105 mo
169.122 101.723 168.621 102.225 168.003 102.225 cv
167.384 102.225 166.883 101.723 166.883 101.105 cv
166.883 86.2027 li
166.883 85.585 167.384 85.084 168.003 85.084 cv
168.621 85.084 169.122 85.585 169.122 86.2027 cv
169.122 101.105 li
.921569 .819608 .737255 rgb
f
169.807 141.514 mo
169.807 141.124 li
169.811 141.124 li
169.82 136.245 li
169.82 136.246 169.82 136.246 169.82 136.247 cv
169.811 141.499 li
169.811 141.507 li
169.807 141.514 li
171.939 135.296 mo
171.899 135.28 171.861 135.262 171.825 135.243 cv
171.861 135.262 171.899 135.28 171.939 135.296 cv
171.939 135.296 li
.545098 .545098 .545098 rgb
f
169.811 141.507 mo
169.811 141.499 li
169.82 136.247 li
169.82 136.246 169.82 136.246 169.82 136.245 cv
169.82 136.217 li
169.811 135.993 169.633 135.811 169.401 135.811 cv
169.401 135.811 li
169.401 135.811 li
169.4 135.811 169.398 135.811 169.397 135.811 cv
169.397 134.152 li
171.026 134.152 li
171.026 134.152 li
171.021 134.152 li
171.174 134.624 171.422 135.03 171.825 135.243 cv
171.861 135.262 171.899 135.28 171.939 135.296 cv
169.816 141.497 li
169.811 141.507 li
.839216 .839216 .839216 rgb
f
172.743 113.286 mo
169.397 113.286 li
169.397 85.9751 li
172.743 85.9751 li
172.743 113.286 li
.152941 .152941 .152941 rgb
f
171.781 134.152 mo
171.026 134.152 li
169.397 134.152 li
169.397 115.364 li
172.743 115.364 li
172.743 115.365 li
171.781 134.152 li
f
172.743 115.364 mo
169.397 115.364 li
169.397 113.286 li
172.743 113.286 li
172.743 115.364 li
.65098 .486274 .713725 rgb
f
172.743 85.9751 mo
169.397 85.9751 li
169.397 83.8969 li
172.743 83.8969 li
172.743 83.8969 li
172.743 85.9751 li
.772549 .686274 .619608 rgb
f
169.397 80.5415 mo
169.397 80.5415 li
169.398 80.5415 169.399 80.5415 169.399 80.5415 cv
169.399 80.5415 169.398 80.5415 169.397 80.5415 cv
.576471 .654902 .623529 rgb
f
169.811 141.124 mo
169.807 141.124 li
169.807 141.122 li
169.397 141.122 li
169.397 135.811 li
169.398 135.811 169.4 135.811 169.401 135.811 cv
169.401 135.811 li
169.401 135.811 li
169.633 135.811 169.811 135.993 169.82 136.217 cv
169.82 136.245 li
169.811 141.124 li
.694118 .694118 .694118 rgb
f
172.743 83.8969 mo
169.397 83.8969 li
169.397 80.5415 li
169.398 80.5415 169.399 80.5415 169.399 80.5415 cv
171.25 80.5426 172.743 82.0446 172.743 83.8969 cv
.152941 .152941 .152941 rgb
f
92.5618 197.089 mo
87.035 193.168 li
85.1512 191.828 li
83.2693 193.168 li
77.7411 197.089 li
77.7411 195.068 li
82.0867 191.986 li
83.9686 190.645 li
85.8523 191.986 li
91.3792 195.907 li
91.3792 191.986 li
91.3792 190.831 li
91.7691 191.052 92.1661 191.27 92.5618 191.482 cv
92.5618 193.168 li
92.5618 197.089 li
76.5585 188.229 mo
71.0956 188.229 li
68.6043 188.229 li
66.7195 188.222 65.054 187.317 64.0145 185.918 cv
64.9645 186.624 66.1425 187.042 67.4217 187.046 cv
67.4217 187.046 li
69.9129 187.046 li
85.5791 187.046 li
85.5791 187.046 li
76.5585 187.046 li
76.5585 188.229 li
.447059 .509804 .486274 rgb
f
131.095 188.229 mo
97.0217 188.229 li
96.2331 187.854 95.4563 187.46 94.6907 187.046 cv
129.912 187.046 li
129.912 158.156 li
131.095 158.156 li
131.095 188.229 li
.32549 .423529 .388235 rgb
f
92.5618 191.482 mo
92.1661 191.27 91.7691 191.052 91.3792 190.831 cv
91.3792 187.046 li
85.5791 187.046 li
85.5791 187.046 li
94.6907 187.046 li
95.4563 187.46 96.2331 187.854 97.0217 188.229 cv
92.5618 188.229 li
92.5618 191.482 li
.65098 .65098 .65098 rgb
f
75.4686 107.854 mo
67.4217 107.854 li
65.2625 107.844 63.4457 106.348 62.9593 104.343 cv
62.9363 104.261 62.9162 104.178 62.8989 104.095 cv
63.0664 101.089 65.5565 98.7031 68.6151 98.7031 cv
84.8148 98.7031 li
81.3519 101.377 78.2138 104.45 75.4686 107.854 cv
64.1326 105.478 mo
64.1419 105.525 li
64.1449 105.518 li
64.1326 105.478 li
63.9969 104.418 mo
63.9969 104.69 64.0286 104.948 64.0765 105.202 cv
64.0321 104.946 63.9969 104.686 63.9969 104.418 cv
.447059 .509804 .486274 rgb
f
107.323 107.854 mo
81.9922 107.854 li
85.3976 104.265 89.3234 101.173 93.6474 98.7031 cv
107.323 98.7031 li
107.323 107.854 li
.32549 .423529 .388235 rgb
f
81.9922 107.854 mo
75.4686 107.854 li
78.2138 104.45 81.3519 101.377 84.8148 98.7031 cv
93.6474 98.7031 li
89.3234 101.173 85.3976 104.265 81.9922 107.854 cv
.65098 .65098 .65098 rgb
f
131.095 158.156 mo
129.912 158.156 li
129.912 157 li
131.095 157 li
131.095 158.156 li
108.805 107.854 mo
108.804 107.854 li
108.804 98.7031 li
108.805 98.7031 li
108.805 107.854 li
.156863 .223529 .196078 rgb
f
108.804 107.854 mo
107.323 107.854 li
107.323 98.7031 li
108.804 98.7031 li
108.804 107.854 li
.45098 .45098 .45098 rgb
f
131.095 146.354 mo
129.912 146.354 li
129.912 124.605 li
131.095 124.605 li
131.095 146.354 li
131.095 121.767 mo
129.912 121.767 li
129.912 119.365 li
131.095 119.365 li
131.095 121.767 li
131.095 116.526 mo
129.912 116.526 li
129.912 114.125 li
131.095 114.125 li
131.095 116.526 li
131.095 111.286 mo
129.912 111.286 li
129.912 108.962 li
129.912 108.885 li
131.095 108.885 li
131.095 109.037 li
131.095 110.145 li
131.095 111.286 li
108.824 107.854 mo
108.805 107.854 li
108.805 98.7031 li
108.824 98.7031 li
108.824 107.854 li
.607843 .607843 .607843 rgb
f
131.095 157 mo
129.912 157 li
129.912 146.354 li
131.095 146.354 li
131.095 157 li
.619608 .619608 .619608 rgb
f
131.095 108.885 mo
129.912 108.885 li
129.912 107.919 li
131.095 106.737 li
131.095 108.885 li
.521569 .521569 .521569 rgb
f
131.095 114.125 mo
129.912 114.125 li
129.912 111.286 li
131.095 111.286 li
131.095 114.125 li
f
131.095 119.365 mo
129.912 119.365 li
129.912 116.526 li
131.095 116.526 li
131.095 119.365 li
f
131.095 124.605 mo
129.912 124.605 li
129.912 121.767 li
131.095 121.767 li
131.095 124.605 li
f
112.917 107.854 mo
108.824 107.854 li
108.824 98.7031 li
131.095 98.7031 li
131.095 99.8105 li
131.095 100.805 li
112.917 100.805 li
112.917 103.644 li
131.095 103.644 li
131.095 106.046 li
112.917 106.046 li
112.917 107.854 li
.619608 .619608 .619608 rgb
f
131.095 103.644 mo
112.917 103.644 li
112.917 100.805 li
131.095 100.805 li
131.095 103.644 li
.560784 .560784 .560784 rgb
f
129.912 107.919 mo
129.912 107.854 li
112.917 107.854 li
112.917 106.046 li
131.095 106.046 li
131.095 106.737 li
129.912 107.919 li
f
67.4217 108.962 mo
65.5715 108.956 63.9328 108.083 62.8899 106.727 cv
62.8899 106.715 li
62.951 106.793 63.0142 106.87 63.0794 106.946 cv
64.1097 108.175 65.6717 108.951 67.4217 108.962 cv
67.4217 108.962 li
.447059 .509804 .486274 rgb
f
129.912 108.962 mo
129.912 187.046 li
67.4217 187.046 li
67.4217 108.962 li
129.912 108.962 li
.364706 .278431 .219608 rgb
f
62.8143 103.236 mo
62.8143 103.624 62.8601 103.989 62.9593 104.343 cv
63.4457 106.348 65.2625 107.844 67.4217 107.854 cv
129.912 107.854 li
129.912 108.962 li
67.4217 108.962 li
65.6717 108.951 64.1097 108.175 63.0794 106.946 cv
62.2171 105.949 61.7073 104.653 61.7073 103.236 cv
61.7073 100.079 64.2649 97.5205 67.4325 97.5205 cv
129.912 97.5205 li
129.912 98.6284 li
67.4325 98.6284 li
64.886 98.6284 62.8143 100.699 62.8143 103.236 cv
.568627 .431373 .345098 rgb
f
129.912 98.6284 mo
129.912 107.854 li
67.4217 107.854 li
64.8861 107.844 62.8143 105.772 62.8143 103.236 cv
62.8143 100.699 64.8861 98.6284 67.4324 98.6284 cv
129.912 98.6284 li
cp
.364706 .278431 .219608 rgb
f
127.597 100.998 mo
127.597 107.854 li
67.4217 107.854 li
65.2625 107.844 63.4456 106.348 62.9593 104.343 cv
63.4559 102.427 65.2064 100.998 67.2796 100.998 cv
127.597 100.998 li
cp
.94902 .94902 .94902 rgb
f
67.4217 108.962 mo
67.4217 187.046 li
64.2548 187.035 61.7073 184.488 61.7073 181.32 cv
61.7073 103.236 li
61.7073 106.403 64.2548 108.951 67.4217 108.962 cv
.364706 .278431 .219608 rgb
f
69.9129 187.046 mo
67.4217 187.046 li
67.4217 108.962 li
69.9129 108.962 li
69.9129 187.046 li
.321569 .227451 .168627 rgb
f
91.3729 106.562 mo
76.5584 106.562 li
76.5584 100.586 li
91.3729 100.586 li
91.3729 106.562 li
cp
.8 .670588 .85098 rgb
f
91.3792 187.046 mo
91.3792 195.907 li
85.8523 191.986 li
83.9686 190.645 li
82.0867 191.986 li
76.5585 195.907 li
76.5585 187.046 li
91.3792 187.046 li
f
91.3792 191.986 mo
85.8523 191.986 li
83.9686 190.645 li
82.0867 191.986 li
76.5585 191.986 li
76.5585 187.046 li
91.3792 187.046 li
91.3792 190.831 li
91.3792 191.986 li
.701961 .545098 .65098 rgb
f
92.6106 142.15 mo
87.7494 142.15 li
87.7494 130.322 li
89.5326 130.322 li
89.5326 140.376 li
92.6106 140.376 li
92.6106 142.15 li
.921569 .819608 .737255 rgb
f
97.0653 133.031 mo
96.4046 137.695 li
97.7264 137.695 li
97.0653 133.031 li
96.1273 139.432 mo
95.6947 142.15 li
93.8378 142.15 li
95.849 130.322 li
98.3016 130.322 li
100.285 142.15 li
98.408 142.15 li
97.9905 139.432 li
96.1273 139.432 li
f
107.266 130.322 mo
109.138 130.322 li
107.289 142.15 li
105.59 142.15 li
104.572 135.643 li
103.622 142.15 li
101.916 142.15 li
99.9349 130.322 li
101.805 130.322 li
102.739 136.656 li
103.599 130.322 li
105.467 130.322 li
106.401 136.651 li
107.266 130.322 li
f
112.329 123.549 mo
85.0047 123.549 li
85.0047 124.335 84.8269 125.088 84.5184 125.764 cv
112.817 125.764 li
112.505 125.088 112.329 124.335 112.329 123.549 cv
79.7435 144.039 mo
80.5424 144.039 81.2953 144.216 81.9593 144.526 cv
81.9593 128.322 li
81.2953 128.632 80.5424 128.81 79.7435 128.81 cv
79.7435 144.039 li
112.562 147.727 mo
84.7737 147.727 li
84.9158 148.225 85.0047 148.756 85.0047 149.3 cv
85.0047 149.521 84.9944 149.731 84.9617 149.942 cv
112.373 149.942 li
112.339 149.731 112.329 149.521 112.329 149.3 cv
112.329 148.756 112.418 148.225 112.562 147.727 cv
115.375 128.322 mo
115.375 144.526 li
116.051 144.216 116.805 144.039 117.59 144.039 cv
117.59 128.81 li
116.805 128.81 116.051 128.632 115.375 128.322 cv
f
115.375 128.322 mo
114.245 127.801 113.347 126.894 112.817 125.764 cv
112.505 125.088 112.329 124.335 112.329 123.549 cv
110.114 123.549 li
110.114 124.324 110.235 125.066 110.447 125.764 cv
111.178 128.112 113.027 129.961 115.375 130.692 cv
116.073 130.903 116.815 131.025 117.59 131.025 cv
117.59 128.81 li
116.805 128.81 116.051 128.632 115.375 128.322 cv
f
115.375 142.029 mo
112.817 142.827 110.844 144.964 110.291 147.601 cv
110.17 148.11 110.114 148.63 110.114 149.173 cv
110.114 149.394 110.124 149.605 110.147 149.816 cv
112.373 149.816 li
112.339 149.605 112.329 149.394 112.329 149.173 cv
112.329 148.63 112.418 148.099 112.562 147.601 cv
113.017 146.183 114.047 145.02 115.375 144.399 cv
116.051 144.09 116.805 143.912 117.59 143.912 cv
117.59 141.697 li
116.815 141.697 116.073 141.819 115.375 142.029 cv
cp
f
85.0047 123.422 mo
85.0047 124.208 84.8269 124.962 84.5184 125.637 cv
83.9969 126.767 83.0887 127.675 81.9593 128.196 cv
81.2953 128.505 80.5424 128.684 79.7435 128.684 cv
79.7435 130.898 li
80.5183 130.898 81.2611 130.777 81.9593 130.565 cv
84.3187 129.835 86.1576 127.985 86.8885 125.637 cv
87.1091 124.94 87.2205 124.197 87.2205 123.422 cv
85.0047 123.422 li
f
87.0531 147.601 mo
86.4881 144.964 84.5184 142.827 81.9593 142.029 cv
81.2611 141.819 80.5183 141.697 79.7435 141.697 cv
79.7435 143.912 li
80.5424 143.912 81.2953 144.09 81.9593 144.399 cv
83.3001 145.02 84.3187 146.183 84.7737 147.601 cv
84.9158 148.099 85.0047 148.63 85.0047 149.173 cv
85.0047 149.394 84.9944 149.605 84.9617 149.816 cv
87.1879 149.816 li
87.2083 149.605 87.2205 149.394 87.2205 149.173 cv
87.2205 148.63 87.1638 148.11 87.0531 147.601 cv
f
69.9129 168.949 mo
69.9129 108.962 li
129.912 108.962 li
112.913 125.958 li
112.879 125.894 112.847 125.829 112.817 125.764 cv
112.817 125.764 li
112.505 125.088 112.329 124.335 112.329 123.549 cv
87.2196 123.549 li
87.2202 123.507 87.2205 123.465 87.2205 123.422 cv
85.0047 123.422 li
85.0047 124.208 84.8269 124.962 84.5184 125.637 cv
83.9969 126.767 83.0887 127.675 81.9593 128.196 cv
81.2953 128.505 80.5424 128.684 79.7435 128.684 cv
79.7435 128.81 li
79.7435 128.81 li
79.7435 144.039 li
80.5424 144.039 81.2953 144.216 81.9593 144.526 cv
81.9593 144.399 li
81.9593 144.399 li
83.3001 145.02 84.3187 146.183 84.7737 147.601 cv
84.7857 147.642 84.7973 147.685 84.8084 147.727 cv
84.7737 147.727 li
84.9107 148.207 84.9982 148.718 85.0043 149.241 cv
85.0023 149.438 84.991 149.627 84.9617 149.816 cv
84.9787 149.816 li
84.9739 149.858 84.9683 149.9 84.9617 149.942 cv
88.9232 149.942 li
69.9129 168.949 li
91.139 147.727 mo
87.0794 147.727 li
87.071 147.685 87.0622 147.643 87.0531 147.601 cv
86.4881 144.964 84.5184 142.827 81.9593 142.029 cv
81.9593 142.029 li
81.9593 130.565 li
81.9593 130.565 li
84.2763 129.848 86.0911 128.052 86.8478 125.764 cv
110.447 125.764 li
110.447 125.764 li
110.648 126.41 110.934 127.02 111.292 127.578 cv
108.547 130.322 li
107.266 130.322 li
107.064 131.806 li
105.863 133.006 li
105.467 130.322 li
103.599 130.322 li
102.821 136.047 li
102.671 136.197 li
101.805 130.322 li
99.9349 130.322 li
101.17 137.698 li
99.7724 139.095 li
98.3016 130.322 li
95.849 130.322 li
93.8378 142.15 li
95.6947 142.15 li
96.1273 139.432 li
97.9905 139.432 li
98.1829 140.685 li
91.139 147.727 li
87.7494 130.322 mo
87.7494 142.15 li
92.6106 142.15 li
92.6106 140.376 li
89.5326 140.376 li
89.5326 130.322 li
87.7494 130.322 li
97.7264 137.695 mo
96.4046 137.695 li
97.0653 133.031 li
97.7264 137.695 li
.407843 .32549 .270588 rgb
f
92.6106 142.15 mo
87.7494 142.15 li
87.7494 130.322 li
89.5326 130.322 li
89.5326 140.376 li
92.6106 140.376 li
92.6106 142.15 li
.921569 .827451 .752941 rgb
f
95.6947 142.15 mo
93.8378 142.15 li
95.849 130.322 li
98.3016 130.322 li
99.7724 139.095 li
98.1829 140.685 li
97.9905 139.432 li
96.1273 139.432 li
95.6947 142.15 li
97.0653 133.031 mo
96.4046 137.695 li
97.7264 137.695 li
97.0653 133.031 li
f
101.17 137.698 mo
99.9349 130.322 li
101.805 130.322 li
102.671 136.197 li
101.17 137.698 li
102.821 136.047 mo
103.599 130.322 li
105.467 130.322 li
105.863 133.006 li
102.821 136.047 li
107.064 131.806 mo
107.266 130.322 li
108.547 130.322 li
107.064 131.806 li
f
88.9232 149.942 mo
84.9617 149.942 li
84.9683 149.9 84.9739 149.858 84.9787 149.816 cv
87.1879 149.816 li
87.2083 149.605 87.2205 149.394 87.2205 149.173 cv
87.2205 148.675 87.1728 148.196 87.0794 147.727 cv
91.139 147.727 li
88.9232 149.942 li
85.0043 149.241 mo
84.9982 148.718 84.9107 148.207 84.7737 147.727 cv
84.8084 147.727 li
84.9301 148.188 85.0047 148.676 85.0047 149.173 cv
85.0047 149.196 85.0046 149.219 85.0043 149.241 cv
81.9593 144.526 mo
81.2953 144.216 80.5424 144.039 79.7435 144.039 cv
79.7435 128.81 li
79.7435 128.81 li
79.7435 130.898 li
80.5183 130.898 81.2611 130.777 81.9593 130.565 cv
81.9593 142.029 li
81.2611 141.819 80.5183 141.697 79.7435 141.697 cv
79.7435 143.912 li
80.5424 143.912 81.2953 144.09 81.9593 144.399 cv
81.9593 144.526 li
112.817 125.764 mo
112.817 125.764 li
112.505 125.088 112.329 124.335 112.329 123.549 cv
110.114 123.549 li
110.114 124.324 110.235 125.066 110.447 125.764 cv
86.8478 125.764 li
86.8617 125.722 86.8753 125.679 86.8885 125.637 cv
87.0971 124.978 87.2081 124.278 87.2196 123.549 cv
112.329 123.549 li
112.329 124.335 112.505 125.088 112.817 125.764 cv
f
111.292 127.578 mo
110.934 127.02 110.648 126.41 110.447 125.764 cv
110.447 125.764 li
110.235 125.066 110.114 124.324 110.114 123.549 cv
112.329 123.549 li
112.329 124.335 112.505 125.088 112.817 125.764 cv
112.817 125.764 li
112.847 125.829 112.879 125.894 112.913 125.958 cv
111.292 127.578 li
f
79.7435 130.898 mo
79.7435 128.81 li
79.7435 128.684 li
80.5424 128.684 81.2953 128.505 81.9593 128.196 cv
83.0887 127.675 83.9969 126.767 84.5184 125.637 cv
84.8269 124.962 85.0047 124.208 85.0047 123.422 cv
87.2205 123.422 li
87.2205 123.465 87.2202 123.507 87.2196 123.549 cv
87.2081 124.278 87.0971 124.978 86.8885 125.637 cv
86.8753 125.679 86.8617 125.722 86.8478 125.764 cv
86.0911 128.052 84.2763 129.848 81.9593 130.565 cv
81.9593 130.565 li
81.2611 130.777 80.5183 130.898 79.7435 130.898 cv
f
87.1879 149.816 mo
84.9787 149.816 li
84.9617 149.816 li
84.991 149.627 85.0023 149.438 85.0043 149.241 cv
85.0046 149.219 85.0047 149.196 85.0047 149.173 cv
85.0047 148.676 84.9301 148.188 84.8084 147.727 cv
84.7973 147.685 84.7857 147.642 84.7737 147.601 cv
84.3187 146.183 83.3001 145.02 81.9593 144.399 cv
81.9593 144.399 li
81.2953 144.09 80.5424 143.912 79.7435 143.912 cv
79.7435 141.697 li
80.5183 141.697 81.2611 141.819 81.9593 142.029 cv
81.9593 142.029 li
84.5184 142.827 86.4881 144.964 87.0531 147.601 cv
87.0622 147.643 87.071 147.685 87.0794 147.727 cv
87.1728 148.196 87.2205 148.675 87.2205 149.173 cv
87.2205 149.394 87.2083 149.605 87.1879 149.816 cv
f
410.547 413.333 mo
387.451 413.333 li
388.451 412.333 li
409.547 412.333 li
399.49 406.939 li
399.49 406.939 li
409.547 412.333 li
409.547 396.567 li
410.547 397.567 li
410.547 413.333 li
.32549 .423529 .388235 rgb
f
329.691 413.333 mo
328.205 413.333 li
328.205 412.333 li
329.331 412.333 li
329.448 412.669 329.568 413.001 329.691 413.333 cv
.447059 .509804 .486274 rgb
f
372.293 413.333 mo
334.971 413.333 li
334.834 413.002 334.7 412.669 334.57 412.333 cv
373.293 412.333 li
372.293 413.333 li
.32549 .423529 .388235 rgb
f
334.971 413.333 mo
329.691 413.333 li
329.568 413.001 329.448 412.669 329.331 412.333 cv
334.57 412.333 li
334.7 412.669 334.834 413.002 334.971 413.333 cv
.65098 .65098 .65098 rgb
f
328.205 411.795 mo
328.205 408.718 li
328.449 409.609 328.716 410.492 329.003 411.365 cv
328.205 411.795 li
328.205 379.477 mo
328.205 366.801 li
328.483 366.56 li
332.34 368.851 li
330.613 372.211 329.222 375.765 328.205 379.477 cv
.447059 .509804 .486274 rgb
f
333.406 408.993 mo
331.95 404.283 331.164 399.279 331.164 394.097 cv
331.164 385.926 333.115 378.203 336.575 371.367 cv
368.287 390.203 li
333.406 408.993 li
.32549 .423529 .388235 rgb
f
329.003 411.365 mo
328.716 410.492 328.449 409.609 328.205 408.718 cv
328.205 379.477 li
329.222 375.765 330.613 372.211 332.34 368.851 cv
336.575 371.367 li
333.115 378.203 331.164 385.926 331.164 394.097 cv
331.164 399.279 331.95 404.283 333.406 408.993 cv
329.003 411.365 li
.65098 .65098 .65098 rgb
f
410.547 367.152 mo
409.547 366.152 li
409.547 365.934 li
410.547 366.801 li
410.547 367.152 li
.32549 .423529 .388235 rgb
f
401.53 342.363 mo
401.28 342.267 401.027 342.172 400.775 342.079 cv
401.53 342.079 li
401.53 342.363 li
.447059 .509804 .486274 rgb
f
400.53 354.857 mo
400.53 347.253 li
400.866 347.389 401.197 347.527 401.53 347.67 cv
401.53 354.532 li
401.192 354.194 li
400.53 354.857 li
.32549 .423529 .388235 rgb
f
401.53 347.67 mo
401.197 347.527 400.866 347.389 400.53 347.253 cv
400.53 342.079 li
400.775 342.079 li
401.027 342.172 401.28 342.267 401.53 342.363 cv
401.53 347.67 li
.65098 .65098 .65098 rgb
f
327.205 412.333 mo
327.205 365.801 li
368.464 390.203 li
327.205 412.333 li
cp
.25098 .419608 .34902 rgb
f
409.547 412.333 mo
409.547 365.801 li
368.287 390.203 li
409.547 412.333 li
f
327.205 412.333 mo
368.287 390.203 li
409.547 412.333 li
327.205 412.333 li
.176471 .25098 .215686 rgb
f
368.287 330.032 mo
327.205 365.801 li
368.287 390.203 li
409.547 365.801 li
368.287 330.032 li
f
368.376 390.15 mo
400.53 371.134 li
400.53 341.079 li
336.579 341.079 li
336.579 371.346 li
368.376 390.15 li
1 1 1 rgb
f
346.13 373.397 mo
391.311 373.397 li
391.311 374.8 li
346.13 374.8 li
346.13 373.397 li
.803922 .803922 .803922 rgb
f
346.13 366.078 mo
391.311 366.078 li
391.311 367.481 li
346.13 367.481 li
346.13 366.078 li
f
346.13 358.651 mo
391.311 358.651 li
391.311 360.054 li
346.13 360.054 li
346.13 358.651 li
cp
f
346.13 350.759 mo
391.311 350.759 li
391.311 352.87 li
346.13 352.87 li
346.13 350.759 li
cp
f
351.773 380.331 mo
354.145 381.735 li
378.393 381.735 li
378.393 380.331 li
351.773 380.331 li
cp
f
377.398 396.508 mo
377.398 389.047 383.447 382.999 390.907 382.999 cv
398.368 382.999 404.415 389.047 404.415 396.508 cv
404.415 403.968 398.368 410.017 390.907 410.017 cv
383.447 410.017 377.398 403.968 377.398 396.508 cv
1 1 1 rgb
f
378.852 396.508 mo
378.852 389.851 384.249 384.452 390.907 384.452 cv
397.566 384.452 402.963 389.851 402.963 396.508 cv
402.963 403.166 397.566 408.563 390.907 408.563 cv
384.249 408.563 378.852 403.166 378.852 396.508 cv
1 .705882 .388235 rgb
f
360.732 440.052 mo
358.462 439.014 356.281 437.813 354.206 436.463 cv
353.08 432.546 li
372.293 413.333 li
387.451 413.333 li
360.732 440.052 li
.32549 .423529 .388235 rgb
f
360.659 440.125 mo
356.79 439.192 li
356.79 439.192 li
354.856 438.725 li
354.206 436.463 li
356.281 437.813 358.462 439.014 360.732 440.052 cv
360.659 440.125 li
.65098 .65098 .65098 rgb
f
387.451 413.333 mo
372.293 413.333 li
373.293 412.333 li
388.451 412.333 li
387.451 413.333 li
.211765 .27451 .254902 rgb
f
388.451 412.333 mo
373.293 412.333 li
380.502 405.124 li
382.953 408.08 386.639 409.975 390.769 410.016 cv
388.451 412.333 li
.117647 .164706 .141176 rgb
f
437.079 393.946 mo
437.075 392.595 437.023 391.254 436.924 389.927 cv
439.011 392.014 li
437.079 393.946 li
.447059 .509804 .486274 rgb
f
420.201 410.823 mo
411.437 402.059 li
413.238 400.258 li
410.547 397.567 li
410.547 367.152 li
428.446 385.05 li
430.246 383.25 li
431.187 384.191 li
431.827 387.394 432.163 390.708 432.163 394.097 cv
432.163 395.788 432.079 397.46 431.916 399.109 cv
420.201 410.823 li
.32549 .423529 .388235 rgb
f
431.916 399.109 mo
432.079 397.46 432.163 395.788 432.163 394.097 cv
432.163 390.708 431.827 387.394 431.187 384.191 cv
432.007 385.01 li
432.007 385.01 li
435.165 388.168 li
436.924 389.927 li
437.023 391.254 437.075 392.595 437.079 393.946 cv
431.916 399.109 li
.65098 .65098 .65098 rgb
f
408.244 364.672 mo
401.53 358.851 li
401.53 354.532 li
407.182 360.185 li
409.956 362.959 li
408.244 364.672 li
.32549 .423529 .388235 rgb
f
410.547 397.567 mo
409.547 396.567 li
409.547 366.152 li
410.547 367.152 li
410.547 397.567 li
401.53 358.851 mo
400.53 357.984 li
400.53 354.857 li
401.192 354.194 li
401.53 354.532 li
401.53 358.851 li
.211765 .27451 .254902 rgb
f
404.266 398.52 mo
404.364 397.863 404.415 397.192 404.415 396.508 cv
404.415 391.637 401.838 387.369 397.973 384.992 cv
392.948 379.968 li
391.147 381.769 li
387.951 378.573 li
400.53 371.134 li
409.326 365.932 li
409.547 366.152 li
409.547 396.567 li
407.883 394.903 li
404.266 398.52 li
.164706 .27451 .227451 rgb
f
400.53 371.134 mo
400.53 357.984 li
401.53 358.851 li
408.244 364.672 li
408.155 364.76 li
409.326 365.932 li
400.53 371.134 li
.117647 .164706 .141176 rgb
f
387.951 378.573 mo
384.178 374.8 li
391.311 374.8 li
391.311 373.397 li
382.775 373.397 li
382.382 373.004 li
385.184 370.203 li
387.905 367.481 li
391.311 367.481 li
391.311 366.078 li
389.308 366.078 li
400.53 354.857 li
400.53 357.984 li
400.53 371.134 li
387.951 378.573 li
.65098 .65098 .65098 rgb
f
391.311 374.8 mo
384.178 374.8 li
382.775 373.397 li
391.311 373.397 li
391.311 374.8 li
.52549 .52549 .52549 rgb
f
391.311 367.481 mo
387.905 367.481 li
389.308 366.078 li
391.311 366.078 li
391.311 367.481 li
f
390.769 410.016 mo
386.639 409.975 382.953 408.08 380.502 405.124 cv
381.535 404.091 li
383.745 406.819 387.122 408.563 390.907 408.563 cv
391.378 408.563 391.845 408.535 392.302 408.483 cv
390.769 410.016 li
402.48 400.306 mo
402.384 400.21 li
402.76 399.044 402.963 397.8 402.963 396.508 cv
402.963 392.209 400.713 388.435 397.325 386.301 cv
398.303 385.323 li
397.973 384.992 li
401.838 387.369 404.415 391.637 404.415 396.508 cv
404.415 397.192 404.364 397.863 404.266 398.52 cv
402.48 400.306 li
.65098 .65098 .65098 rgb
f
390.907 408.563 mo
387.122 408.563 383.745 406.819 381.535 404.091 cv
393.901 391.726 li
392.9 390.726 li
397.325 386.301 li
400.713 388.435 402.963 392.209 402.963 396.508 cv
402.963 397.8 402.76 399.044 402.384 400.21 cv
401.479 399.306 li
392.302 408.483 li
391.845 408.535 391.378 408.563 390.907 408.563 cv
.65098 .458824 .254902 rgb
f
458.828 439.974 mo
413.86 439.974 li
413.86 439.177 li
420.125 434.689 425.42 428.929 429.364 422.278 cv
454.867 422.278 li
454.867 433.598 li
458.828 433.598 li
458.828 439.974 li
.447059 .509804 .486274 rgb
f
417.822 429.316 mo
417.822 422.278 li
423.55 422.278 li
421.851 424.795 419.934 427.149 417.822 429.316 cv
.32549 .423529 .388235 rgb
f
413.86 439.177 mo
413.86 433.598 li
417.822 433.598 li
417.822 429.316 li
419.934 427.149 421.851 424.795 423.55 422.278 cv
429.364 422.278 li
425.42 428.929 420.125 434.689 413.86 439.177 cv
.65098 .65098 .65098 rgb
f
436.945 415.707 mo
435.781 411.384 li
434.437 411.022 li
434.622 410.445 434.799 409.859 434.966 409.274 cv
435.781 409.055 li
436.945 404.732 li
438.109 409.055 li
442.432 410.219 li
438.109 411.384 li
436.945 415.707 li
.447059 .509804 .486274 rgb
f
434.437 411.022 mo
431.457 410.219 li
434.966 409.274 li
434.799 409.859 434.622 410.445 434.437 411.022 cv
.65098 .65098 .65098 rgb
f
464.558 419.031 mo
453.764 415.624 li
454.104 414.545 li
464.899 417.952 li
464.558 419.031 li
.447059 .509804 .486274 rgb
f
452.013 405.885 mo
451.506 404.873 li
461.629 399.806 li
462.135 400.819 li
452.013 405.885 li
f
445.476 397.605 mo
444.467 397.093 li
449.583 386.996 li
450.592 387.508 li
445.476 397.605 li
f
359.314 438.781 mo
353.511 437.38 li
351.736 431.202 li
397.358 385.58 li
404.938 393.158 li
359.314 438.781 li
cp
.290196 .223529 .180392 rgb
f
401.135 398.961 mo
391.555 389.381 li
400.76 380.176 li
410.34 389.756 li
401.135 398.961 li
cp
.470588 .364706 .294118 rgb
f
416.155 403.176 mo
387.341 374.361 li
402.549 359.153 li
431.363 387.967 li
416.155 403.176 li
cp
.290196 .223529 .180392 rgb
f
389.803 380.424 mo
381.037 371.66 li
399.847 352.85 li
408.611 361.615 li
389.803 380.424 li
cp
f
418.857 409.479 mo
410.093 400.715 li
428.902 381.905 li
437.666 390.669 li
418.857 409.479 li
cp
f
419.545 391.357 mo
399.134 370.946 li
405.638 364.444 li
426.048 384.854 li
419.545 391.357 li
cp
.470588 .364706 .294118 rgb
f
416.543 379.751 mo
404.737 367.945 li
405.537 367.145 li
417.344 378.951 li
416.543 379.751 li
cp
1 1 1 rgb
f
394.532 389.957 mo
393.831 389.256 li
397.134 385.955 li
397.834 386.654 li
394.532 389.957 li
cp
f
389.83 374.849 mo
383.839 368.858 li
399.847 352.85 li
405.838 358.84 li
389.83 374.849 li
cp
.470588 .364706 .294118 rgb
f
419.045 404.063 mo
414.655 399.674 li
430.662 383.666 li
435.052 388.055 li
419.045 404.063 li
cp
f
394.532 362.742 mo
393.882 362.092 li
400.335 355.64 li
400.985 356.29 li
394.532 362.742 li
cp
1 1 1 rgb
f
426.949 390.857 mo
426.348 390.257 li
430.65 385.955 li
431.25 386.555 li
426.949 390.857 li
cp
f
351.736 431.202 mo
353.511 437.38 li
355.445 437.848 li
395.682 397.61 li
390.505 392.433 li
351.736 431.202 li
cp
.470588 .364706 .294118 rgb
f
453.522 420.934 mo
416.478 420.934 li
416.478 432.82 li
453.522 432.82 li
453.522 420.934 li
cp
f
457.484 432.254 mo
412.515 432.254 li
412.515 438.63 li
457.484 438.63 li
457.484 432.254 li
cp
.364706 .282353 .227451 rgb
f
434.436 407.71 mo
435.6 403.388 li
436.764 407.71 li
441.087 408.874 li
436.764 410.04 li
435.6 414.362 li
434.436 410.04 li
430.113 408.874 li
434.436 407.71 li
cp
1 1 1 rgb
f
442.768 424.612 mo
418.998 424.612 li
418.998 423.197 li
442.768 423.197 li
442.768 424.612 li
cp
f
463.214 417.687 mo
452.42 414.28 li
452.76 413.201 li
463.555 416.607 li
463.214 417.687 li
cp
.184314 .239216 .215686 rgb
f
460.79 399.475 mo
450.668 404.54 li
450.161 403.528 li
460.284 398.462 li
460.79 399.475 li
cp
f
449.248 386.163 mo
444.132 396.26 li
443.122 395.749 li
448.239 385.651 li
449.248 386.163 li
cp
f
311.124 466.529 mo
296.353 399.021 li
296.353 399.021 295.314 388.115 279.675 388.14 cv
279.675 388.14 268.129 355.757 265.056 347.382 cv
261.433 337.507 255.006 336.359 251.042 338.105 cv
242.602 341.837 243.642 344.783 261.23 392.951 cv
261.23 392.951 229.479 461.195 246.323 475.332 cv
263.165 489.47 269.264 499.844 269.264 499.844 cv
311.124 466.529 li
cp
.984314 .796078 .678431 rgb
f
gsave
311.124 466.529 mo
296.353 399.02 li
296.353 399.02 295.314 388.115 279.675 388.14 cv
279.675 388.14 268.129 355.757 265.056 347.382 cv
261.433 337.507 255.006 336.359 251.042 338.105 cv
242.602 341.837 243.642 344.783 261.23 392.951 cv
261.23 392.951 229.479 461.195 246.323 475.332 cv
263.165 489.47 269.264 499.844 269.264 499.844 cv
311.124 466.529 li
clp
261.614 448.604 mo
261.614 448.604 268.918 466.298 280.22 464.594 cv
252.316 480.605 li
252.316 480.605 242.295 480.432 241.043 470.583 cv
239.789 460.736 252.249 447.965 261.614 448.604 cv
cp
1 .756863 .6 rgb
f
grestore
274.337 218.347 mo
270.934 218.347 li
264.387 214.956 256.954 213.043 249.086 213.043 cv
248.876 213.043 248.667 213.044 248.457 213.047 cv
240.809 213.15 233.606 215.052 227.247 218.347 cv
223.841 218.347 li
231.106 214.242 239.475 211.854 248.408 211.738 cv
248.642 211.735 248.876 211.734 249.109 211.734 cv
258.266 211.734 266.877 214.134 274.337 218.347 cv
.552941 .686274 .639216 rgb
f
298.844 250.128 mo
296.8 250.128 li
295.069 248.397 li
291.604 235.295 282.696 224.437 270.934 218.347 cv
274.337 218.347 li
286.291 225.097 295.289 236.496 298.844 250.128 cv
202.699 250.128 mo
199.348 250.128 li
202.895 236.538 211.867 225.112 223.841 218.347 cv
227.247 218.347 li
214.949 224.718 205.807 236.294 202.699 250.128 cv
.784314 .784314 .784314 rgb
f
201.933 283.646 mo
199.287 277.566 197.782 270.87 197.691 263.825 cv
197.629 259.091 198.208 254.498 199.348 250.128 cv
202.699 250.128 li
202.437 251.294 202.219 252.476 202.044 253.672 cv
200.742 258.082 200.042 262.753 200.042 267.585 cv
200.042 272.28 200.702 276.822 201.933 281.121 cv
201.933 283.646 li
299.462 252.791 mo
296.8 250.128 li
298.844 250.128 li
299.073 251.007 299.279 251.895 299.462 252.791 cv
.87451 .87451 .87451 rgb
f
206.553 292.023 mo
206.501 291.947 206.448 291.869 206.397 291.793 cv
206.421 291.793 li
206.464 291.869 206.509 291.947 206.553 292.023 cv
.94902 .94902 .94902 rgb
f
206.421 291.793 mo
206.397 291.793 li
205.92 291.083 205.462 290.363 205.02 289.629 cv
205.02 289.142 li
205.461 290.042 205.927 290.925 206.421 291.793 cv
.623529 .623529 .623529 rgb
f
203.187 286.314 mo
202.744 285.439 202.326 284.549 201.933 283.646 cv
201.933 281.121 li
202.301 282.405 202.719 283.666 203.187 284.904 cv
203.187 286.314 li
.733333 .760784 .768627 rgb
f
205.02 289.629 mo
204.37 288.55 203.758 287.444 203.187 286.314 cv
203.187 284.904 li
203.733 286.35 204.345 287.765 205.02 289.142 cv
205.02 289.629 li
.490196 .505882 .513725 rgb
f
296.8 250.128 mo
295.492 250.128 li
295.362 249.548 295.22 248.969 295.069 248.397 cv
296.8 250.128 li
.67451 .67451 .67451 rgb
f
296.981 279.672 mo
296.65 279.672 li
297.629 275.807 298.15 271.756 298.15 267.585 cv
298.15 264.735 297.907 261.941 297.44 259.224 cv
297.44 258.468 li
297.438 258.468 li
297.304 258.468 li
296.998 256.836 296.61 255.233 296.146 253.662 cv
295.971 252.469 295.753 251.291 295.492 250.128 cv
296.8 250.128 li
299.462 252.791 li
300.103 255.923 300.459 259.162 300.502 262.477 cv
300.552 266.328 300.176 270.088 299.419 273.709 cv
298.726 275.736 297.914 277.725 296.981 279.672 cv
.74902 .74902 .74902 rgb
f
297.44 259.224 mo
297.439 259.219 297.439 259.217 297.438 259.212 cv
297.438 258.468 li
297.44 258.468 li
297.44 259.224 li
.584314 .607843 .611765 rgb
f
297.438 259.212 mo
297.396 258.965 297.351 258.714 297.304 258.468 cv
297.438 258.468 li
297.438 259.212 li
.631373 .654902 .662745 rgb
f
296.258 281.124 mo
296.396 280.642 296.527 280.16 296.65 279.672 cv
296.981 279.672 li
296.748 280.158 296.506 280.644 296.258 281.124 cv
f
249.753 314.548 mo
221.378 314.924 198.059 292.206 197.691 263.825 cv
197.318 235.435 220.017 212.105 248.408 211.738 cv
276.803 211.358 300.132 234.072 300.502 262.477 cv
300.868 290.851 278.16 314.188 249.753 314.548 cv
256.494 326.359 mo
287.406 321.472 313.545 294.525 313.136 262.306 cv
312.659 226.948 283.608 198.641 248.244 199.107 cv
212.899 199.572 184.591 228.628 185.063 263.989 cv
185.47 295.398 211.137 321.137 241.072 326.179 cv
241.103 328.244 li
256.516 327.884 li
256.494 326.359 li
.180392 .180392 .180392 rgb
f
244.349 349.681 mo
243.885 327.349 li
254.198 327.077 li
254.668 349.583 li
259.19 353.057 259.764 366.22 259.867 374.052 cv
261.075 460.439 li
261.237 471.912 259.357 481.208 251.363 481.283 cv
243.368 481.372 241.223 472.084 241.076 460.622 cv
239.861 374.238 li
239.755 366.414 239.924 353.259 244.349 349.681 cv
cp
f
270.934 218.347 mo
256.248 218.347 li
249.508 213.32 li
242.767 218.347 li
227.247 218.347 li
233.606 215.052 240.809 213.15 248.457 213.047 cv
248.667 213.044 248.876 213.043 249.086 213.043 cv
256.954 213.043 264.387 214.956 270.934 218.347 cv
.745098 .827451 .8 rgb
f
203.24 250.128 mo
202.699 250.128 li
205.807 236.294 214.949 224.718 227.247 218.347 cv
242.767 218.347 li
241.784 219.08 li
224.064 221.727 209.442 233.85 203.24 250.128 cv
295.069 248.397 mo
293.6 246.928 li
286.93 232.588 273.533 222.01 257.458 219.25 cv
256.248 218.347 li
270.934 218.347 li
282.696 224.437 291.604 235.295 295.069 248.397 cv
.886274 .886274 .886274 rgb
f
202.044 253.672 mo
202.219 252.476 202.437 251.294 202.699 250.128 cv
203.24 250.128 li
202.798 251.289 202.399 252.47 202.044 253.672 cv
.933333 .933333 .933333 rgb
f
295.492 250.128 mo
294.952 250.128 li
294.538 249.042 294.088 247.976 293.6 246.928 cv
295.069 248.397 li
295.22 248.969 295.362 249.548 295.492 250.128 cv
.819608 .819608 .819608 rgb
f
296.146 253.662 mo
295.792 252.464 295.393 251.286 294.952 250.128 cv
295.492 250.128 li
295.753 251.291 295.971 252.469 296.146 253.662 cv
.866667 .866667 .866667 rgb
f
257.458 219.25 mo
256.676 219.115 255.887 218.999 255.093 218.903 cv
249.508 214.738 li
244.07 218.793 li
243.302 218.872 242.541 218.967 241.784 219.08 cv
242.767 218.347 li
249.508 213.32 li
256.248 218.347 li
257.458 219.25 li
.917647 .917647 .917647 rgb
f
255.093 218.903 mo
253.127 218.663 251.123 218.54 249.092 218.54 cv
248.566 218.54 248.04 218.548 247.518 218.564 cv
251.084 215.916 li
249.508 214.741 li
244.074 218.793 li
244.07 218.793 li
249.508 214.738 li
255.093 218.903 li
.976471 .976471 .976471 rgb
f
244.074 218.793 mo
249.508 214.741 li
251.084 215.916 li
247.518 218.564 li
246.358 218.601 245.212 218.677 244.074 218.793 cv
.882353 .882353 .882353 rgb
f
249.059 314.553 mo
238.382 314.553 228.448 311.285 220.215 305.685 cv
223.893 305.685 li
231.282 309.156 239.307 310.908 247.348 310.908 cv
255.34 310.908 263.35 309.177 270.767 305.685 cv
277.969 305.685 li
269.918 311.161 260.222 314.415 249.753 314.548 cv
249.523 314.551 249.289 314.553 249.059 314.553 cv
.552941 .686274 .639216 rgb
f
277.969 305.685 mo
270.767 305.685 li
271.246 305.46 271.72 305.228 272.194 304.988 cv
278.969 304.988 li
278.639 305.224 278.305 305.457 277.969 305.685 cv
223.893 305.685 mo
220.215 305.685 li
219.879 305.457 219.545 305.224 219.215 304.988 cv
222.463 304.988 li
222.937 305.227 223.414 305.46 223.893 305.685 cv
.396078 .482353 .45098 rgb
f
211.699 298.427 mo
211.48 298.194 211.263 297.961 211.048 297.725 cv
211.573 297.725 li
211.616 297.761 211.656 297.795 211.699 297.832 cv
211.699 298.427 li
.831372 .831372 .831372 rgb
f
211.573 297.725 mo
211.048 297.725 li
210.405 297.017 209.78 296.291 209.177 295.549 cv
209.958 296.3 210.759 297.027 211.573 297.725 cv
284.263 297.711 mo
284.258 297.711 li
284.258 296.685 li
284.26 296.684 284.261 296.682 284.263 296.681 cv
284.263 297.711 li
.87451 .87451 .87451 rgb
f
287.14 297.719 mo
283.083 297.719 li
283.084 297.718 283.085 297.716 283.087 297.715 cv
284.258 297.715 li
284.258 297.711 li
284.263 297.711 li
284.263 296.681 li
285.552 295.515 286.773 294.301 287.926 293.046 cv
290.76 293.046 li
290.916 293.046 li
289.748 294.676 288.486 296.238 287.14 297.719 cv
.74902 .74902 .74902 rgb
f
290.916 293.046 mo
290.76 293.046 li
290.76 291.793 li
291.771 291.793 li
291.745 291.839 291.718 291.887 291.691 291.934 cv
291.437 292.309 291.18 292.678 290.916 293.046 cv
.811765 .811765 .811765 rgb
f
291.771 291.793 mo
290.76 291.793 li
290.76 289.702 li
292.555 287.405 294.142 284.997 295.524 282.498 cv
295.843 282.498 li
294.804 285.758 293.434 288.868 291.771 291.793 cv
.537255 .537255 .537255 rgb
f
290.76 293.046 mo
287.926 293.046 li
288.306 292.632 288.677 292.216 289.043 291.793 cv
290.76 291.793 li
290.76 293.046 li
296.187 281.371 mo
296.187 281.262 li
296.211 281.215 296.234 281.17 296.258 281.124 cv
296.235 281.205 296.211 281.289 296.187 281.371 cv
.631373 .654902 .662745 rgb
f
290.76 291.793 mo
289.043 291.793 li
289.634 291.108 290.208 290.409 290.76 289.702 cv
290.76 291.793 li
295.843 282.498 mo
295.524 282.498 li
295.75 282.088 295.972 281.675 296.187 281.262 cv
296.187 281.371 li
296.076 281.749 295.962 282.124 295.843 282.498 cv
.427451 .443137 .447059 rgb
f
284.258 297.715 mo
283.087 297.715 li
283.463 297.394 283.835 297.067 284.204 296.734 cv
284.222 296.718 284.24 296.701 284.258 296.685 cv
284.258 297.711 li
284.258 297.715 li
.952941 .952941 .952941 rgb
f
284.788 300.142 mo
280.039 300.142 li
281.073 299.376 282.09 298.568 283.083 297.719 cv
287.14 297.719 li
286.382 298.552 285.598 299.36 284.788 300.142 cv
214.609 300.142 mo
213.395 300.142 li
212.818 299.585 212.25 299.011 211.699 298.427 cv
211.699 297.832 li
212.647 298.638 213.619 299.409 214.609 300.142 cv
1 1 1 rgb
f
278.969 304.988 mo
272.194 304.988 li
274.905 303.614 277.53 301.999 280.039 300.142 cv
284.788 300.142 li
282.972 301.895 281.028 303.515 278.969 304.988 cv
222.463 304.988 mo
219.215 304.988 li
217.156 303.515 215.213 301.896 213.395 300.142 cv
214.609 300.142 li
217.112 301.995 219.739 303.61 222.463 304.988 cv
.905882 .905882 .901961 rgb
f
247.348 310.908 mo
239.307 310.908 231.282 309.156 223.893 305.685 cv
270.767 305.685 li
263.35 309.177 255.34 310.908 247.348 310.908 cv
.6 .717647 .67451 rgb
f
270.767 305.685 mo
223.893 305.685 li
223.414 305.46 222.937 305.227 222.463 304.988 cv
272.194 304.988 li
271.72 305.228 271.246 305.46 270.767 305.685 cv
.458824 .533333 .505882 rgb
f
211.699 297.832 mo
211.656 297.795 211.616 297.761 211.573 297.725 cv
211.699 297.725 li
211.699 297.832 li
.847059 .847059 .847059 rgb
f
216.939 250.128 mo
206.63 250.128 li
207.598 248.176 208.696 246.299 209.913 244.51 cv
210.892 245.765 li
210.896 245.762 li
211.537 246.581 li
213.911 246.581 li
213.911 248.405 li
216.939 248.405 li
216.939 250.128 li
288.649 244.901 mo
288.743 244.782 li
288.743 244.782 li
288.649 244.901 li
212.798 240.696 mo
217.529 235.052 223.551 230.52 230.417 227.557 cv
212.798 240.696 li
284.703 239.571 mo
269.399 228.156 li
275.247 230.9 280.447 234.802 284.703 239.571 cv
.807843 .807843 .807843 rgb
f
211.699 297.725 mo
211.573 297.725 li
210.759 297.027 209.958 296.3 209.177 295.549 cv
208.515 294.734 207.879 293.901 207.267 293.046 cv
211.699 293.046 li
211.699 282.498 li
211.699 279.672 li
201.933 279.672 li
201.933 281.121 li
200.702 276.822 200.042 272.28 200.042 267.585 cv
200.042 262.753 200.742 258.082 202.044 253.672 cv
201.686 256.13 201.515 258.648 201.549 261.211 cv
201.572 263.003 201.719 264.765 201.933 266.494 cv
201.933 271.842 li
205.02 271.842 li
211.699 271.842 li
211.699 261.294 li
211.699 258.468 li
203.437 258.468 li
204.243 255.567 205.315 252.78 206.63 250.128 cv
216.939 250.128 li
216.939 250.134 li
231.687 250.134 li
231.687 292.523 li
231.68 292.523 li
231.68 254.113 li
231.682 254.113 231.683 254.114 231.685 254.114 cv
231.685 250.15 li
231.68 250.15 li
231.68 250.134 li
217.571 250.134 li
217.571 292.523 li
216.171 292.523 li
216.171 294.645 li
214.561 294.645 li
214.561 297.715 li
234.685 297.715 li
234.685 297.679 li
234.69 297.679 li
234.69 297.715 li
234.685 297.715 li
234.685 297.719 li
211.699 297.719 li
211.699 297.725 li
264.128 297.715 mo
264.126 297.715 li
264.126 297.679 li
264.133 297.679 li
264.133 297.711 li
264.128 297.711 li
264.128 297.715 li
284.258 296.685 mo
284.258 294.645 li
282.653 294.645 li
282.653 292.527 li
282.659 292.527 li
282.659 294.639 li
284.263 294.639 li
284.263 296.681 li
284.261 296.682 284.26 296.684 284.258 296.685 cv
265.744 294.645 mo
265.462 294.645 li
265.462 294.645 li
265.744 294.645 li
265.744 294.645 li
233.356 294.645 mo
233.081 294.645 li
233.081 292.532 li
233.085 292.532 li
233.085 294.645 li
233.356 294.645 li
233.356 294.645 li
.886274 .886274 .886274 rgb
f
234.69 297.679 mo
234.685 297.679 li
234.685 294.645 li
233.356 294.645 li
233.356 294.645 li
234.69 294.645 li
234.69 297.679 li
.705882 .737255 .741176 rgb
f
264.133 297.679 mo
264.126 297.679 li
264.126 294.645 li
265.462 294.645 li
265.462 294.645 li
264.133 294.645 li
264.133 297.679 li
f
211.699 271.842 mo
205.02 271.842 li
205.02 270.588 li
210.444 270.588 li
210.444 261.294 li
211.699 261.294 li
211.699 271.842 li
.952941 .952941 .952941 rgb
f
210.444 270.588 mo
205.02 270.588 li
205.02 261.294 li
210.444 261.294 li
210.444 270.588 li
.662745 .662745 .662745 rgb
f
211.699 293.046 mo
207.267 293.046 li
207.025 292.708 206.787 292.367 206.553 292.023 cv
206.509 291.947 206.464 291.869 206.421 291.793 cv
210.444 291.793 li
210.444 282.498 li
211.699 282.498 li
211.699 293.046 li
.952941 .952941 .952941 rgb
f
210.444 291.793 mo
206.421 291.793 li
205.927 290.925 205.461 290.042 205.02 289.142 cv
205.02 282.498 li
210.444 282.498 li
210.444 291.793 li
.662745 .662745 .662745 rgb
f
205.02 271.842 mo
201.933 271.842 li
201.933 266.494 li
201.935 266.504 201.936 266.515 201.937 266.526 cv
202.208 263.765 202.715 261.071 203.437 258.468 cv
211.699 258.468 li
211.699 261.294 li
210.444 261.294 li
210.444 259.722 li
203.187 259.722 li
203.187 270.588 li
205.02 270.588 li
205.02 271.842 li
.760784 .784314 .792157 rgb
f
205.02 270.588 mo
203.187 270.588 li
203.187 259.722 li
210.444 259.722 li
210.444 261.294 li
205.02 261.294 li
205.02 270.588 li
.541176 .556863 .564706 rgb
f
203.187 284.904 mo
202.719 283.666 202.301 282.405 201.933 281.121 cv
201.933 279.672 li
211.699 279.672 li
211.699 282.498 li
210.444 282.498 li
210.444 280.926 li
203.187 280.926 li
203.187 284.904 li
.760784 .784314 .792157 rgb
f
205.02 289.142 mo
204.345 287.765 203.733 286.35 203.187 284.904 cv
203.187 280.926 li
210.444 280.926 li
210.444 282.498 li
205.02 282.498 li
205.02 289.142 li
.541176 .556863 .564706 rgb
f
264.126 297.715 mo
259.47 297.715 li
259.47 297.679 li
264.126 297.679 li
264.126 297.715 li
239.346 297.715 mo
234.69 297.715 li
234.69 297.679 li
239.346 297.679 li
239.346 297.715 li
265.744 294.645 mo
265.462 294.645 li
265.462 281.109 li
265.462 279.246 264.706 277.571 263.493 276.356 cv
262.277 275.143 260.602 274.387 258.74 274.387 cv
257.941 274.387 257.176 274.526 256.466 274.781 cv
256.466 254.114 li
256.466 254.114 256.467 254.114 256.467 254.114 cv
256.467 250.15 li
256.466 250.15 li
242.357 250.15 li
242.352 250.15 li
242.352 254.196 li
242.354 254.196 242.356 254.195 242.357 254.195 cv
242.357 274.783 li
241.647 274.527 240.88 274.387 240.078 274.387 cv
236.361 274.387 233.356 277.394 233.356 281.109 cv
233.356 294.645 li
233.085 294.645 li
233.085 292.532 li
233.081 292.532 li
233.081 292.523 li
231.687 292.523 li
231.687 250.133 li
267.142 250.134 li
267.142 250.15 li
267.138 250.15 li
267.138 254.196 li
267.14 254.196 267.141 254.195 267.142 254.195 cv
267.142 292.523 li
267.144 292.523 li
265.744 292.523 li
265.744 294.645 li
.776471 .776471 .776471 rgb
f
239.346 297.679 mo
234.69 297.679 li
234.69 294.645 li
233.356 294.645 li
233.356 281.109 li
233.356 277.394 236.361 274.387 240.078 274.387 cv
240.88 274.387 241.647 274.527 242.357 274.783 cv
242.357 292.539 li
240.956 292.539 li
240.956 294.661 li
239.346 294.661 li
239.346 297.679 li
.627451 .647059 .65098 rgb
f
264.126 297.679 mo
259.47 297.679 li
259.47 294.661 li
257.867 294.661 li
257.867 292.539 li
256.466 292.539 li
256.466 274.781 li
257.176 274.526 257.941 274.387 258.74 274.387 cv
260.602 274.387 262.277 275.143 263.493 276.356 cv
264.706 277.571 265.462 279.246 265.462 281.109 cv
265.462 294.645 li
264.126 294.645 li
264.126 297.679 li
f
291.841 250.128 mo
282.168 250.128 li
282.168 248.405 li
284.907 248.405 li
284.907 246.581 li
287.334 246.581 li
288.649 244.901 li
288.743 244.782 li
289.886 246.488 290.923 248.274 291.841 250.128 cv
.705882 .705882 .705882 rgb
f
283.083 297.719 mo
264.133 297.719 li
264.133 297.715 li
264.128 297.715 li
264.128 297.711 li
264.133 297.711 li
264.133 297.715 li
283.087 297.715 li
283.085 297.716 283.084 297.718 283.083 297.719 cv
284.263 296.681 mo
284.263 294.639 li
282.659 294.639 li
282.659 292.527 li
282.653 292.527 li
282.653 292.523 li
281.245 292.523 li
281.25 292.523 li
281.25 254.113 li
281.251 254.114 281.251 254.114 281.252 254.114 cv
281.252 250.15 li
281.25 250.15 li
281.25 250.134 li
282.168 250.134 li
282.168 250.128 li
291.841 250.128 li
293.154 252.777 294.227 255.566 295.032 258.468 cv
287.674 258.468 li
287.674 271.842 li
290.76 271.842 li
297.438 271.842 li
297.438 261.294 li
297.44 261.294 li
297.44 259.224 li
297.907 261.941 298.15 264.735 298.15 267.585 cv
298.15 271.756 297.629 275.807 296.65 279.672 cv
287.674 279.672 li
287.674 293.046 li
287.926 293.046 li
286.773 294.301 285.552 295.515 284.263 296.681 cv
297.304 258.468 mo
296.601 258.468 li
296.529 256.843 296.376 255.24 296.146 253.662 cv
296.61 255.233 296.998 256.836 297.304 258.468 cv
.776471 .776471 .776471 rgb
f
297.438 271.842 mo
290.76 271.842 li
290.76 270.588 li
296.187 270.588 li
296.187 263.816 li
296.263 264.301 296.331 264.79 296.392 265.281 cv
296.528 263.967 296.615 262.638 296.64 261.294 cv
297.438 261.294 li
297.438 271.842 li
.831372 .831372 .831372 rgb
f
296.187 270.588 mo
290.76 270.588 li
290.76 261.294 li
295.723 261.294 li
295.899 262.126 296.054 262.967 296.187 263.816 cv
296.187 270.588 li
.584314 .584314 .584314 rgb
f
290.76 289.702 mo
290.76 282.498 li
295.524 282.498 li
294.142 284.997 292.555 287.405 290.76 289.702 cv
f
297.44 261.294 mo
297.438 261.294 li
297.438 259.212 li
297.439 259.217 297.439 259.219 297.44 259.224 cv
297.44 261.294 li
.627451 .647059 .65098 rgb
f
290.76 271.842 mo
287.674 271.842 li
287.674 258.468 li
295.032 258.468 li
295.147 258.884 295.257 259.301 295.361 259.722 cv
288.927 259.722 li
288.927 270.588 li
290.76 270.588 li
290.76 271.842 li
297.438 261.294 mo
296.64 261.294 li
296.648 260.853 296.649 260.411 296.644 259.966 cv
296.637 259.465 296.623 258.966 296.601 258.468 cv
297.304 258.468 li
297.351 258.714 297.396 258.965 297.438 259.212 cv
297.438 261.294 li
.670588 .690196 .698039 rgb
f
290.76 270.588 mo
288.927 270.588 li
288.927 259.722 li
295.361 259.722 li
295.49 260.242 295.611 260.767 295.723 261.294 cv
290.76 261.294 li
290.76 270.588 li
.486274 .498039 .501961 rgb
f
287.926 293.046 mo
287.674 293.046 li
287.674 279.672 li
296.65 279.672 li
296.527 280.16 296.396 280.642 296.258 281.124 cv
296.234 281.17 296.211 281.215 296.187 281.262 cv
296.187 280.926 li
288.927 280.926 li
288.927 291.793 li
289.043 291.793 li
288.677 292.216 288.306 292.632 287.926 293.046 cv
.670588 .690196 .698039 rgb
f
289.043 291.793 mo
288.927 291.793 li
288.927 280.926 li
296.187 280.926 li
296.187 281.262 li
295.972 281.675 295.75 282.088 295.524 282.498 cv
290.76 282.498 li
290.76 289.702 li
290.208 290.409 289.634 291.108 289.043 291.793 cv
.486274 .498039 .501961 rgb
f
281.25 292.523 mo
281.245 292.523 li
267.144 292.523 li
267.142 292.523 li
267.142 254.195 li
267.211 254.171 267.279 254.146 267.348 254.123 cv
267.348 289.935 li
267.348 290.718 267.554 291.35 267.807 291.35 cv
268.063 291.35 268.267 290.718 268.267 289.935 cv
268.267 253.833 li
268.62 253.731 268.978 253.638 269.343 253.554 cv
269.343 289.935 li
269.343 290.718 269.734 291.35 270.22 291.35 cv
270.705 291.35 271.098 290.718 271.098 289.935 cv
271.098 253.228 li
271.711 253.14 272.337 253.077 272.973 253.041 cv
272.973 253.042 272.973 253.044 272.973 253.046 cv
272.973 289.935 li
272.973 290.718 273.521 291.35 274.198 291.35 cv
274.876 291.35 275.422 290.718 275.422 289.935 cv
275.422 253.046 li
275.422 253.04 275.422 253.035 275.422 253.029 cv
275.991 253.056 276.553 253.105 277.104 253.173 cv
277.104 289.935 li
277.104 290.718 277.517 291.35 278.029 291.35 cv
278.538 291.35 278.95 290.718 278.95 289.935 cv
278.95 253.482 li
279.319 253.561 279.681 253.648 280.037 253.744 cv
280.037 289.935 li
280.037 290.718 280.237 291.35 280.49 291.35 cv
280.739 291.35 280.944 290.718 280.944 289.935 cv
280.944 254.012 li
281.047 254.045 281.149 254.079 281.25 254.113 cv
281.25 292.523 li
281.25 250.15 mo
267.142 250.15 li
267.142 250.134 li
281.25 250.134 li
281.25 250.15 li
1 1 1 rgb
f
210.259 244.009 mo
211.057 242.867 211.904 241.762 212.798 240.696 cv
230.417 227.557 li
231.684 227.01 232.977 226.518 234.298 226.081 cv
210.259 244.009 li
287.591 243.138 mo
265.166 226.415 li
266.61 226.928 268.023 227.511 269.399 228.156 cv
284.703 239.571 li
285.721 240.712 286.685 241.902 287.591 243.138 cv
.858823 .858823 .858823 rgb
f
287.334 246.581 mo
284.907 246.581 li
213.911 246.581 li
211.537 246.581 li
210.896 245.762 li
239.19 224.75 li
241.104 224.338 243.059 224.041 245.053 223.866 cv
220.777 241.976 li
220.786 241.976 li
220.781 241.979 li
224.049 241.979 li
224.054 241.976 li
278.242 241.976 li
254.035 223.919 li
257.899 224.305 261.627 225.156 265.166 226.415 cv
287.591 243.138 li
287.986 243.677 288.37 244.226 288.743 244.782 cv
288.649 244.901 li
287.334 246.581 li
210.259 244.009 mo
210.259 244.009 li
234.298 226.081 li
234.3 226.08 234.301 226.08 234.303 226.079 cv
210.259 244.009 li
.956863 .956863 .956863 rgb
f
278.242 241.976 mo
224.054 241.976 li
248.165 223.694 li
248.316 223.691 248.466 223.688 248.617 223.686 cv
248.831 223.683 249.048 223.682 249.262 223.682 cv
250.872 223.682 252.465 223.762 254.035 223.919 cv
278.242 241.976 li
220.786 241.976 mo
220.777 241.976 li
245.053 223.866 li
245.055 223.866 li
220.786 241.976 li
.917647 .917647 .917647 rgb
f
282.168 250.134 mo
281.25 250.134 li
267.142 250.134 li
231.687 250.134 li
216.939 250.134 li
216.939 250.128 li
216.939 248.405 li
282.168 248.405 li
282.168 250.128 li
282.168 250.134 li
f
234.685 297.715 mo
214.561 297.715 li
214.561 294.645 li
216.171 294.645 li
216.171 292.523 li
217.571 292.523 li
231.68 292.523 li
231.687 292.523 li
233.081 292.523 li
233.081 292.532 li
233.081 294.645 li
233.356 294.645 li
234.685 294.645 li
234.685 297.679 li
234.685 297.715 li
.956863 .956863 .956863 rgb
f
283.087 297.715 mo
264.133 297.715 li
264.133 297.711 li
264.133 297.679 li
264.133 294.645 li
265.462 294.645 li
265.744 294.645 li
265.744 294.645 li
265.744 292.523 li
267.144 292.523 li
281.245 292.523 li
282.653 292.523 li
282.653 292.527 li
282.653 294.645 li
284.258 294.645 li
284.258 296.685 li
284.24 296.701 284.222 296.718 284.204 296.734 cv
283.835 297.067 283.463 297.394 283.087 297.715 cv
f
231.68 292.523 mo
217.571 292.523 li
217.571 250.134 li
231.68 250.134 li
231.68 250.15 li
217.571 250.15 li
217.571 254.196 li
217.64 254.172 217.71 254.147 217.78 254.123 cv
217.78 289.935 li
217.78 290.718 217.985 291.35 218.238 291.35 cv
218.493 291.35 218.697 290.718 218.697 289.935 cv
218.697 253.834 li
219.049 253.732 219.408 253.639 219.773 253.555 cv
219.773 289.935 li
219.773 290.718 220.164 291.35 220.651 291.35 cv
221.136 291.35 221.531 290.718 221.531 289.935 cv
221.531 253.228 li
222.143 253.14 222.768 253.078 223.403 253.041 cv
223.403 253.043 223.403 253.044 223.403 253.046 cv
223.403 289.935 li
223.403 290.718 223.95 291.35 224.627 291.35 cv
225.305 291.35 225.852 290.718 225.852 289.935 cv
225.852 253.046 li
225.852 253.04 225.852 253.034 225.852 253.029 cv
226.421 253.056 226.983 253.104 227.534 253.173 cv
227.534 289.935 li
227.534 290.718 227.947 291.35 228.459 291.35 cv
228.968 291.35 229.381 290.718 229.381 289.935 cv
229.381 253.482 li
229.749 253.56 230.111 253.648 230.468 253.744 cv
230.468 289.935 li
230.468 290.718 230.668 291.35 230.921 291.35 cv
231.17 291.35 231.374 290.718 231.374 289.935 cv
231.374 254.012 li
231.477 254.045 231.579 254.078 231.68 254.113 cv
231.68 292.523 li
1 1 1 rgb
f
274.198 291.35 mo
273.521 291.35 272.973 290.718 272.973 289.935 cv
272.973 253.046 li
272.973 253.044 272.973 253.042 272.973 253.041 cv
273.414 253.015 273.861 253.002 274.312 253.002 cv
274.685 253.002 275.055 253.011 275.422 253.029 cv
275.422 253.035 275.422 253.04 275.422 253.046 cv
275.422 289.935 li
275.422 290.718 274.876 291.35 274.198 291.35 cv
.941176 .941176 .941176 rgb
f
278.029 291.35 mo
277.517 291.35 277.104 290.718 277.104 289.935 cv
277.104 253.173 li
277.733 253.251 278.349 253.354 278.95 253.482 cv
278.95 289.935 li
278.95 290.718 278.538 291.35 278.029 291.35 cv
f
280.49 291.35 mo
280.237 291.35 280.037 290.718 280.037 289.935 cv
280.037 253.744 li
280.345 253.827 280.647 253.917 280.944 254.012 cv
280.944 289.935 li
280.944 290.718 280.739 291.35 280.49 291.35 cv
f
267.807 291.35 mo
267.554 291.35 267.348 290.718 267.348 289.935 cv
267.348 254.123 li
267.649 254.019 267.956 253.923 268.267 253.833 cv
268.267 289.935 li
268.267 290.718 268.063 291.35 267.807 291.35 cv
f
270.22 291.35 mo
269.734 291.35 269.343 290.718 269.343 289.935 cv
269.343 253.554 li
269.915 253.423 270.5 253.314 271.098 253.228 cv
271.098 289.935 li
271.098 290.718 270.705 291.35 270.22 291.35 cv
f
224.627 291.35 mo
223.95 291.35 223.403 290.718 223.403 289.935 cv
223.403 253.046 li
223.403 253.044 223.403 253.043 223.403 253.041 cv
223.845 253.015 224.292 253.002 224.743 253.002 cv
225.116 253.002 225.486 253.011 225.852 253.029 cv
225.852 253.034 225.852 253.04 225.852 253.046 cv
225.852 289.935 li
225.852 290.718 225.305 291.35 224.627 291.35 cv
f
228.459 291.35 mo
227.947 291.35 227.534 290.718 227.534 289.935 cv
227.534 253.173 li
228.163 253.251 228.779 253.354 229.381 253.482 cv
229.381 289.935 li
229.381 290.718 228.968 291.35 228.459 291.35 cv
f
230.921 291.35 mo
230.668 291.35 230.468 290.718 230.468 289.935 cv
230.468 253.744 li
230.775 253.827 231.077 253.916 231.374 254.012 cv
231.374 289.935 li
231.374 290.718 231.17 291.35 230.921 291.35 cv
f
218.238 291.35 mo
217.985 291.35 217.78 290.718 217.78 289.935 cv
217.78 254.123 li
218.08 254.02 218.386 253.923 218.697 253.834 cv
218.697 289.935 li
218.697 290.718 218.493 291.35 218.238 291.35 cv
f
220.651 291.35 mo
220.164 291.35 219.773 290.718 219.773 289.935 cv
219.773 253.555 li
220.345 253.423 220.932 253.314 221.531 253.228 cv
221.531 289.935 li
221.531 290.718 221.136 291.35 220.651 291.35 cv
f
280.039 300.142 mo
264.133 300.142 li
264.133 297.719 li
283.083 297.719 li
282.09 298.568 281.073 299.376 280.039 300.142 cv
234.685 300.142 mo
214.609 300.142 li
213.619 299.409 212.647 298.638 211.699 297.832 cv
211.699 297.725 li
211.699 297.719 li
234.685 297.719 li
234.685 300.142 li
1 1 1 rgb
f
272.194 304.988 mo
222.463 304.988 li
219.739 303.61 217.112 301.995 214.609 300.142 cv
234.685 300.142 li
264.133 300.142 li
280.039 300.142 li
277.53 301.999 274.905 303.614 272.194 304.988 cv
234.685 300.142 mo
234.685 302.569 li
264.133 302.569 li
264.133 300.142 li
234.685 300.142 li
.913725 .913725 .913725 rgb
f
210.892 245.765 mo
209.913 244.51 li
209.914 244.509 li
210.896 245.762 li
210.892 245.765 li
.67451 .67451 .67451 rgb
f
210.896 245.762 mo
209.914 244.509 li
210.027 244.342 210.143 244.175 210.259 244.009 cv
234.303 226.079 li
235.895 225.553 237.527 225.108 239.19 224.75 cv
210.896 245.762 li
.8 .8 .8 rgb
f
224.049 241.979 mo
220.781 241.979 li
220.786 241.976 li
224.054 241.976 li
224.049 241.979 li
f
224.054 241.976 mo
220.786 241.976 li
245.055 223.866 li
246.082 223.776 247.119 223.718 248.165 223.694 cv
224.054 241.976 li
.768627 .768627 .768627 rgb
f
264.133 300.142 mo
234.685 300.142 li
234.685 297.719 li
234.685 297.715 li
234.69 297.715 li
239.346 297.715 li
239.346 297.73 li
259.47 297.73 li
259.47 297.715 li
264.126 297.715 li
264.128 297.715 li
264.133 297.715 li
264.133 297.719 li
264.133 300.142 li
1 1 1 rgb
f
264.133 302.569 mo
234.685 302.569 li
234.685 300.142 li
264.133 300.142 li
264.133 302.569 li
.956863 .956863 .956863 rgb
f
259.47 297.73 mo
239.346 297.73 li
239.346 297.715 li
239.346 297.679 li
239.346 294.661 li
240.956 294.661 li
240.956 292.539 li
242.357 292.539 li
256.466 292.539 li
257.867 292.539 li
257.867 294.661 li
259.47 294.661 li
259.47 297.679 li
259.47 297.715 li
259.47 297.73 li
f
256.466 292.539 mo
242.357 292.539 li
242.357 274.783 li
242.357 254.195 li
242.426 254.17 242.495 254.146 242.565 254.122 cv
242.565 289.95 li
242.565 290.733 242.77 291.365 243.025 291.365 cv
243.278 291.365 243.483 290.733 243.483 289.95 cv
243.483 253.832 li
243.835 253.731 244.195 253.638 244.559 253.554 cv
244.559 289.95 li
244.559 290.733 244.95 291.365 245.435 291.365 cv
245.921 291.365 246.316 290.733 246.316 289.95 cv
246.316 253.228 li
246.929 253.14 247.554 253.077 248.19 253.04 cv
248.19 253.047 248.19 253.054 248.19 253.061 cv
248.19 289.95 li
248.19 290.733 248.737 291.365 249.414 291.365 cv
250.092 291.365 250.637 290.733 250.637 289.95 cv
250.637 253.061 li
250.637 253.051 250.636 253.04 250.636 253.029 cv
251.206 253.056 251.769 253.105 252.321 253.173 cv
252.321 289.95 li
252.321 290.733 252.733 291.365 253.246 291.365 cv
253.754 291.365 254.166 290.733 254.166 289.95 cv
254.166 253.483 li
254.534 253.561 254.897 253.649 255.254 253.745 cv
255.254 289.95 li
255.254 290.733 255.454 291.365 255.706 291.365 cv
255.955 291.365 256.16 290.733 256.16 289.95 cv
256.16 254.013 li
256.263 254.046 256.365 254.08 256.466 254.114 cv
256.466 274.781 li
256.466 292.539 li
1 1 1 rgb
f
249.414 291.365 mo
248.737 291.365 248.19 290.733 248.19 289.95 cv
248.19 253.061 li
248.19 253.054 248.19 253.047 248.19 253.04 cv
248.631 253.015 249.077 253.002 249.527 253.002 cv
249.9 253.002 250.269 253.011 250.636 253.029 cv
250.636 253.04 250.637 253.051 250.637 253.061 cv
250.637 289.95 li
250.637 290.733 250.092 291.365 249.414 291.365 cv
.913725 .913725 .913725 rgb
f
253.246 291.365 mo
252.733 291.365 252.321 290.733 252.321 289.95 cv
252.321 253.173 li
252.949 253.251 253.565 253.355 254.166 253.483 cv
254.166 289.95 li
254.166 290.733 253.754 291.365 253.246 291.365 cv
f
255.706 291.365 mo
255.454 291.365 255.254 290.733 255.254 289.95 cv
255.254 253.745 li
255.561 253.828 255.863 253.917 256.16 254.013 cv
256.16 289.95 li
256.16 290.733 255.955 291.365 255.706 291.365 cv
f
243.025 291.365 mo
242.77 291.365 242.565 290.733 242.565 289.95 cv
242.565 254.122 li
242.866 254.019 243.171 253.922 243.483 253.832 cv
243.483 289.95 li
243.483 290.733 243.278 291.365 243.025 291.365 cv
f
245.435 291.365 mo
244.95 291.365 244.559 290.733 244.559 289.95 cv
244.559 253.554 li
245.131 253.422 245.718 253.313 246.316 253.228 cv
246.316 289.95 li
246.316 290.733 245.921 291.365 245.435 291.365 cv
f
242.352 254.196 mo
242.352 250.15 li
242.357 250.15 li
242.357 254.195 li
242.356 254.195 242.354 254.196 242.352 254.196 cv
256.467 254.114 mo
256.467 254.114 256.466 254.114 256.466 254.114 cv
256.466 250.15 li
256.467 250.15 li
256.467 254.114 li
.643137 .666667 .670588 rgb
f
242.357 254.195 mo
242.357 250.15 li
256.466 250.15 li
256.466 254.114 li
256.365 254.08 256.263 254.046 256.16 254.013 cv
256.16 253.061 li
256.16 252.28 255.955 251.645 255.706 251.645 cv
255.454 251.645 255.254 252.28 255.254 253.061 cv
255.254 253.745 li
254.897 253.649 254.534 253.561 254.166 253.483 cv
254.166 253.061 li
254.166 252.28 253.754 251.645 253.246 251.645 cv
252.733 251.645 252.321 252.28 252.321 253.061 cv
252.321 253.173 li
251.769 253.105 251.206 253.056 250.636 253.029 cv
250.621 252.263 250.082 251.645 249.414 251.645 cv
248.743 251.645 248.2 252.269 248.19 253.04 cv
247.554 253.077 246.929 253.14 246.316 253.228 cv
246.316 253.061 li
246.316 252.28 245.921 251.645 245.435 251.645 cv
244.95 251.645 244.559 252.28 244.559 253.061 cv
244.559 253.554 li
244.195 253.638 243.835 253.731 243.483 253.832 cv
243.483 253.061 li
243.483 252.28 243.278 251.645 243.025 251.645 cv
242.77 251.645 242.565 252.28 242.565 253.061 cv
242.565 254.122 li
242.495 254.146 242.426 254.17 242.357 254.195 cv
.815686 .843137 .85098 rgb
f
248.19 253.04 mo
248.2 252.269 248.743 251.645 249.414 251.645 cv
250.082 251.645 250.621 252.263 250.636 253.029 cv
250.269 253.011 249.9 253.002 249.527 253.002 cv
249.077 253.002 248.631 253.015 248.19 253.04 cv
.74902 .776471 .780392 rgb
f
254.166 253.483 mo
253.565 253.355 252.949 253.251 252.321 253.173 cv
252.321 253.061 li
252.321 252.28 252.733 251.645 253.246 251.645 cv
253.754 251.645 254.166 252.28 254.166 253.061 cv
254.166 253.483 li
f
256.16 254.013 mo
255.863 253.917 255.561 253.828 255.254 253.745 cv
255.254 253.061 li
255.254 252.28 255.454 251.645 255.706 251.645 cv
255.955 251.645 256.16 252.28 256.16 253.061 cv
256.16 254.013 li
f
242.565 254.122 mo
242.565 253.061 li
242.565 252.28 242.77 251.645 243.025 251.645 cv
243.278 251.645 243.483 252.28 243.483 253.061 cv
243.483 253.832 li
243.171 253.922 242.866 254.019 242.565 254.122 cv
f
244.559 253.554 mo
244.559 253.061 li
244.559 252.28 244.95 251.645 245.435 251.645 cv
245.921 251.645 246.316 252.28 246.316 253.061 cv
246.316 253.228 li
245.718 253.313 245.131 253.422 244.559 253.554 cv
f
231.685 254.114 mo
231.683 254.114 231.682 254.113 231.68 254.113 cv
231.68 250.15 li
231.685 250.15 li
231.685 254.114 li
.729412 .752941 .760784 rgb
f
217.571 254.196 mo
217.571 250.15 li
231.68 250.15 li
231.68 254.113 li
231.579 254.078 231.477 254.045 231.374 254.012 cv
231.374 253.046 li
231.374 252.265 231.17 251.63 230.921 251.63 cv
230.668 251.63 230.468 252.265 230.468 253.046 cv
230.468 253.744 li
230.111 253.648 229.749 253.56 229.381 253.482 cv
229.381 253.046 li
229.381 252.265 228.968 251.63 228.459 251.63 cv
227.947 251.63 227.534 252.265 227.534 253.046 cv
227.534 253.173 li
226.983 253.104 226.421 253.056 225.852 253.029 cv
225.844 252.255 225.3 251.63 224.627 251.63 cv
223.952 251.63 223.406 252.262 223.403 253.041 cv
222.768 253.078 222.143 253.14 221.531 253.228 cv
221.531 253.046 li
221.531 252.265 221.136 251.63 220.651 251.63 cv
220.164 251.63 219.773 252.265 219.773 253.046 cv
219.773 253.555 li
219.408 253.639 219.049 253.732 218.697 253.834 cv
218.697 253.046 li
218.697 252.265 218.493 251.63 218.238 251.63 cv
217.985 251.63 217.78 252.265 217.78 253.046 cv
217.78 254.123 li
217.71 254.147 217.64 254.172 217.571 254.196 cv
.815686 .843137 .85098 rgb
f
223.403 253.041 mo
223.406 252.262 223.952 251.63 224.627 251.63 cv
225.3 251.63 225.844 252.255 225.852 253.029 cv
225.486 253.011 225.116 253.002 224.743 253.002 cv
224.292 253.002 223.845 253.015 223.403 253.041 cv
.768627 .8 .803922 rgb
f
229.381 253.482 mo
228.779 253.354 228.163 253.251 227.534 253.173 cv
227.534 253.046 li
227.534 252.265 227.947 251.63 228.459 251.63 cv
228.968 251.63 229.381 252.265 229.381 253.046 cv
229.381 253.482 li
f
231.374 254.012 mo
231.077 253.916 230.775 253.827 230.468 253.744 cv
230.468 253.046 li
230.468 252.265 230.668 251.63 230.921 251.63 cv
231.17 251.63 231.374 252.265 231.374 253.046 cv
231.374 254.012 li
f
217.78 254.123 mo
217.78 253.046 li
217.78 252.265 217.985 251.63 218.238 251.63 cv
218.493 251.63 218.697 252.265 218.697 253.046 cv
218.697 253.834 li
218.386 253.923 218.08 254.02 217.78 254.123 cv
f
219.773 253.555 mo
219.773 253.046 li
219.773 252.265 220.164 251.63 220.651 251.63 cv
221.136 251.63 221.531 252.265 221.531 253.046 cv
221.531 253.228 li
220.932 253.314 220.345 253.423 219.773 253.555 cv
f
267.138 254.196 mo
267.138 250.15 li
267.142 250.15 li
267.142 254.195 li
267.141 254.195 267.14 254.196 267.138 254.196 cv
.643137 .666667 .670588 rgb
f
281.252 254.114 mo
281.251 254.114 281.251 254.114 281.25 254.113 cv
281.25 250.15 li
281.252 250.15 li
281.252 254.114 li
f
267.142 254.195 mo
267.142 250.15 li
281.25 250.15 li
281.25 254.113 li
281.149 254.079 281.047 254.045 280.944 254.012 cv
280.944 253.046 li
280.944 252.265 280.739 251.63 280.49 251.63 cv
280.237 251.63 280.037 252.265 280.037 253.046 cv
280.037 253.744 li
279.681 253.648 279.319 253.561 278.95 253.482 cv
278.95 253.046 li
278.95 252.265 278.538 251.63 278.029 251.63 cv
277.517 251.63 277.104 252.265 277.104 253.046 cv
277.104 253.173 li
276.553 253.105 275.991 253.056 275.422 253.029 cv
275.414 252.255 274.871 251.63 274.198 251.63 cv
273.523 251.63 272.976 252.262 272.973 253.041 cv
272.337 253.077 271.711 253.14 271.098 253.228 cv
271.098 253.046 li
271.098 252.265 270.705 251.63 270.22 251.63 cv
269.734 251.63 269.343 252.265 269.343 253.046 cv
269.343 253.554 li
268.978 253.638 268.62 253.731 268.267 253.833 cv
268.267 253.046 li
268.267 252.265 268.063 251.63 267.807 251.63 cv
267.554 251.63 267.348 252.265 267.348 253.046 cv
267.348 254.123 li
267.279 254.146 267.211 254.171 267.142 254.195 cv
.815686 .843137 .85098 rgb
f
272.973 253.041 mo
272.976 252.262 273.523 251.63 274.198 251.63 cv
274.871 251.63 275.414 252.255 275.422 253.029 cv
275.055 253.011 274.685 253.002 274.312 253.002 cv
273.861 253.002 273.414 253.015 272.973 253.041 cv
.768627 .8 .803922 rgb
f
278.95 253.482 mo
278.349 253.354 277.733 253.251 277.104 253.173 cv
277.104 253.046 li
277.104 252.265 277.517 251.63 278.029 251.63 cv
278.538 251.63 278.95 252.265 278.95 253.046 cv
278.95 253.482 li
f
280.944 254.012 mo
280.647 253.917 280.345 253.827 280.037 253.744 cv
280.037 253.046 li
280.037 252.265 280.237 251.63 280.49 251.63 cv
280.739 251.63 280.944 252.265 280.944 253.046 cv
280.944 254.012 li
f
267.348 254.123 mo
267.348 253.046 li
267.348 252.265 267.554 251.63 267.807 251.63 cv
268.063 251.63 268.267 252.265 268.267 253.046 cv
268.267 253.833 li
267.956 253.923 267.649 254.019 267.348 254.123 cv
f
269.343 253.554 mo
269.343 253.046 li
269.343 252.265 269.734 251.63 270.22 251.63 cv
270.705 251.63 271.098 252.265 271.098 253.046 cv
271.098 253.228 li
270.5 253.314 269.915 253.423 269.343 253.554 cv
f
284.907 248.405 mo
282.168 248.405 li
216.939 248.405 li
213.911 248.405 li
213.911 246.581 li
284.907 246.581 li
284.907 248.405 li
.85098 .858823 .862745 rgb
f
249.092 316.638 mo
230.899 316.638 215.021 306.735 206.553 292.023 cv
206.787 292.367 207.025 292.708 207.267 293.046 cv
207.879 293.901 208.515 294.734 209.177 295.549 cv
209.78 296.291 210.405 297.017 211.048 297.725 cv
211.263 297.961 211.48 298.194 211.699 298.427 cv
212.25 299.011 212.818 299.585 213.395 300.142 cv
213.395 300.142 li
215.213 301.896 217.156 303.515 219.215 304.988 cv
219.545 305.224 219.879 305.457 220.215 305.685 cv
228.448 311.285 238.382 314.553 249.059 314.553 cv
249.289 314.553 249.523 314.551 249.753 314.548 cv
260.222 314.415 269.918 311.161 277.969 305.685 cv
278.305 305.457 278.639 305.224 278.969 304.988 cv
281.028 303.515 282.972 301.895 284.788 300.142 cv
284.788 300.142 li
285.598 299.36 286.382 298.552 287.14 297.719 cv
288.486 296.238 289.748 294.676 290.916 293.046 cv
291.18 292.678 291.437 292.309 291.691 291.934 cv
283.235 306.694 267.327 316.638 249.092 316.638 cv
.262745 .262745 .262745 rgb
f
206.63 250.128 mo
203.24 250.128 li
209.442 233.85 224.064 221.727 241.784 219.08 cv
230.417 227.557 li
223.551 230.52 217.529 235.052 212.798 240.696 cv
208.183 244.137 li
208.893 245.036 li
209.793 244.356 li
210.259 244.009 li
210.259 244.009 li
209.793 244.356 li
209.913 244.51 li
208.696 246.299 207.598 248.176 206.63 250.128 cv
293.6 246.928 mo
290.738 244.065 li
290.024 244.984 li
289.59 244.643 li
290.021 244.978 li
290.732 244.068 li
284.703 239.571 li
280.447 234.802 275.247 230.9 269.399 228.156 cv
257.458 219.25 li
273.533 222.01 286.93 232.588 293.6 246.928 cv
288.743 244.782 mo
288.743 244.782 li
289.131 244.287 li
287.591 243.138 li
287.591 243.138 li
289.131 244.287 li
289.131 244.287 li
288.743 244.782 li
.898039 .898039 .898039 rgb
f
201.933 266.494 mo
201.719 264.765 201.572 263.003 201.549 261.211 cv
201.515 258.648 201.686 256.13 202.044 253.672 cv
202.399 252.47 202.798 251.289 203.24 250.128 cv
206.63 250.128 li
205.315 252.78 204.243 255.567 203.437 258.468 cv
201.933 258.468 li
201.933 266.494 li
.941176 .941176 .941176 rgb
f
201.937 266.526 mo
201.936 266.515 201.935 266.504 201.933 266.494 cv
201.933 258.468 li
203.437 258.468 li
202.715 261.071 202.208 263.765 201.937 266.526 cv
.870588 .882353 .890196 rgb
f
294.952 250.128 mo
291.841 250.128 li
290.923 248.274 289.886 246.488 288.743 244.782 cv
289.131 244.287 li
289.59 244.643 li
290.024 244.984 li
290.738 244.065 li
293.6 246.928 li
294.088 247.976 294.538 249.042 294.952 250.128 cv
.839216 .839216 .839216 rgb
f
296.601 258.468 mo
295.032 258.468 li
294.227 255.566 293.154 252.777 291.841 250.128 cv
294.952 250.128 li
295.393 251.286 295.792 252.464 296.146 253.662 cv
296.376 255.24 296.529 256.843 296.601 258.468 cv
.878431 .878431 .878431 rgb
f
296.392 265.281 mo
296.331 264.79 296.263 264.301 296.187 263.816 cv
296.187 261.294 li
296.64 261.294 li
296.615 262.638 296.528 263.967 296.392 265.281 cv
.913725 .913725 .913725 rgb
f
296.187 263.816 mo
296.054 262.967 295.899 262.126 295.723 261.294 cv
296.187 261.294 li
296.187 263.816 li
.760784 .760784 .760784 rgb
f
296.64 261.294 mo
296.187 261.294 li
296.187 259.722 li
295.361 259.722 li
295.257 259.301 295.147 258.884 295.032 258.468 cv
296.601 258.468 li
296.623 258.966 296.637 259.465 296.644 259.966 cv
296.649 260.411 296.648 260.853 296.64 261.294 cv
.815686 .827451 .835294 rgb
f
296.187 261.294 mo
295.723 261.294 li
295.611 260.767 295.49 260.242 295.361 259.722 cv
296.187 259.722 li
296.187 261.294 li
.690196 .701961 .701961 rgb
f
208.893 245.036 mo
208.183 244.137 li
212.798 240.696 li
211.904 241.762 211.057 242.867 210.259 244.009 cv
209.793 244.356 li
208.893 245.036 li
290.021 244.978 mo
289.59 244.643 li
289.131 244.287 li
289.131 244.287 li
287.591 243.138 li
286.685 241.902 285.721 240.712 284.703 239.571 cv
290.732 244.068 li
290.021 244.978 li
269.399 228.156 mo
268.023 227.511 266.61 226.928 265.166 226.415 cv
255.093 218.903 li
255.887 218.999 256.676 219.115 257.458 219.25 cv
269.399 228.156 li
230.417 227.557 mo
241.784 219.08 li
242.541 218.967 243.302 218.872 244.07 218.793 cv
234.298 226.081 li
232.977 226.518 231.684 227.01 230.417 227.557 cv
.92549 .92549 .92549 rgb
f
288.743 244.782 mo
288.37 244.226 287.986 243.677 287.591 243.138 cv
289.131 244.287 li
288.743 244.782 li
209.793 244.356 mo
209.793 244.356 li
210.259 244.009 li
210.259 244.009 li
209.793 244.356 li
265.166 226.415 mo
261.627 225.156 257.899 224.305 254.035 223.919 cv
249.508 220.542 li
245.053 223.866 li
243.059 224.041 241.104 224.338 239.19 224.75 cv
247.518 218.564 li
248.04 218.548 248.566 218.54 249.092 218.54 cv
251.123 218.54 253.127 218.663 255.093 218.903 cv
265.166 226.415 li
234.298 226.081 mo
244.07 218.793 li
244.074 218.793 li
234.303 226.079 li
234.301 226.08 234.3 226.08 234.298 226.081 cv
.980392 .980392 .980392 rgb
f
254.035 223.919 mo
252.465 223.762 250.872 223.682 249.262 223.682 cv
249.048 223.682 248.831 223.683 248.617 223.686 cv
248.466 223.688 248.316 223.691 248.165 223.694 cv
250.925 221.602 li
249.508 220.542 li
245.055 223.866 li
245.053 223.866 li
249.508 220.542 li
254.035 223.919 li
.956863 .956863 .956863 rgb
f
209.913 244.51 mo
209.793 244.356 li
209.914 244.509 li
209.913 244.51 li
.819608 .819608 .819608 rgb
f
209.914 244.509 mo
209.793 244.356 li
210.259 244.009 li
210.143 244.175 210.027 244.342 209.914 244.509 cv
234.303 226.079 mo
244.074 218.793 li
245.212 218.677 246.358 218.601 247.518 218.564 cv
239.19 224.75 li
237.527 225.108 235.895 225.553 234.303 226.079 cv
.894118 .894118 .894118 rgb
f
245.055 223.866 mo
249.508 220.542 li
250.925 221.602 li
248.165 223.694 li
247.119 223.718 246.082 223.776 245.055 223.866 cv
.878431 .878431 .878431 rgb
f
261.959 399.994 mo
243.011 349.037 242.905 341.703 251.042 338.105 cv
255.006 336.359 261.433 337.507 265.056 347.382 cv
267.281 353.448 273.951 372.1 277.457 381.928 cv
271.177 382.943 267.805 397.329 261.959 399.994 cv
cp
.984314 .796078 .678431 rgb
f
252.33 338.316 mo
254.357 337.767 259.669 338.438 260.973 342.337 cv
262.077 345.639 260.292 346.304 260.292 346.304 cv
255.659 347.91 li
251.028 349.52 li
251.028 349.52 249.213 350.104 248.034 346.827 cv
246.641 342.959 248.681 339.304 252.33 338.316 cv
cp
1 .87451 .768627 rgb
f
255.252 369.019 mo
255.362 369.318 255.695 369.472 255.996 369.36 cv
268.325 364.823 li
268.625 364.71 268.779 364.377 268.667 364.078 cv
268.555 363.777 268.224 363.624 267.925 363.734 cv
255.596 368.273 li
255.296 368.384 255.141 368.717 255.252 369.019 cv
cp
1 .756863 .6 rgb
f
257.394 370.079 mo
257.504 370.38 257.781 370.555 258.012 370.471 cv
267.507 366.975 li
267.74 366.888 267.838 366.576 267.729 366.276 cv
267.616 365.976 267.338 365.803 267.106 365.887 cv
257.612 369.38 li
257.38 369.468 257.283 369.779 257.394 370.079 cv
cp
f
256.201 366.846 mo
256.313 367.146 256.591 367.321 256.823 367.235 cv
266.317 363.739 li
266.55 363.654 266.647 363.339 266.535 363.041 cv
266.425 362.741 266.147 362.564 265.917 362.65 cv
256.421 366.146 li
256.189 366.233 256.09 366.543 256.201 366.846 cv
cp
f
260.395 394.797 mo
260.395 394.797 253.333 448.02 267.46 457.979 cv
281.587 467.935 277.941 451.672 277.941 451.672 cv
260.395 394.797 li
cp
.984314 .796078 .678431 rgb
f
227.186 447.623 mo
228.489 462.843 li
228.489 462.843 243.774 474.463 246.534 475.739 cv
249.295 477.012 251.604 465.284 243.524 458.448 cv
235.441 451.614 227.186 447.623 227.186 447.623 cv
cp
.980392 .788235 .631373 rgb
f
gsave
227.186 447.623 mo
228.489 462.843 li
228.489 462.843 243.774 474.463 246.533 475.739 cv
249.295 477.012 251.604 465.284 243.524 458.448 cv
235.441 451.614 227.186 447.623 227.186 447.623 cv
clp
227.186 447.625 mo
227.186 454.646 li
227.186 454.646 246.419 461.699 249.714 473.796 cv
251.598 480.716 255.586 452.291 241.907 447.625 cv
228.226 442.957 227.186 447.625 227.186 447.625 cv
cp
1 .756863 .6 rgb
f
grestore
227.914 429.395 mo
225.64 439.896 li
225.64 439.896 220.757 444.223 231.995 452.631 cv
243.433 461.19 247.157 462.843 246.405 451.064 cv
245.705 440.024 235.394 435.749 227.914 429.395 cv
cp
f
gsave
228.009 428.243 mo
225.64 439.897 li
225.64 439.897 221.618 443.949 232.57 453.122 cv
243.524 462.294 247.157 462.843 246.405 451.064 cv
245.705 440.024 235.491 434.598 228.009 428.243 cv
clp
226.61 435.414 mo
226.61 435.414 248.963 447.937 248.963 458.221 cv
248.964 468.505 253.769 442.755 253.769 442.755 cv
226.61 421.837 li
226.61 435.414 li
cp
1 .756863 .6 rgb
f
grestore
230.034 407.125 mo
226.206 420.323 li
226.206 420.323 223.464 424.231 230.497 432.024 cv
237.447 439.719 245.75 449.52 246.369 435.414 cv
246.988 421.308 241.975 416.416 236.004 412.985 cv
230.034 409.556 230.034 407.125 230.034 407.125 cv
cp
f
gsave
230.034 407.125 mo
226.206 420.323 li
226.206 420.323 223.47 424.308 230.034 432.331 cv
236.597 440.358 245.75 449.52 246.369 435.414 cv
246.988 421.308 241.975 416.416 236.004 412.985 cv
230.034 409.556 230.034 407.125 230.034 407.125 cv
clp
246.231 437.194 mo
246.231 437.194 242.372 422.228 227.794 415.852 cv
227.794 415.852 228.001 407.131 231.867 405.561 cv
235.73 403.993 259.908 414.404 246.231 437.194 cv
cp
1 .756863 .6 rgb
f
grestore
241.792 386.651 mo
230.034 399.539 li
230.034 399.539 225.628 401.919 231.691 411.037 cv
237.749 420.153 245.173 425.447 246.369 412.985 cv
247.563 400.529 241.907 401.364 241.907 401.364 cv
241.792 386.651 li
cp
f
241.907 401.364 mo
231.867 397.53 li
241.792 386.651 li
241.907 401.364 li
cp
1 .756863 .6 rgb
f
gsave
241.792 386.651 mo
230.034 399.539 li
230.034 399.539 225.628 401.919 231.691 411.037 cv
237.749 420.153 245.173 425.447 246.369 412.985 cv
247.563 400.529 241.907 401.364 241.907 401.364 cv
241.792 386.651 li
clp
246.289 413.7 mo
246.289 413.7 239.692 399.298 231.867 397.53 cv
224.041 395.765 237.779 376.57 242.096 382.489 cv
246.409 388.406 252.808 411.14 246.289 413.7 cv
cp
f
grestore
240.043 411.364 mo
244.926 417.125 241.37 420.243 240.488 420.855 cv
239.343 419.985 237.652 418.448 235.151 415.762 cv
238.078 411.817 240.043 411.364 240.043 411.364 cv
cp
1 .87451 .768627 rgb
f
242.961 467.726 mo
247.748 470.982 245.763 474.019 245.235 474.65 cv
244.211 474.244 242.644 473.454 240.247 471.983 cv
241.601 468.463 242.961 467.726 242.961 467.726 cv
cp
f
239.886 451.464 mo
245.561 455.329 243.207 458.923 242.581 459.673 cv
241.368 459.191 239.512 458.254 236.67 456.511 cv
238.275 452.342 239.886 451.464 239.886 451.464 cv
cp
f
240.447 432.894 mo
245.483 438.84 241.816 442.056 240.908 442.688 cv
239.725 441.792 237.977 440.206 235.397 437.437 cv
238.418 433.359 240.447 432.894 240.447 432.894 cv
cp
f
255.216 492.395 mo
260.598 500 li
344.871 500 li
317.705 459.474 li
255.216 492.395 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 21.0.2
%%For: (Lisa Taiga) ()
%%Title: (4.eps)
%%CreationDate: 11/13/2017 5:09 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB7&XZdcgXWSnJ'*3+E@t%ZY(4@iOS^5_)N>-HtoEL\J:8Wbt7aD0^><!AA*2bX,1,Y3N0me0SgX5%XFlAYW7"R=D;l@[n!e
%#pL#qA2tnj^\r)"Ib-R.])tTO>iHLG`g#Jq`/5=V`[pePHE28<0hZi%Rl23tVn3^:s3t5G,HV<fBV?BYd4g%\V&EO:%bE!#`2B-Q
%cuWfsWV&SUS0:/sM-PGUKr]_(IO9%0Bs.i9K&5eo7mNQ&Ha]./%LGu&BBehXY8Z5'8*_%)lQLkYaZYKD0'I/3rW'mf67i%;Jfd>t
%]qY0=4Z[2r`Ia/a8-hdT6hrW,]&Y=I#%G[r`qi';Z&/Xfs28%;^PhgZ'7T(1Hq9pjS=F,/%#uN&0]+)PbZPadD[&JJ&n)Dcn6Bn?
%)d6#blc*pB>eu\_E=<Ks#J]#[^e2sbQC'YLi\F/c)WtLVPrR(i3X9"<`Bne#>Q8-q^TW?7Ffh`hXCY+LH3N>)=?_jUn?3!ZlSnI]
%7Eao2r(.$gdM4btbBa9OFYD&u1pY+BEQPs2`js["l93KjZdHes=UQ\(.*);KU%VDTojb*innl'_DI*rF@k>j$,_Xf0kW6nF8k<M]
%>Vi2%aY:](kZLTK.[!$u2JF&\kl_\Uh_D-#CQ2>&$Rr)dl0;$a.(cJd<#,6?&L+B&ri5[!McZ"Qf@*q^o.9X#54U*b'0du)d+MG[
%D)QA?](e,dlJ@,`cnMNOYO34t)j'9m/QiA;l.CXsN#!'*m=31K2s';"d>&ff3bH.?f;b4QrGO,f2N)nFctMYeqI>?Z)@7u-R+CO#
%DKb=7Fg%l^mY6a;7Q^/Id6_.-Q"kq^/a2(8I&WHYAd;;>*6K()i!WFKo+=%PBI/`W^,n;?#f<T`D#*$no%!_XOR'`k!:qfD$I-#.
%kRFlc+\_EX:crH*/Zn&,R_;<Xi"li'eKp'.HLEm+9i1489FIQR?^+=u4?iuf9'b$C($Mc?f:bsS\t#NP'Ga6-IQ!*r_rs!!H="Z!
%W0:(nk_5YbSfVQsdorMT<'+9qAs>W]:;:!@SXX6/Tg%O]LNDp&j<qSqi3`.K:+P4roCI-)$Xn!>0U_R%0cnTMC=l)Hj!9U^.$9o8
%2MV5ZB,h:AL83CZS1P[f&Du19+6!u`f>(i;)T>K1.Sb'(BL/:&.eJ^lmd;C-fu@,M<2aMJSSV@HZf$u\T>7XUrDkKCWCLG9qIAK)
%#@'e16^1U6F(c#s>ot(.6i956B8dIX'3aS^-U4_gQMtPU>4?#1Au9&Pq`Pr.fa8iK3ur/LVc5Gjjc81A(gL`s%h,i:,Q?0hM.4A`
%9.'11T#`u+=tRMqXfDDY+'PFX>uDi_OML-%jHeAm\A4:=HY#TC-MO*pNHS$C@Qt[T-jPh@O[^W*1]Ousmk(;9L-N[^KV&95pc1AI
%==/h82;P4^H3#:r&]\+Ghi2Z[(-icGD^?7@j(8sOrD)nS\`i6_8DaMCL5e0ubnas1cc%>J>s6fe?i,/M'P-M=i/^JimW6KRrFWdn
%dsgLHgm&\$<&1l*6I1/fkB#%^":pD>6"KRqO%MCe>^a]!9)@`1dAoHrb9?k/\7RtbqX^(F5Q=D0&'#d<rCE6N@.lZ.I>?sH!J7+J
%O<CM[3]28N6&uRh>OQ6e?N^qZ731L($*l2P)+=MAE$O6n,R<XuX=V/1q*ePMguNM\<\o%JZp%4G`[[5eVQ&?-Q(+XkIoW"Q.Q<Kh
%>^un,KP#6*m.iK%)lHB4da;HO)oni'S`XtQAFub0gbb@ek&M-+b<_GXdXUJ?6;8u"^OM/OWu1R?ZCPAiN-i8`I'7oFO?!9"I##:^
%;BYc>N^#d$d-[)Sq@A4#c3=WG^$)5SX4ZXNkGeGm<]\AO?q9O,]8"m/]eA2da3=Y7XW58DPt1&2K#eMA4dAP$T7Up@Z+"%OV:*n@
%+7+^ghWoG2gI1K#!5/s"I]&p*oKl,b"K>Q!d7:$N%?/0.9<gm&:&2KrIQlocT0ItM8F`Q(iGXR(/aN63Hi%Cf/(,s^5fZ.TIREF3
%s(IlR]bNr:\!N%I^u4d[buV<OI7ZWsOpOiBn?+AjJ.DJp?rHtD@9tSkP%*4I'5Xnl#[X,?AW1V<)Qhk)YTh$.Y@F>8D:M"s^J8=d
%'A2i6]aOd^LB1a5fmMmT@(]KVdW1q_ST9[Y"UG[[eG0*&JOlP6XT5N+rgoWD);)3S-gO(lG^Y6L4NKRr=,?Fh+H5%@I\/uJX^h!<
%9t_?2R#1Bp?O0rWhD[?O*k>R*l5]iTjH#dKrCWp\.u%T!$[SUmW]JGd6q08S2qn"2O'g&K[***.a2Z_WRF7tc89K%QcN#=*j57p'
%c;/nc0Mp*>[#aHY'o/@R0n%A3VQtc6a89Io=b)3oQrD3O8iH*TM2_ab(.(MA)uUnAK8hkUW7UCCC\VGV!3TuDdu^R!)H5\hSSecC
%E\#8]GYO1L=4\_k/UC"'JH[Y13&@!CC\84qb;@?N5/CO/JX0a22b"@V0e"&o$/u"6o\TQI4kJ/0q^pM#"8DMMXg+6-a"uZb.!VrA
%aLc):hKq!2RkF[rDKGrK.uFAWC1<og+Ms(c<hBe>`0@E=Xd7flkRI*7N$'KCD_;omHtNK*!P^8EgIk$&D)+Sih9\bT^Ad4bCJUbL
%ESk%9HLm9lIJeIeai>NtS;fMZ7V(l!;h-XQ`0g4p#35imGt^[qr=;,EF-JSC^)643eJW<&(2,;>IB*U`f5`(-pCX(t0ek"+LbSl$
%Xrk./(-k_I*O?WZ6][n"C+Zj5n(Q+^+rS.9p9[R[mA-,E&h/?^n-J.bIS=;I<4i80;$k>I=L4`.%:nr[]MXO60Nu%'TPqQ?2+mZ'
%c2\KfW1t!*A[VZ)9smluhs>j>?/a6p&+Z[;$=N[VArs7I*1[KYS`I'W<i91\nF_r1f#BurfuaFO#j!1ije>kP&u-)D8%`:f)St.b
%)^EWZ[$K)J[)#gm'aNXS_/(i;g5.R#$!QRTFeT!NAl?bf'ASEWBGng=@skITP]-K:^`X.=S+`RYZ;#[C7V=>#`UuoL01pcAE^G(L
%r\KRV!d[^9hl.D<LbR:aP\Den^Ys%DAM4Df+6Z-"A44Go4&('!`\jK^p7dM*I1*Ctj1a'YCG/<E48#<N&S=parBGR"1Pn7PJ_'B"
%<b%A03S=qh$e4,m?&?[MI`US$`%U4]PT5(Ok8,K>ShfBk0Mh^fKkM+tf6;S7oXB59:QVmKpO:9/e?45=Y";R(2RR<6@+PJDl-uk1
%mFpDq[KDV*\G#mFRZ7dQc)fVU>+8^'03GVrYVrn('4B@fZ.d^-"gVn"';;<9S8XJCPQ[A*^O%4f;$VX#D=mL<,YtmHJ16k'UZj]-
%l&<]:_uSVL<9UYR%>c.];+4soRJ1Wj(k:b/PD8f&Ba"/mNghX?Xg27f>495,danfUf!Sg2d%0bLgefZr2gh4?B-q3d0UFM?QqOoJ
%O)t,%SE[pr7fP0/n+e(?2TTd)J1%%4oVVHPPlH^jTo<S\6L6bRKNJicAO>m1*BqAjfAVM3YIV\bF;`/$T(k'YU!`U\mGbmBk`2N)
%2pdK&-`2_bQoP,b2Z@]&NcEtSmkQl%a$sE"g)L']jNV;klp;bbn%WM5rh_gtV'/CadS6MP#Z)nK^Xo(9>ms+>=^iC:LA0d$ahWoj
%F:KE\OH!QgiB@dX%e#tUq.($``E%u3GLSZCYL_3M5s36lHHEr?bXD9J?hEj,DrDrhnK?hLCHK5YDgJ>=o_`oZrqf\EIHS?iGjsY$
%l14KEGC'6M4obI,U.eqV0g5Q-T)\dGX7M=rInB9g-bp_.*\`bIT)"C\`FR1#>LPCcl'_#4bkJ0]nPa?_bhkWlOG6W7o`-.9_FIQ0
%=Id287MZaB#RZM_V;KhPAd^Ac<fg&Jk)(mZNc+VY^aIh4YX]Hd">Js9:'G+ZTOR`Ea5$BJ];N'Dru3tp^_0?lACCn=pf,<93TXtC
%Cg&0TQH?"81-8tC-81>V<b4%TKrnE<]&$VG-rF=V7r2/LocJqAd!P(!]tA6+[+;kPg=,oO-m%OaTUMi=i*4!CP6Z;Bej0TbPP1p%
%m.]@`je0rTfpF!:dprlMV]TB\1t(6F$r&PgXh\cteK0[sGHM`VM[s<'I-A$3&d3r[?ZtVJphH?GH1m:W"PeRnP]&2mR=G>9MTtN)
%$F+M&R20,+KpQN4AQj>H(1*klQYGF?Q`SIk._Jkp(0YsfW\C7J1+g.tE<\HU]R6RF1:dbUqt0]C9`_5$,s2iH62FIh5P>hKDu.,'
%mrKlD0/"3&dP=Pj_^9st+CNtH2A,"9%HIGlM'2+<IFuKQAU;,;><KXedjBZj%$&)PC`'i!c$6_S5';lqlr_9`3DQ3b1j+iY^7C_h
%`JM[D-HJ,@T>:*4T"suPFe(^EC&7Iu;5rf0juGkaRT;=rT>%,`]A8_oi2KZ(]CNuh,aeA]f`Sl8ZM^:'olXC70fmhl,"$miXV.H"
%hB$0F^!'*FX7pQlFS'T=P<<Q+5#5_e0BN7aATbb#1,*Sro*^UF->-2Q);6o7)nugK++B188>M*Iir%tK"Gmd^(a]G#,"S@d_Dm\>
%R/fS'oO*)k%cYRJ&V>i1]29'f`+e1)lPO,n#tWN+`WYB['48dV^-NbaL^_`n`n4n7PIBYPFc:#TA)(*s>0!#]0rB)P0rngVZp8J0
%hu0(UoFJFFN(/U'jf"#]#Rh@Wn._7af%"g^rO&i<8jT37!W8'[7KPE>[ee6rWMf\#F;)%uGuR,<bX0Y>Q/8S'phBneGA]5=al^J^
%Q#N"K#4pS/2N8ig3RI(UQ-:C9[asHMS,I:'TV4XEZdLRt6)#*G2C_;4i?OP<poVYf@aam'6^.,/+XS8gPsIPhLfZB&-cPh-=OQhE
%8OK&3rN)gB'n<sgfUuSOpc7eeMZ!bSOi]-]#)Yaf4n5+-oH_NSE$O5A?bOQs=t'>S;>rA*;V0,V]m#h=,W0uRl-(%:QEMDTN-iGY
%o=Z'V!f?O+B_^kD^%bXYGinmhirer99WR]LCh$>%msUMnr/FnX.-&b_cfKc3]P0:uD[SDHk,-he1n/h>RgTeY9XD;"&7M$PNLr2Z
%Ci1H'\H%[jR*]@rJ7R,>DOcm#?e\aA:$8D<gbbRkVK:4.mMi'F=/K-'G-iARII)$c)#FcJ\R7a_HTig+YC%sa3<+tcm^p/8,!aR4
%I3?GkoBq,fcqh_ui$SH6'%?#R:7j$kJ^9SuTlAo0Gl9E/a;@XfX9%PqIG+I#Z([HJlQHTjgKM__rEK_0hX1#c2M+oV/A+jE?,1[,
%:Wu!0.*n]*UDtc?7.-eB$Sh'UkM)7\s4RR&`r=dSh`<g^P/j8n^R&f,m.]W??41jVHc(/PG3gH#kZsRl$V$t5!?Tm&]p:Ej[`J?g
%K4I9#=,aD+FO(aq>+dRpLHR,d!q]Z=qjiUFdY!G=8"V-4InPa9YAp*M^D-Ub[,:dI-W5IB%d=Gt(9fpf_&\r#j9(b_m8'M1%s4K'
%@#di#i`J_?9V,T+5%P/^6P"eiO0/=P7YhX9ZiZS.1cL0:gb^c'lcA!W0=%.9kTIrVph\'YJ$dId*[lkiHc[+;&N6t&8<Vh91(B,<
%6.%=oMP`,U5L)g9g;=RE'RfNEl=96l^Ki#_(\T;=^Ud.n$R7"1fH%bifACpkO*<;iBoI\PqKk1c);*?Y&7cf5m.:&Z[s8N&hWqB7
%aWQProR<G3<iom(C/$k<WsU2r7g:VCO2$0\(qgU-GW1>H3l`su/E?.<K,E]iGE+u?@HniQa\GS/i^Dj2;r@?jI,cJQOJa`N*7pkH
%f,4>*=cZq4`C+IZpNd#;Vp?-H_un]]r/fUr45ZnG-<d$*R-5XF8g24N1[L;-q0^H.`ut4l,>Niu++)VI"'9\2ki/%!cdgNq>_)#'
%9TkY`\+:Sf,hR@2M=22KIFgu:r;&M77_+:$rYZTYn*lEt=Fdbfm%9I2l`*W'&L[T3h%)Tih*8^dRJ9+12YO0Em5jS4b2/P:6P;LR
%5bZJQg!dCE`BhTKXNfCe"?+?Ud3g]@p+B<p]*Tj%(JT9BrLFoYlIpALn)TGQ0.Q*Xih8%B$;g$VBuPgU)79D,_]I?C'.1FpM(@1r
%Q-L`)N5Xfh':PrSjJ^bWA?$M/2.i&JAZ:eMLQE2TDg=P8BWZ.uaI<m`;!5S/eVnp<p?ek%?bX'^+poDkWmO;ae'c:@eKHM_a[Td/
%iVZ](S[MZ"RMO(R`5*6sJi'+TA!s62X6dJ-M82L^4WU#o';.[`0bgtP.D9K']YFC<^Z.6J9qf=m2#?][T"McC(eU+=U)lpLqV>?=
%88Dp>]bAP4b/!%M5DJC*Bs#c:WmkHZW9:&2=G;8%V:q$'=!OEK`=N=6BBL(ep'uR#_0[.k808PhOoI3Gq<RkJch"?ghiaO:!M9YS
%L&H8C14O5)Dn%6_OtF!T;A9j&k8:RZDHSYa5BI-CQ$@n0X6dPWCFNQ<N)kb/j=JhK)-/>ZQ/S&EH<R<IouhrGQI<?6aZ!2>XQps8
%`/u^4I)eQ[))0)b-YDg@0:AK%Ab%??[&1jl_05eK\,S1VIJEF9Yhrl#6V!i^#:<FL%=UFW+5stGUlYC+"?UqO6d+/Q0KALGd-?J=
%km`n.e^.O^:ZgYH)$gD\#[@oQ4KQ.?hWOfH1"'[7gc'QJM;Z/D+&WDMlb>5sJ=;'1*a6/=lId8*.po_k3JN4C$-`Qa>\4gMO[DfI
%iY>%Jn,oR\W^&bhSAN/K<ag6<)tMrk_nj'[>O8##3?3Hobo2.,JJRA51;Pj$5P.hqR@uk!0.\*IflmGJ+;B7n)XW.(Cc>Uo:"@VT
%Zc,..X&*0_P,`I0d8!gU,f*AW7YD:-Y6mDk`:>Z2,)#&[;,YL@;,BX3aY,(jCF^dCZc=F0EDYTC4RVHT5BihZoNk=k_OVC_?5$;+
%@u3#l9=L;4!";&i$nI.>`Ttt.),TPj3om[:+[Tf'qG3VYrsumCn"_dVp6Ml&'-43Is5#;A6p&4*rc@/KRkX[-pBLU<CdN)LOZl@I
%'C/?Lf-5u;QlVg]]j3dYneVBCLdfFHKqHVafg&I8cPrVh5i3Ns@QJ"bqG"ZRb@j&+QMIFY)h8k0^\T]<!-lqs+[<`6g]4XDhY^Sg
%rh33Gb<k?`50P56T9^6rh5;>uVn;qB$44fK_l)U-LRYIHlblR6`7CP.g47d/96L3^Vr84_Ct+`T&?oiTn1D&?hmEKpTJHbbG>+e=
%+K-+TT2^]_5:I[$lLRffVS^-DN'KHLa@_Lu&\`,sep[`\$]$kc$BK4nqV@ar*!>g,93$)9X'n8M4r!^!E)$9ip.aN;rnN!mTC91Q
%]9V9o5ee\^P'7j7l2-k<(rp.3+bj%DFKP)\\d)I20sTFe6"E.ol-h^c#Qm<36mRoj>bYUZ3@@LF??8:JZ3>R73T7f&kP=<fA*j?W
%]5eY2*lJhLHDQts(tHrni!;,W0,g<6K%NS>lBoEqmWcY^i82J*O/Cd_aq.tZ"3d]nS!hs8<@%sIEuo-!@]]*`HRp+Vl7EPap"Q0-
%X]=b(<BYG5[ejq9!kQEN%:(W^nm6XPH*]GT`ZCi/2W>L<@"Cp^UZ7N6>>/fL[^,Lf4]Yc;QO!7o[r(gC05bO\\gqQ:09khtbg;d/
%mHGYO:ONd;\Yk29>$LHK\jj$`E,R(BPlssk:9S>GST;f"D[TZ/:>h@\O[<<Okg#&2MS/^J/fX(8V#ekof#,M1[ar9-WJ%8lUC:u<
%)47:6r(hT\a7mde."n]R+erhio]SP>-^B=FZ0O!J<&a\;@+o]:k>R,9*SoBaT5s9eApmpSFS)`mq4WShofmbrCt\#d7AF;`lk"]$
%8;VO]gFAiH>!KB3_4=qW1C`(W3LGeth?(qF_t??fJqp["ORXR/>B:L?-s5\,LWSn0FNo"q^>E_Db^FNR0H]MC:Z83OHlkt9oN`fU
%^gHh$s#FVuQr(a6Ui"GIq*XVXYs@&lCEpJ.F9mf0+*smk92a7X)L5l5)o_;Q;ed.d=@:;/rrB1%JdC2+L?73,HgQ^ja"r[#]K\K?
%mnUb'7aCXL^X;^kAqq<c<9Uegeo$;6$A@uY\-'_W(W0Eg<.iZ6L.W.@e:6\A:S\-DD\t&he0QK]h=oK:^mQ#2`idmF<J9?(c<dA@
%INIqP*Sa#gUbu!EI+VbaF&W2\g3+=7&81"Z7cSf80@t,!D#Loo4#hHRlOYcsO-j+OB7sYnZu3\TkeW:,@p`C,W;rfc4oiJO4%lS5
%COQ<n[<9pQYQIqq$(XibO.O[SH*eeb_CD1(]MFHaP)n6VU:LSd"7,[CT^a\F:g<W\fK`$OYjH"V:,][;SE2$AZ>4ZNmZ-qFd;O=>
%_aD@TYrKDg,:b'u?FI0f"j>u.?IJeBH?VSPm(Ba'kIrfrrG'Mt%8"WSO\Kc%,mG'7Nq8AAhL/*$:8<)+>NY%kB3s4L&q#Z)T:>bO
%9mfUZSrePBdsLa-3IF1BW-5;S\\RKg=c@R?%X#@o8\2)h7d\cdFqIc]5/>Vi*oTb-1d3&f/f8)L2h#cYch?$'`Df(BDIYJj#P0_u
%D<d_PPi_mAiV(OU?E7Oi4Ecc'<0e[Gm,*3#Wl'"PGO#f4+75TEep!LOm:rsK0;:$S/!Y@oX+OCqVTfn-$&mbHe^QYQ/m^u1b<Z7+
%r[9sX?`V&J'gj"gM-QY>3#o?\CX>N!4"]@@I3UXZQKbp1"Tab?jj,r#Q^co<)D,<dp3,TQSN&b[pg@c'ZA/>YX43*_+]YN;Zi7e6
%*_`nAF/7rQUZ05%dE5A]CaTtObGHRdQ)#65BAZoJ*5noqNK7*?OIE<[*_lu!FOr`I+5gk8QKag5[n92qlq!g3(id:+KPVD\[eq"H
%V;Ea+o/#5rs(KG;;%LGrgZAD>$Nq;P/&!:4&N/=8Om@HO+@]M&hZ1>_X(6[`\:B.hpIC+n.E?ds.ld^:bYZK6GiZ<u\:).?b%c=6
%;1cJj1r6W@4.]=rbJl9MqZslJ^8X(#Z=%jUn_/ah8BtF1>QV59-GLNMrX<@!&-I+4;$FV:2'f#F9AQrr47`bbD%Q1'j>T-Vbr6=?
%.?UXG-SE!3GE$@\>L+.`X,]7n=s^lnBbF+C!Vm:(lP>Id;epkr+qQi_/Gn_fmnI-1Cr(_sYV,R1/6$[!Ls`p-U[UsIrBu8C?0Y6=
%S=m>^R`%DPUB:=tAp4/qe(C@-,]Ff&0,V,@IK\K<[82&5QJ.>HceobN!En)GY(_rg[CRIK'pJc3YbAHhg"ILc+!4$?JfMPWG\>&A
%,'@[nkW$EF3c1Q4&d/[4)*J4'&_OV9]f2"EC:P:gfgp*XHoJEb&-_)uYPf,71![Nq^)-CsiCf^P>oL\u>e[.Z52(_o&VGN7iq1Rd
%3hA7Ui$#3m,6M>'ic+h:?=t#r)#%t^!8HT\!4'qQ%[k((Wu!EJ5&i+fWSOP@Dl\>>Ghmhrfu*`l"m^cMDN/IG!8WVN%EsVl>5)pI
%V,oN*e9m2YB"pk4ofbi[P*jIk5=8Rd&QNlT*,\1GZ!5["o@?-*EPU"L(u0F(gS%J`S&W5b1jPHAJ-aG-AnAr*6G[DLY[Zr?`!i;^
%hOqT8B_g7'7D.T8[/0T4Ak$X?S&;oU<mZ*N%C?&H5A=Kbc2?I`M2%@3<`=aDV'cZ8]feg.5c.j7D>Nk_E&cTR:\I^_iL?r$5-p^8
%<S)<GHtP68W#X&'o'=?TE9E)b0*o1&M7%`*V]*+@q`gAD9tuuufK!dJq<+C/E9'"m%PKK\KYpI[1I+tQ&$u'rh>b;F@4oqfh.,E]
%>R/$8-fp+u"$Xr$_ETj!:+Dt+:lZ<+L`e#s+'p2]@<%EWbs%Kfp@7H0q3p<.okjVqVo\&1V)A0S,%$PV.Gojj9/B+d,H73G<8^\c
%'>L-V0KY3_j9g9;7]`#aSb`+:&"cm_na^MMkao!;=2Lu)M4_bun0,f7?ZTqpo86m.n7sTP]_/jh+#Na_'iSA>fHFV$1b.uAM+nd0
%Q``Ger[HYqm96rCcHP?-1AtaR5MTT-;ld0ejS<S85*ntqF"lKE&)#stg0LS]\3$<CkjsjGf#W705b>&B1cZMXELAuhLs+#uXYJ.g
%m+J"\0!se&#t`i0WmZ1Zk*F2FA#\!^F";"/$!`Mj+Ua9&GYt`3E4LEjJY$633\WY%1H="6-N_60!PT)=/fm+V]PcBC1MaKgq'YrK
%n'#?F-;'I_/Sls8rGe@`8_r0n--s`g$`WLXX?\aKMH=.,URA7\Ap2#'?J\909@'U6>'VFaH=Na5)Wd.,UV7m_cP2T[lEA=,=mbB1
%EdN('3[e:2NQp:eB_LYO9tYA1jCn6@G:`9*rR.<fY1E=X_U5Jl8%*$/[D/"YX<^t`UKY[,#it.H<]m.$\)lsn-'q6**P^**%k:FB
%DVhW7"8j.@mr`jGfcmcN:EJ<8<a\'tU8aN+HC*;8mk"UO<$TfK;[m`\.*J[I$D6[Lp=O%aIDCgtF1Mll+.C;<5?s,DZ<Urga`_.@
%7!c,*<+>Bc9I4l.B2V5i>D!<!XluBFRK!]A7bCgfG.#g.c]iW\_Vr_(!6X%fLVqmD4lg_)>-Q*=_b<%1I/Osi?;m2IZI@>-'PmFq
%4lEg&gleWjInEeI7PrMP<#,<[L.WLn#gY%aXG(:g1<8?6/m8\0bHQm@2Y/-\K#KTZ-bQhB\-kg4"Z*f=YT=<F:M3SaQ-74kE9odc
%&rmc<Omm,9fF0R\PLD5?Q1ZgqgRATBr<k&*/o9m0V3T`SYfo:R_FigD&$%^!2nX;GILNEHaA&Ymc%RZ.]X>/>%rYfm<l9b0)\&^r
%Q8@Llh<\'"]?lrRk>#=siSF>'I<[F&Sdcd[qT86#2ZFIThMt(B-O\@/pp?DF_M,ZJ+ah+2?\C*00/MR&F!Vd>IG1d]0_a08Eqo13
%E?BWn(K\JmbHjOFI,1A%=3=a&iL6b=_Y"(E2r%ZMGn$8=peLUlFS-R?X`1m.iB=;-1YYYFbq,Z&(M8tJf,$6joJSK=lcq`@0Lsjn
%%*otP@@.r&ASlod3F5sZ=^Pt#cYP1J)`*>rc0J'7G#k!P4WXkbHOkI_RD\pXr(OhP,g;c9:0TLj^!$#8)[6T(-Q=it:PJ;e9X+mk
%=4[,U)<1c(1hYPR1[Pie%u9C$?:_CYL!JK?K!8OMN>TX8fiUPoSRqU9AQE'oUU*QklcsB1Y?,<LB.pa#RH+8Dlu%BrboU3A2ePqS
%:PIKnQd+1Lc"pp1p-EQAb\AM/B3)2OR^4[&_$^Z-gH&!ZB"JGmlJ,'^]/$k*P-3)!+*VI@bkf0!S/AtRcDgP6YB*nQmI4@A__07%
%o#]P>;=mJN4'Urec<\E@G383o02L`;[Fr1&b0`LlY5[5DcaA*]nbM[#IhRR)?ar9`S<*@[n)rA6XYhd)P0s)bj+XW2'N6I)n'k*J
%o1'%TOnjSK:X%_?oWI@!)thhYnr"[9^H=ZObdT+!k!HSZ#n)[ao'&JgU"N``jI,[p[1i7O+^lX_@$lWgl1/6@kdoVS3+#e@>durQ
%.5#:m+Y6T8nSY%c\V`'4A!*h2L$hrW0rD-\0++$Vn\t1Mp%u_XJLN/<jU:1hPP_KL`@GGt^%g6`*A(<fS*4>QE:7MG=&3Y-2-eqj
%$noRMlLg=98o%(h01p.3Rp3X63W^82FP\Ju/D]3!V5<a3qf&Ns@\fi,l<ksER*nWieTCF/+s.kD7CF;Mn]9!kVAhOPf?9<BrUa+N
%faJrjN3..@-M#ke`9$g=CNMSNE&YB[4_.lc[s*Q&nh*/)0:skag@C6&5;#=kJ%o5I*q#>@k0mTm&ue&_3Q6B'Y4'XMUR>bl&j9RC
%1nn&Af:Aiue")Q6*%CDkDrs`J@9/\cAlC3bDXVg],A,f7A@jj3-"#r_Y1u.0n11>J5.f5oeurO=Xn-ii2STuda_S.l/:%/>'g$).
%bh/b:cc;XGYE!)bpfT3"YMM&)B^5"6/hIbVnO0L=_o*'<Q`f>7LDt;SmGMG4hUla(<bM.%NRc\7=`IFjc\edfrpJf]I]^YohHoP5
%Y(A]lX03n37:p6_\\[bOZZTkae8ic^mpq`pXCeW&i[HN9/JskGhci-p@9E4_ZH@&#+uOO>@uf1L;s)^VRl8sNm`?b6s(Wf>DK@PT
%D40&]GE@9diNAO-4'YoAaP?+?llmOn'O&-p7%X4]pjBoMaJjUe6(L[<08EOrR(:?q0T<6i91O]\%=(7l^PU5Af?84u6,/iR$=/+`
%.n8jJ4]/nUB>g?_H="6dbt#]MXNH@&/'G6*]U[]A'_ZfRb,&,HdeR&)8LcWa)Ub[4ZQLpY$^.S\auT*54-'Wuo&UWgQcgCj=mhU'
%fc9+WP`=MT[W7I)$-MYdqQXKL,[T!RI"G9WrSU(</R5a7dqikgIFdRhk:7K%CWj`Bl.T<Y-4K$PHY;_8YI2u@o?@[PZT`T[0\;$N
%:2W4Y=mW;`B-%Q7b?+S!lTL6<g0g4Y`Jm:^`Rm/LQ1d*mjZ^!?>.K(<N,@IJ2n,*rOj.C<<n_r4S3,A>mu.+pb0E:cCGSn:fK)2u
%hV3@f4[Kn9C)cPom8toFhqgE^4Da38LF:h[DC)XFBkqHm28?Jd8BUj>U9HHr:6_7@Fu'!j:f$Z9SWV-^DlUp[l;]/+ZDc;OM];>U
%P^;&%V@M<R-hWk\R8((NV'lb9NZTqGkp1J_PqM]Tqrp^mk;"i;h(NF%r,F[%T9%#K%p-/LVYtmAaK@.3);17[*6DOBLQbkN\TsBC
%]R&i)elQX%mT?Z"jGNb>G:1$=g"[0Lb2^cRj;<[*H'g6*mCYn5SR"]J8FL.c3q_=p>'=\j\_O.OXdgJLm3O!>QbA<h;L7e#h<F8r
%qV:W?Q9H8D0:^W8p1p#kf"k8`Y'[BuqfmAdM4+dke*%f).@lsGbpO"ia?2")-C56YQZk)Q&N5#^Zt6&]8*:ZmGP%&%%j+='C@*u0
%AabY_`7a22k/Mfr+$[oMk;//-QbT$SYN0&sou.TIVTk_!D;Y(`SpHI2e*o`$J#_SRRFAg[1_7Ko<h`LQCh`Qq3SW\'jKhKjFo/7c
%I'I$\eJBhF40*#5_IGdX4qGup8'dIlm>^_$[AEeH[9"e`/=.u%02d!!CDXI6`9B_RI(atX5&RZm8%#IobK<0FjXQEC#VaJ&Z<FfK
%\lIm*Xu_iMm'X4tn8b(\0!/J^lURe@kjt<lPBjYdhE9S5b&(6:.^s3$_sQ4MPr80AR>i3CZ'FbJh#Ul2]IQ2^\*bK1V=8nZhRL86
%0=J>2_@Q/?)!59*Gcga[EEY>L0[C^/US(2bO889^jjB0V0:q/>(YP_"-!#IE?.Ygs&RhmCS8PV)kJt2@8XnHbhJ:l&b:Ds<EDk0[
%HRG`1os9jGiaqrVUtAg&Ss>Q#hB`S/.Wj@UP'O:0Q)0c29DPs5FNVkO]8/*+1ST?(H(35$l1M@i^\_37jKG``Q$Oam=*]h`X6'ct
%:XsdC%+k:'ep?^o[<Ynje2n[<\<!^1V\a,m7dKg\"4J(NUpTko\;rOTg=<m]]"66:f.SpO\__aKCQ4>?WRA<@Z[-]T]"-?bC_W>_
%7kV:.>$OrA>M2I=^/\?J2U)sshD=nMq(&dPgtHF_9RaEu;L!M*S'g^h%.gJ]Di(Z!HeM.@bfBBO,5uQ7H!6MX\rlfGqL;^erl_j3
%-R\PN09dUhW\jH_"h1OH(p9e*c''[pZlf-A^X4jk%GgGNkp@@/JrXKY:(`Y3]CbInH`*X(Z,.R1>%O`<DJ22MJ(5_)j=h.UMKJ=#
%\]R,PD7oZ7@.^`)UNtPo36!ai`ZKNe7.4+I[j?bq95@nb?qud,+%E=-eCCUEc'u/(6+jYWX1aQn-u#8O\^+FdQL=GbNBX>.R[qf4
%3QW@DfYND+alK&[r^tKRfOP;Ador6L=rR6mAZRQW&Iu!JfrQ0]/[JFBQq]_RrnaA.^:dO7i<2+c5as@1hlbM9p&`OVM:jSQUQ8h@
%:7HekW>-?NrmD>HnTiV:Ws;,;fg?k(=m-[6H7rp>H=p=][u^/Ll'%h1SUL`Lht+H9ERE<."mt)lr;.(%<aXFgVaibg"Q5/Q4oN%E
%D\cQGdI;7bHmhV@/`:rPm2ZBqCJt'q[n5>rOk-M(qelFYGMYmF@[[unOZ/op%'AC@6daLXj?S",#5rF_lA+dF_=4"1%r"2uiod51
%2tdCm]aNRn$b"(\YOG-UnMkVLi=gfjVj6_@;:uV&hD(HYiE+mb04AO&gUlq1D7#)=O3+-l,Dc":lSX%tMF1&86(>C!ct>,<L#@1/
%g?;\0O1'\;El7UgnFM1hegIDi%+r;m-.UWuK>BDpL=>J\[B4KCadLb-1M-5ug\-hXa#OTsX>`0e"EI0(XAT&eROiU*U=MEUId3I7
%]DgZXUiY]5nRFiiG/P=kK.Q@.%iW7'=P.u&'#YB7L*hF'%WAY&8,kg<7fV,+Or52-V-dGbPdb_pZN/riKmi,<1AG-"+,rB6Q3qG2
%#'B'%0j(+S!B=U*+!&)Mj#He'I8!]b50W;[%1rG&&CYNHL?T&6E]Y4(RaJqj90U4hJf1\O)MT6@!K2?%(G?6rGMDk^f>)-S+:8ML
%C3mtd9auX`@T_IrrEdrWTrs-,#/ikPN8,Z=3]fhS8YFYR+6c-J@3"HRY':5(6R3*?G3O-5_EZ:oW!u%>#ZOQsR/gZJ'!:0breqW+
%0'#SB<^JLE6_FVRLO(9[.d8+/gbPOV)B-<W-f.N$CBPE)Wcf1#e-QQP[5+Q.bp>hL[`/D4l3#XM`F[-SLAJ#55+!r$^3d;@TMigD
%J(A]#>Jf<iM=,Af%fo]N,!LsIhV9RQ/fUccS%jC8k9%/)33EQ-_qrGY3eK/XV`>j71s/BO$0M;^_-;!Ej%N66Z^b@uO&"nmmJOh,
%FQ7+WEF$1_g#j1BYuII(e#]ZO>N,NcG\(SDD.rJ-S92$*Q"JV\(HYhk_Y2^BrSg\KdkAhR/9do6Z[smS0\srGVRjXg-.X0ubDD4D
%FuRf3i)X9R`;3oP@q4p#;UsUP_o.;&(Xg=c<[e]C036thF]cA/!Td!mISIQ4l"+0B;Sm9e-.t*c]?.`QY85rWB)B,t0R&e.Be3T,
%0UW9S?Q;[T:0&n9jltTLniRr-I",*KhV(>+URlg'XEERJBP(hiT3L"u='uk#?b'fgj-e'-Q&GsNf5$XNXd?34\#aL;Sej..p@'rE
%Z+YBN#m&N2oOIRAKMMuZG\A$k`KZ_"A0EkcU.eg-jZX*J^+;]GfogTkPcb<glPmrkINb.@??sQ>g5B3>mk8Tbma'J89-p^#T8[Hl
%E`f)(ZcoErGDs)q2</\kS8-8d0?-'#qgS+?YjdMO6k\h_2*Bueeh8*Xa]<,\);RDY?^7,TRtgCmG`?i:Q88?n9:._b;4"J2VS$N:
%=#F)jp1SLr[\BZ<nk#%fE-""28FLE>?=d2;&J'7FH[!p)QCKiTUDoQ]]/?`Nq`s@_[H9cN/STJGQfUuRP"o4@<ElGK7#G+SH<EFB
%fSA.Tbc8+VO:+Qs4#i1P5<KQ."9jNgMDKS\q%DN+D-3DgY-J9H5J<5.VUW*pD@\T!RYbp!AQQCcG'27XFLAZa?@Fn`,cg0K%.s*>
%d2iLr;Ypq3%k\7VdcMEVklQEmiDerr9K+$^$du0L;G*Nn?D<k1lG77:dh_+E;XraG4dj(!8ESC#P>%f\]I$r,euEt\0AN'^d0[LO
%b.$%O2L:c(Y*8Zdk2kkWD7iE?l]pU[24(HsZS7/=ca%q!2VeD!_JA`cR6Oq?aCQRW"$/O;>gk9T.aVtO:SZ[2g+*nP92`.8qK[!+
%H+r2%^D1WoE]l3e0?/,^Cm-?a%a(^>"?h*9T!*1\)qu5WGG!fM*c*rWj>*AQb:Cu)WBLfpQ[a%hMeasM<M/Y^[nl,mV=@=2ro$WC
%BqH\tZOq&X5Ne=^#Os(GEIQ)"jrQH0-iP!GqIch">?Y]1dP^9jSrFf2F0<6o5.E>(Ypj5,W2L$T?-NNaDDmZ\f!8S,]l\7[P]++5
%_0%`jD-Zpncg51P.n+U5ZD_pE+:Z46c]?4G0K*-M-?XQ3+3#s"p#,5ma;*>i=cVHaKVQ$AdlYZ?:)`H/N-NN7[s"A5H'5=D+BPP*
%b@X.&-,oGA`:h.&h9-NgC1d.L]psE5Q(+aBldAIuf<4:e`^/)td*Ae]a'<L*-Jp,q.^_^TlsV%`71X1"l&9#bOTbTN2/3c1Qe/jX
%7>DHb*mXRdU:PW0pAR'N'P^^kMtp9&O1135425PZ09+TgZ#6^O^gUINF._,VeX+uZDI\H-nsK:.ZXqBC/`9hqVOM.SrTqtpl]pd]
%#(B!p?L#X4?r/Mh5u=/Jl[.Fpf^I7iQt#rP]4BlG5AgA!-D(qj]BM;J4C<\'3*]"Z\,E48Tmn])^Ck(aB`Mio3i04f\n'ZW\pC]f
%SPQ_*q*:E\p3Uuik$Y0VKn%5ok(#$2l)4KL9bfitDZNO)G[YDG7BXF7]Vq9AjhXhPD.!)?T-EP,]u[e?*e=rueClpugHL6c0,]XV
%+h+R^*!R"u98F#*bRDqhYjYi%?S?%CFsp/-*MEO.OC>)`KI!i<8JNYtU.42f_r0X/ZfEf'39oIW2*4'a8oqK/\U;/YhZ0a9D><9H
%l((O(rmG;nT#cmicQpjd]j3b/WB;N`ai.]dX#59Q^Ub6a/)^uUKm2nZ!`goN].JB0Ho"+Zgoj[kM#-&VDjbiGRNTd?A>#Q2P1HhN
%YG`CND;J-N%s6hiI-?j=eX*c:7=HAs%%An"/t!,p7QaQno$DY.$K@3%RR;;I"pKd?X8s=[IWdicPmVoJjVns!d8@*Vke;&'beLN,
%qN)uALWLCAAZVGZQf1-tW[\nP`EF3Kq!)sNW\e8;YGlI^9lj@m]nl*sCAKS4,?YdT?oi"4:ZLXN.;s\[,,$,Y<br`H`e;OWo?2be
%0!V@I6QT(_]`(8m[_R5j%s-&e2f#tnEZEmRUDMMr3s(5_5s1@1-a%&7WbLM`.?Q44?PfYZo>DJTn)XFh`uBq)Y=Q6WfpY.c+fo:U
%Z,eh_#uC7=pTE!:j^ZMNic9$1:"T5S\!_l$f9B@4e<?IdCM!'n_IKM=)ei8gZMn:,,dg`9Af=GaZ0.W;q!73=j:2gQbBC>$Ek\!*
%<k+ME[:E4TC.;RUm^aPX$)%"hW]N.?FEXkK4kZAbZ@Mif'4A511Fk:uHUH^pJBMEalI":5&fJRe$=\;Np?s7[!AYH(5lJsg,s^U%
%LP(V]`_\X`=Sjl7a1@bV.#iIaf33rfq77;!?14[^K^2Bu9Bt7X*[KXO1ToR2bX"j)KFoEIe7mo[3H[C_cm,5>ZbOE#6`/"qWY"RT
%Oq-K>]bagmB+>RcS31QnP-&$cZ>k,\b[2??g;>hF3pLbV?Htj7FA%d_SUI`+C.Ql:OrM1jDL1f<<BZu-WR'n7cV?F'r)&&A/%qMI
%9Mnfblb]p!mbp5fbf6AgCj(tq7Nr2+='sY/flir[>_H*-SNU?2@D;$D-cH,S[Q^1`h1sU4j/48/"WlYGE#buFWdYY97-13g3#cE<
%o7k:bS_FRb5<(^MXHf7a#+')^QUsiLgd_!$mSK$eNt9F?\SS=-gQS+.RgR]LQ+>F,74oVKVbU##-X>`0H#0b>^R7lh*Z$F`-+AB6
%HJtu?2A[4@hCkHSL[B=rVjl:""%1htF("WiH>"/8dEGjie#?UYCI_I\A;#);Hi4fq^betedsE.qq0$L3-1k+E]5l:.qps`o0r_;t
%`1.ppL"EhsUtJpp-./.6hp!`C<Wk*^=-*EaP[!(Kc>pIn8@XD[nqi@c@k2PA)I6IG710<E6hQ/3]>mse.<Y!s1AdX(B1p_1l:j7M
%78]VHm%Y>4)fnntJ[e*GZh\Dbo5:,ij)+/A"Lg*rMe48PF:F(k+(BF*<+K@b"!dtJ"$C[$_r/c+D9T=Jl%91+=_!`d0j9.Lbt0R6
%E5S"+>&GB$QS[a#\mh_udL;rCgIrs-4%l,CbRAF/Bu,=#gTEHR2>qed\#*p7A2VnnT<UYgcm#_#$q&&t^/,lV:QP*k^j\/2GYL=R
%3A.DqBHPl7Bl4t=6et*O<6Z1[D[h2,6gXOf8b"AKITXPh9"m?$(]=9&U<4F&<mNtlMbanhXJ>0^7'`X;F.X/4e5J&T<sjotXRZ,>
%`5_Mi6>!E8gnhs4lZhuBq4sHA4-*jco?R9ZK:JsJjc29MTak[U27%LN\;V$@)*n:-]hoWd^2gqA=3*PL0&0te0P.5<1:NG"?]$Cs
%ON4a1,eU)$f0M4BRJ"^-Tf-F\!SlsC2]H%g.UIU[ld^GV4XMfEH9Gp)6WiJc=R$ph0I]\PkOFr.\&C&-GIOned;W>CWTtV=<%;\'
%ioq&nH7R*Bk%8g_QuG5O&K?ka+3_@oO0C7'jl=d8IK3qbIuMlKh/2Ph\o)%[bZbk,UrXkj@d[[&fiqcN]GJW@][<S/0)1a-)@^Vn
%V<a]EEVa^&5XDKXO&#H[6L*/Y=R!c)-Z$.\0l`T>.t#MJ3BnCe%WU."#ElH^HemN!1_)r55dhI!EAj>d'V<RV0f(2/ILGs^CMV69
%VFY67;"sNmWN@4A<nV#4/UNR]:URlE\]*=C;PFh'qe2Z:8bo'-S>iI5X4^^j[kKM4l:Yd[*+FK>S"s310B8l(<Q9liaObd*I:-i;
%c_DsoRh@qZ9@S8CH_-JP1D3JIALaT`FOJZR=T%U4k0hA,C+c'UT'ag?Z?o/c[@S@uP$EH->b:Cu\W';/_[b>\fpTe4Q!R05mEQ@o
%AI]S)b=.`=H@[]>e:Ph8j$,bnNLe'd1V+n$m%V7?]j8Bm<f73`RI+I?rtKS9AKc%r3U_<NDb9j)9`1t3,PV4`,'WhF>aidBdalg*
%ZYs37*$.PERc"^)9<d&NXm(nmp2oVPG=HcIrQO\>\!pMLk->qg\bQW[aICd\1VY6M<LVASE+eiJ&jWS*947CFH&1G)=#6-5%ci79
%V<QZjHejJ?SbZOc+OQU*lt%YY-U'q:<Ucd6#TaI]kL,W4hVCYEIY/5bN9+7^HKF:l?OVZ&la=s^f";K4LFU]oD<^W"ld/q`/a\h,
%0EJjWCN5om2]a]9kXXGKd5`Q5Q^8nRfNGt@?tndMR:fG\AE2G;`5Yi)f"3BukQjA;=$75=FB<@VXU?;A'OqBGBJS3`_[nB9l=5i9
%+6oY6Eegc58Sl5iZ$9g#Hn?],_GLfoiT;D"-7_aX$j3hcTY*d)$%aY(\oneL_7-!hKEH'oTCuK)oA0[jlLmm^[e"bpa`-"F;c'T/
%-<n(GLmc2!qpe/B0eq%=W&F%u,T>b=d1/12S,9\lSd>HWoT3h/M)g`5=9kQ5SkR5KI5DsWCU)#Oa-"nVX#Sgm0W@O:rB-2)HSj"-
%b)=psZa&_Rmk'\8r?9k@F?J$>`PW`DH"J,k1+W1PZ5l3\q[V@EIm\rnaHgG6#KV#(SQo2UgDu5<??a^*8NOOkBeCr%G5ibs+juIN
%i!A[n2GP#-L\W(>=MN!Jo8?J5_oLD"G[!\B*tRLAkZiMfcnLD7qGh""Oc+GdoKd5GpGX5_jk'-E<dc;)-G%a@<F%tKVA#f[>WRl"
%?j:\bC<Wht=L##gQ$[8I8mj?L7RFhlAs:A4[tb4QZ/!cVlnZgl1qW)Mg-QIK5)XZ@hKj%%n<-o;m?6lrSc,?^Cf`b@JsbHM;f*>&
%5a,?So_$M&+Z>ZCX.Ci31M3@A=QOd=eH,m6Kj66-"_B@Zcc_r]Ys^?W1)$$$*.\T*E=ep^*8,Os0=Q>H&09#]qD1q>:2U=PV#_kE
%s4#Iq6G6Wi/h\7u'mVmSS$(S4B.sLY8SjpfO-tWQN>^p7H13SJdrO//2R37#!>2;Y)J-FDf+Jr!gH)k'8iq=L&?gI.=h@FN,M+`>
%K7+fJIl>guAmOdNJ<O45r2JSjZ<^ls]pYjWd`f^'s5&jG?C/![-8!!p2KC*:.32XSQmpcP=Z3BtjW#WUdER>,P9J0V^r\rI/sOTi
%%+X*RO"n*f\lLGMcIY$mq'=LHZ0+4#\(<36RpO7>s&#$@a'q:-r6VX0g[7Z('Pjh@$Y2!)$dOjcnlb_<YK!_Qoe2VoX^\^(fJt%q
%8$5FrU8MqI8,!YUg;cD$iQXKP\C81hX/0N3an#o9gmpX:Sp36uiL<o_1+1B>o+h&%2UbAU)olek+dL8QC2r8rZYZ_/2HF]*;FtG2
%&*YY_-k4k;:7Ut5m+VnYKmm0\Yu7E/ra6Pg?)onD':b,]di%WiqVA`+A`@"ORFUZIHnMIg7eZA`Fof$!Fu':$=h;]3]i`;:0R*OL
%nQ_m!DIuO>6qeUi,)4n,4,oDVIB\ZY$F.BDD@s7%mPZ#r;5u)(MN<$^^j'+`-I4L(Aa/kQgYRSlH3pm\%G!b:6Y.-R*a^S'eMf8p
%`m(STh&Ja,r<FFoI#eJ]R][sZZ-6N!I5MQ?0\kpkCi8J[V;U'tgod$9.I^?a--&IlR%oPlid"RHc(o:A>7;j%bG<R'(K53O;LTdW
%1s_EbopN4hpAD4ZCi+r'EmIAh*,^Z2b^R(=\.%*0T,uVYo"/P_g@[lHUsX6alj*r2fo:Ca$cEn^7::dqDk16=RsbRl[3VbJdHj_0
%L#!PNJ\?0^c'Ge]J^hY*HVV8qhT`%M/'Of?[p?*"`ugN.[8IOGo\V(,D\b]cdad"ChBV7>F>hd+LGtp[GB:n*8)JVaH$Z6Pg`BAI
%nqW8l1F_2=;l[MVL,=p#DtCah[G+m.H+;@2H$HXBW].N&Gff<!*r/NK$f#OJ6hn+<G9.\coR=ljBWV!fXb,k+q"23uGMjdGoCs5(
%Pl!DcX'!JL!V@,?XS#%i2T1;[22!WNL&WhM&V5_Vhu:+75ibK"YXKlIp`B/&Wf+P!9V@A<kC\$]j9t.ejN-?p^0R)<8,2rThu;4t
%(6WP3V8[GG@oX7NRE`%3aPr,+3K[>+COG0*,&oA`-a*ErCfq;e<VboQZNXKho+K8%Gro!s\,SHA^ES1q%tK+O/f=@uUK?<CQU/EM
%Aur,N_Y(9:[GcNQ-Gg:%^D(Ed>@1UheQV'hhXRQ9)cFt!o9!9^9B1@cIlEm1_Ck5`IV91c4></cMDKX'-iAMhX0&MoJZh_9SX/..
%l;di2fY;YOo9ZuJ#5agDigsjqUYg3>o=U?'!<:4A\AJ;'R8:&N<%ksNnS9o5lQdu1qq_K;hS=AG,H@h=[J_?:lbBrggg=5SHXZ:<
%C'RT0=p@1Zpp@6`KB%<.BaEkM[GUZ6Cq0IV#G5ZMXkA-cB>6Urg](pG+tKqZmH"Dq0nS?^^rW5mUI>k7<gADf5Vkr;,471=4=>ek
%*6Z;%6U=pH!Kr,>&J&jg(g'4+68>'/isII1+c`mgRfb-kOd8#c7-6U.Q;ccua1K8pJ3=lYBEMC7M/tF"L0RV-/&XkRnW)jai)5n%
%#>1A-./@F)IG#*C)\%E^48\JK@9!GBA?V"qA3[:.%`Xo.T-3LVos2a0<2*f&pc%ATW[EO]05(%+A3CmN5o[O4hBc=gBq:ifd34fa
%J5P&RHo+R3NTB\G0!PGLp33tb-`_6Y<Fep=2U:n*6oM_D$+?',+!;8T98jdH.0=1W,'XgPL7jF)15%00$Y*a3/hd@q&oo/hG[sV'
%5VC>1]VL9u8fSe:37uU'E&I]?KuK7.j)Aj6Gq7[+[K[tr<E9s>*e/0Ja;d]=qG)CtUNu^F2ofs2`9/BiB<8H?s1AfG/`d-,X@NnY
%9=T[pRk'FG3A=KGii4-;k)e6*U4?*^+hk'd"!OP.71idt6])P5?AG'@C]N,s&kniI\4?r7"=2)Va9?hnFFc>W%Omn?2tEfe/n.0c
%O6iqdB;o6L<J>[9)oTn7^P!(Q/gq>WGlV0]/XQe[aV$R5Rn=)+<-Un%Z=-%TggFk68bJ`B:86Zh2C/UdQ.gdl4?7L7V?c4W+tm=$
%p-8>e)Hr#OY-34E>NV7T/M+fY<LG#(KH,bY'$1Qo:dL*t/?_C3)WsqW(^CBN@>51.)ZIU"+=K0rPXI/C(e[j?=P6'b"0r.`@4#YT
%=Tt,rbc=HsPm#H1a?uLQ*=,p6YiYpkrbYP#jSV3=>%JBtd^Yc]=^^LjI9TWE'U2NmrunaK=IpG4\0,5tmJp`@`$68X?qQsP37\K.
%D@-UU@7Hbs).GiZ2-'bh%2L,J%-g+98dOZM1g:FuB2me'+"7HU*Rb+uRBq`1!kafIA$\>r^d+&V-3:sipaUW@i&JM1ncC-VMAfPV
%<q*tRe)167&='LOH4>cT-UF%BM6_mc)hQX,N^ID'H%7GuL6RlaZofJg7+b=k5DP[P`EQb@ABG)F0WHsCaurSUr!MA[30=e97N-A"
%c4D7^/VhP)%Z]@\b]uL61BJn\%Q+d<1Nb>"[_OLQa%SRiHEFa$SVu[P?kXJ'ldVI)gZBL,L*u<]D6:@FTY00Po.h7$E.b_u?BF0@
%+tF^uklLVRKai0`YY37reaBqRM[oF]CGT:d%ZVYa!!aQc0$$,W#AQ'YP&nPY,-T%gHb"1a3\Lk\<g6#`'NbH)`JYeLl%4;hiBhBS
%m#lGV[>-8n>o,IXXpBpC72/$3L@[G4&'-[K2Ul0^-0L(=7,Ce/Fr$6!"W\2b^c8)UmaUkp@C>#0cm@0C)8-WcJpiBY@-3_6_hl#2
%KJS\.6<R@&Lp0Ae$!"nikCW&?nQHaOJqXt>5]k(e.N<#/juhZb+M?96d"-M]YfR?:pY2'Z"n\@C2"p&PI5nCf\$b[jNad]1<AE"0
%lLnU9-'e'eGq]CIRg87)M.!P-!7al:mL'EBno56T=dK[)EJpW#+l+$`!KgXg@1=s:2GaAlK#$jsC*&IL:_2(7c)0X/s&MmU?2*gk
%%UFaI7qMeZYpZTX#KeiC>f<PD!E0U6Bq,^pRgB<,c:s"S0'&2U<<:0l&bL*TJ]M)PECInBc[cE7&;cq8-0G;S-c:X!$p*HS1#C&7
%Wp0rpd4120Ql",HMR:+Z6=EGorUC"]LiXP98RrlS!%(39=P3e-$'<*8bR7`6!IP`>H':V=L"KlJDe]AWQnK6QTL0'@NO'&S4O/`m
%KUb*VS2jCVs#.,*Jpo)"/l@bNgn;hGlij\Hhq"H!'ntj<@'F**:R`Jd'SnJaJ34Z78Kp&+i^=9_;[5Y^P6OSg&5P_tL(-/=3/AM"
%&]/Bt6jH%:KbtVO=n"[ZObr\0,^G2k5b:8):n'J3S0PjS5s5G.jU!N;,`r02#[pkBo"`%Y$485F6V,3O*e9"b#6rknb-GKt-Gun"
%P9c#<-Otf'!#LFc:%^b;R=H!HH>%Rhh?e.p2J4X&L\nP9qJ8,gLb_O"N\..l:qtAMK/"&Td;R<5%Z_/Dm;S%3$7cH'k8ID,i\fm/
%d';%0/I,aEkV_K8`:9Kh+cfh-NKRkVo:Q)U-+AFXk;K"mnpMH-%`XVY&l"A\fGJU/:jhsU^H4?Aj`nuk4V4WVSBl4K\.qupDY%8M
%,ZXP?/IULCg,@<c`>0I1i#0`B3]ssKOCt1N_sB3t=@Eq:B%dIB"rJVI+WtsBHcEN\/;Np,;?<6k/+>eli4TP$&>+r*TW[O%BXo7h
%`"(.+b9^aVr^OD;Yg6?YJQb^3V4!>OABC5@k_W<:OJq8@?n=BT?p,XANoEDOjUkYgP&in^YYH')VUeb1)*-aj"8u6)ou%m#L:B)T
%&"5#":$SjRhoen2OiH0UgBEg[I,&H#-](Y6#SD=,;aBjQ8SNjollSrt+:B4r<D^N2TF`4]\0Xi+D,Oc)7C9kuLc32NT.l-1Uh(.)
%Nr@ciQjn'qEeq5A^D63Sh1R"":1+gY;`54mTN)CdAmiO:^3(S_fkhj)qAul&j3U+#/[2PEj2_;42&"gK[7VUTLR\bCc@Q.?\9!Hd
%'"ehK@p;,n6h+:N2sS?Q$8*1X-&``IAnV>XQ:Amb4[?ie@/=hU6$^n2!cnMr.Kg)?7oIIn!'jP='dsb9P=k->"=i?2$XdlVXC$M%
%&l/j<Jn9ORF:k$&>mZ%EiuJmU%Q;3[GS8,];Zmk1HAIT]8hS&fkV>Mg&e>mSV)emE=;R./,SN-V%F;S%H,0M*<!"K7Mo25E7dl8N
%<)[BHA.m3b"PRRhJ1MZP7T/5tW"9je=AXh5ae:]<,ffI!:;J/$f`tr:Sgo"<[G&/.Ku84t"P-9^Bd]8OP!NM:eTWSd*D7$u3#jn1
%JK\LF''qb][$ac:P+'POcP4GQa9#gJKq(nh[OR50TNJGYn:Z>=Ps?cIKgEiJ)$+lF76H><jZ"fD8>cUSM'T.-Tu[9?3@KJ)ck]Fe
%"Gm\,:lls,/<p35,?tg]A75ZcM'kst6'Vp)_NN@;EBeM"/j7C1^VW2&6b4>#d0_^:?o]\fR2CXa9TR>"W%?/YKJla3WFSU:>IA$W
%!!!B'=s:$0P/muPI'=E/r],P;"G/X1mBmVLfDnkRCqGD3?s(k'i6K<28Y_s]G-!D*K<_<eB3BuU</u[3k6-JC40$@urIS!Hk#@I0
%(!%5/W.LQm/D)fp2M)#V*F1cQ[!5(TLU"1a,"Xnj'Wd$W!NWa`W'hL9BJYAR;%a*W179->V/i)m*J-D7_h+"Ld6&O!0T-PI.7>b<
%@h=9-0jLcZKOkimPc2Yg7oa7?cGAVB-1]ua;9ad((70u]/^+AjMj4@rH32,h3[`ob*E&h0EsZ)0#ule9%EVKYMeg7''EhKn*Y8P@
%!/2iVO,-iS+XaQ8!Qc>Gc,"C>o37c[]WK_AN9L@0Gh(55"V2pK;Fr0c1,_+t4@sKo#X_VWHpF;Mm.I^g&K%5W=RL`g9VD0K2VH^j
%KMZVJX@.1GmmuA]9&\%%=n=)`R'$u&NO]I"$`ih"C89EXWt6jjMl@.`.0shnE'Ybg!Jg+GZ5CicN(S#A&?pZi&E$fhAm=?[@1Ii\
%[$M%V-6BQ>0`db>d:C-%Z=Hd/@Ta)W8L-N00lQ/F>7:9PF<$&M.[*=pE'n%0M9pLBL.n)a@2)b82?QfZ<Uoc;=\rF)X]mbq8YjQ"
%G0Xpc"Q!862Z*tHkJt+L("1GXK>H\\`Ejq]Y_m#hH#&rn-%u@[HHIc0&oXs<.kuomk]r1\#J)*0JjQ"0a3,5NRWQNCX'g_LTr!nZ
%klQK50Lm\A8V%'L')(?`Plu$$;YEQGnh3jl*)"R5d(s,q1tb;)DhAl2GJY<HBrL&$Ba2GD4q3n4J*;gs^WPDt(&\8LYC]RV/AFkV
%<WPpo6t.#T#nu2=JE8%l*oerO"`s,t75AQ[WoB_6M"(]<J7K#HdIn+_c]F-F:`+s1U*8\*SjHZs6?iMu9b.L]VrV)SJY9!*.]G<Z
%(6h,F/JHkfTRmgl?r[q/3,oK:<g8r-1_@+65qk,>TL9DN$!9J*\_l)$3ri8D\>2<?:r*J`rOB^K\h7W'("#j_<Zm9"*C&&BL&mrt
%pY=c5-eMNf'>9%BZ*["gi(9:A/k8cQKT/fj*l2hM'r"AHEJ5]N"$@40;+jmYc<XBQdQ&[Yf>==VUut^m@l[1QJF]M(*MKKhkH]oB
%Ou=3ZNOFGoTEAdsa#;de6W5Op,8_'S!Dju"-0R]rhEiG5'&om88kWQJ:#dP4H'h.=9/ntlD1QK>5&&Pu!(*ub!gQlLLt:V:%#IGE
%_]aY&2#pNSZ>BcXM+=D_`aGB'1(+\q11#mD1c_ZMBLN=Q*1]8$6E]BG2e4Q[[ONbk$cpF(!`:5ZDH*>X`k2GZ2,EWi!m)PgTh5Q8
%'WX9cWX<A@_6.iCP+ZD,iu=:PA^UR&5ap_Y5FSS\81J+a_[]FuN&;a22g=2?3BE`)"CjL/H5@c"0BH>NE7&3:gUQ=IY6C0[!6S:D
%)8.lsS[PQ>fPdVUIZ;2s,Df`?CEA":OnOF\qMA>*C0QRcVCd$$ac)?H#s8H("[4F^S\l]ZX2PG.p`bh&X9I`"]ZSlu`<MHV1#<s<
%7'iS3Z=XtGoW$OL-:%,+E>M7QJ7qe+b^`7t,h_ILQ=Lp$@$M3G,fIY;@>VS_!N:s4OX)G$C2/B=BM)(+.tDZ-dpR55c5dB>@]HS'
%"Mus*$GeF3B!aTI]MK>1(6[.1Gt!NW3lPM*=i*"a)).pe'S)o^V,0kI-qLVAJM!YKikkaE"@2$GLi=Yk)@-b%//&G(PN1ke,PT?3
%H2pK:8RiTf+:7,M<7<pI&0rET:k[ZIMhDt,<-`5+!Qm2DMEiRB$N\AN83r@(L]et/N"*'OPDY2%SJgd?6dr*1pEeBm,dekgJ06,#
%WI,,cX-2Rh,dJ#u8jVf8&P7?Nd/k`+9TCK&]_dlaT]9poqI-UOcHom?M3_IEiE4f^#s46h.Z4YJ6kudo"q1l4lSBC6d5FKWe50k'
%W$i;]J0>Hk4TW_H!b5(0%CKq4OFdgM,Jnnq324pdBe2^j$oP:fbgPX&jOgaY"A1NUTE(c6AW@NI&0qT,"`Y:X,"V"o<@^AS%BIQ,
%_\LOW#UHVeH&Me.)_),8i@ntT'ahobM6lP%B-iEl%^N4)!-oB7_Ha%6jh=-KAsrcjf*o@U#d#i+]d]1cT[[:HW63jkab"!j&Xb]<
%7ZqFc,%/tf.I\P<JSL1!H:j/C)cpU)N[BlNRM:(p<m]&-Toqg-#T<)%U4F9G9+#Hgm>sTKMNW!":Z<`6X<U2OG`9hnRZg#2!3R%"
%!/rAS:f%],CjJNWLoZK>N.`qGgF/6)[1$p="gP-Q&KYL<1r_p3:Tcu3/(8pH$Ch:Zck]H>TMc>'2W!"g5a6+R+_4GK#H@NSV3M8_
%J[u`C/d-LP+0cEbP_QUV1I;.@"Dab>W)TQ5K#SO=Rq-hSndZk*;[1>=LNV8^)%03.3@o>A;75&=0i^W'`3P\o<B-S1!j9m.`H^jc
%`Qf%5+lrR=QFso`i1,TAM.eCV_</iH[IE$@7M2U5UQ)ei;C%Z\'[,C,8X!\S-Qf&qH:*^uko[@p=!L8;/.3o"A[[t(,fQK%aAc^b
%Kig\T"c=j2"g$huOG%>D`R>C:+k6Fb]$$u!2Eqd0$/"[K<`>Y8b+b`KXDQU8:9p.R.ON%]*h?oR6+j\Fr.B=*+mB`uW@fXfgaJ&f
%T-W:I'FKh00lUak"VVc3*EfgsfI8$5+=bs\.d@!os0++;19I!T3/u7/YSB^+O0&Bq_R"ir"?$O<#m);^Bah47g=U9$Yr3Y=W?1^K
%KG`NR"/EHo8??K1%8iV$`umWHD5]dX8i66,&6AQT8="(RX3Wst1%ZMIs1"::dQbj;+9fs'kR!^matb_j7ht6p'g/4q+a=KX+:)If
%$Y6aA%O1J;iRA'$FkO#\M)"3k*H"9:DHVh92'`I&V[EcnA;,X!+IE;Yc:\P+F7@]+44O2'H7TX,W5umrM3s%EOrH_>GCWN69d&5$
%(o$$ji><2ZX*E-)6.!W:BV`^'MX&+N'=51g(tE8MY`;(pT7@)*bE5*[_br7UhaERAP134Eqq2,[iiK->@18a:6R[MONP('7a:4)D
%lSSu)'hVH6c3ORXDZXCL?jNKPg_k@l6.LV*Slq(!)^7e-`d4Cpkqtbk*CP3*OHY+RhMc5!&k;ILMF&[<=f[9RbP3T4l\A$KIYkEc
%U<@(-.h`J1O!Mft?%N2VZCr*F>N>pB*(rRA_gBD2c7N1RqIN3Z'p0b/&1(F]KLCti4KW.-mS3-KUDY2*Oom39<>5h'KGY!3gmWg?
%A`-`37,luf6Bi&p[QBG\R4*D4!_JE94X>m@6^gW=Ee$tP71'"rK>Q=bpk0[T4<loRLmI0*U>T9*LF=lGEN\B%+J]V1bp78@6]Yai
%5*.Q,IZDmC.+hluMaRp/Gs`m?naUN5!L:-1S3Z6P]tS>_(b:;M7EIE,!aQGW,E`UIJk\q7Bo[[>HX6k<@<Wu]BIeXkkI?*q%SsAn
%#e_P8U'Vta90b8Y=;&Kn.X"S5d@;6i,uk7SjA^mS"V$E+1B^,1SHFPDbYj0L-'<#B_I+huf%X%u#l/`i,\pHa'OJ&uM$]d7i/&V8
%)XgLd6:6M#`I3j"ZII;fBVJ+b5s^iQY7Tdh;TRn@"h_1do"K\u=WeTiWT<[H'G1EW,U]i,3?^4i>bBi+9d?U&W?UHW-AA`^=N&@A
%`03$C*.IsE7GX]+X$h#B&K_]r"VV$"pYkq)$)&MpqBcQ]ieSKT#mh5[aq?&-,h]$'*b$r.]2,7-'g_nJcjt^r<O+lk-s?Wf5u\gl
%b5<3!DoVHE'PYmt."h?$;B&;d3NFPr*fYb3^)[dF;]%N@4/0Yl(P,]mBDDX]-p*5OBILDMj8.nq4=A@a5SWTVR<'iGTK#=CA<jXh
%<8^h;WYH0"SK^6g;R1Zs6'NBX0kAZE>Zu&8F9=gpD?r?*`%$Z[#VoH;JJB''AAg0F9#hLPUQVidVQk]0-ZkZ'%j8SRDI?_qZB6W&
%`*,G@"A+p(=$[9`$S#OeQ%5sda+HitVZDl%=:i)+FXWQ:():Ii:tm[4'*<+N+CY1YE?iSK+UdWF7k8GhC^!J;W%(j<bo0_nXX6Mp
%-TcQ07$B/<m\)NmX=kR#O8RCX6Dc9ek1_B3+I"$HYCHd+`<OEu`,i<NLt>Or"RF-n@Yl7d(@TVErcDPpP2k40>&_C.(<*ki&"k\U
%=J\Bj>Teiq=Q)"p99t)rahCZWK&/GB>\GOjJMCGBGZr]HLFA<r1W.VX@hBdd6sL=K%;XEcW"-a1W3i'#&;Z&DRi@[Me4fDbco]_]
%L@qN&(/IAg12f=]&F2cJSY`PI(]e&i.gH'\6N%pCV7kNJ`/(jG"$G.#UtkjG;:*+_4s`O_@L^?8Z'<3AbH]X:1)P3ZLp="m$mo2S
%J?RV3cZ#oEEWM5D&Co,HC/S`dYauEAObmN5Qiq=[kA@>"'H2K-1e^2sbgHPG0,'t:+R;UWD\0mL78EXXbe;2[,rq-"qZZp/2S<_=
%"3NQFGh[RYe!iU^*QV+SYl=ZCD%T[FHB(E_7YDR--@Tcd5,c>b:``ilj$)>4p==:PXbhJ?*pqZ#(#1oP=9`WZS8HN283l3cH<Kho
%bjhJ:lakHfe,//6HG"Go.1p>SD^VI;2<$DdGK!.,"7I,.m@*4g[',kF21sNAf<RN.q;G,-lY5VDc"jf^R*!2`C-2Y,H9>fSRn=]K
%nYg-re[u)LXn-b^ds>qE"1p2\Z/WuCYiUp)0D-=p96rE.9Z.-N1$=3q.bZ<10?em&bK5b:KiiYEm8VO+&J0RQ%6lj4n\J<JJnsR+
%jC,F;eB"sfq3A]KSPua9l_%;oE,5c6P0NuuaI7nt_s-V!^J/Vjf+iROFIdPe-t`Kl5sC4A[H./7R')'-S^#@6c!7<gq?ZuPajcM:
%(fOn#Xkgo^TWZt-L[7js-"NqQE?Th(U,Ns?IQW-S5/eNd\*:JF?AGN+\oGFb-fCb4Z^n/Ro_7OOC(\!kj.5RRWhl7R]pf^^P.!kN
%AtOTDPM4G:-c6Fn_6ZAm_Qkeq]'upKKK\b`c"j5kV/b^C%o%8-c?@D@fboBt4IEIiT@oYmcBURtNnW3'O3A7.645nnk$kU9GqAOb
%]sC!m=lh\'106n?M_29;(#M,MMV0.X_&ta5Xm-1`^hD?-qfOXSorRlWqTc,n3]<E2<^N=9WHK7NUXR6pXL.UIkdgoii7ciJajOO$
%q"hA<>AkmFEC`1/Z:fj7gN;TBc,aD3kqT*hQLQ%6cc4r0>pl/QcR/%G*T?%:LHXM*T-"p@^)`i!+0;i<:s;d0r)rM\A2C^9bAOG>
%@Cd/um'_)L0Wtk4[TQRe4jH0QO8&'XmTL*pS)$?!XgnJo2n;^?\TPN/i_5<>W.jdA9_s3D^L*n+h#"u1DnVSQ;fX[Dk7%$)U=7Ot
%25g[Q-X!UmFKlUrC3l`C_A_!Zg$_)abN!L/rNQFus)X+CB<-s?!iVe)[OHhiCRFnCpa;q(@*e/"2`W%PcqPCb!bMoeX4bi:1!s+A
%7LbY[TRb)S[.&0HP/c@OY^B+k_#rSM%UKlL3qecgc-<hp);W9+a)MJ+0+s.^YXii0E/mjOP?JJK-LFNSD8G@rSI!%k0X&Je$t!Ge
%'!+o4Z>^t5"Q/eUEl!lD[0NnDdI/NDnKJ==X_g)V(_3.A&0WS'Z>Erra89e(0;%pmd1B?J1*,hEp+Aq@C)qu&SVh;)>Oj`mWG'49
%'Ik<#B#L/\9(TR-YM#rKr4;Lr3,O'>3/]38a!m&0p#GP#=bAjGkk/NY1E$`7,mB>#GL_M1B0ESM1kKLFGJ*"Uo7soAaEBASbP[UL
%dWM7GaV6njEM3O$&acWi7Y(UDc4GFn6@h.,-hP;cW^:L1$a2QF+1=K,Xl$m`4RXZOgI[e8qk?o(Ps.06^O/X2Zm09COS`HD7FLs/
%-!lV*IM28LqSRnjDffcU=+pJ_/lXf`+F>>o6gA>-`PkQ)c!m]*/B_pI2VQmK/C?]E!C84hEW&nWNJ$RlM)SXl#/]mAas:2r\IOF>
%c7?ga>5VFE3]&+[T<Sf!$Vr"[0"]kHN,6rLGXp_Keg'/&hQ+>/(i:ZocPEutJMuIt^*a(0AnsmZC_,,7*M<!!^gY>lHD)5e7p*[F
%G*Ur&%S'^?TgoVcO#Rd/%#;'hRXa@0o$nA!U"<?7IY>EWc!P9WDjT5Q9CitCpfC,PJ%j0VX.2cCL5^qsRF-sE#;_B8PaL'KkWfbB
%iMAK/=urbE2A^ZN9U^B$]hkdUaT>m&OGPOLE8$+/:/)'hng'2g='6sZ,q=S%/32[$e46scEHA3k^"Z.a34sB.WMIW5+Oa.91Bam=
%;.%CpG$50C@d])X50tm,ri*8m+MK<u^1(`2ijBn[0BX'Qlen#F".f#"<.E\WqBGn,1YD_5I_$o'+(KGjC(hI9p^XJL*s@Ci)X7!G
%Xfi%"[BT*jlci$'Z\HH_Jd-g<JV"-ZO#=$FM'[E]r`ES\BoqXSqjj[Y,.2C)2]q@*S:pfHb;<D$+FaQqfph^7!U76,nOE/)3A/eE
%k$h**Z,%m>a27NUI8:2gm!bL]*D"jCbVM;G8O?5&o_P'),UWccR<h-2Epk'&*0M\..[qZ/B\st&6Xm,[9Ur)4JJ7'4d0V)Ag1IV=
%j?/j6X?q#EfCbdK"@Ru9'!Y'N)l.g:(@-:YE/d&['1-MeNYOK9^>,#i`afdP8A1CK[ChCKQ&\md/6n5]po'M5Mt,B+o@ZG7D;<m:
%'\$lhaSEXT2>+R`'L"Vs2GJS/pg_rfbc0!AY%MB\,9jA8;AZd%_p0#LEo$WFd9(2:#=BpI*8^sZFuBfV3O7.$dC:HK@)p4r'M`_+
%6^iW>R&c+X(8?KEZQ`),/OR88.HdE'bo*N%?cl>Pe*M%pU7[j46nnB<h4?UQZ,##7>:c]jLl;s4?02@t,>tQ5hO:`GgnPEE^d'TE
%-\gO"Y7b;A)B^KjH#&HZJ?T/6bq=l,kj08e\-d=]3YqN@c%F\0\lts4F\daXU3/4pb\ErMa:Is]cC[?^XF'P!?NNGDaOhoRI>-/a
%+H-(<Lgh>$c>L`8TWf6<rZ&X?D,?0G4RYum>OhCsnJ1`1+f#_2o@`%V%*\HoI@68BceJ1Ap9pCA6U7!q4206PgS6#TVKBo<-?jLP
%B5WqpaB+1Z@ba'9g7D>`B5FF33@pE3;fC\D:Ii_gb486q^(&+;A&?IPno:.UPJ<1H9P.>>Ac]A!>jU3eq)#0bMZT=<MT]g1RZm2_
%rHE&.TAN0GXR:.o`Sqgc#K3B$7[h1]Y2Ss5i-R7N?UsZ',Mj&65Z>$h+`go6f"Geen*ZuuRDq08,=gJUk6!*-^9GP4*01*YrE15(
%4L3hn*BW7?oY[!Vf'TCk02tnWDYrHHaPNpY0._/[M]^]kOKZ0eYI@9jLMc&-]^*H#_rg!NhtlA+Z+Wt/R.+5'8O,=-/*],cPZYse
%3I,-k.ABlkHX^Hq(<o7YrCjSoJ;Y*VW("kQ7DK"?q\-U:4RXdMY1U.&!U2u`@'D=Zo^Gi42_Y(+*IaU[LMZs"4D!R4q*4oBs8DKJ
%5CZF_S7g[(K4L7PX2nrf$":)7+$'k/91$ftoQC''CtXs)l4XQ"%U$`.*aU0:K]Jb(0N!/Gc/Dhc8$B6(cc6A\p\PQ%RD1C(oOqi;
%4C7`nT2&[qT`tE7T<?k"BD:=tH'E<WN;?CB3S*1Fe=0Rsr/``b&P:OEU'$>0:J]@l9*-Zp(pfJ@.$"YBL]kT;@$L+*/2\GP5V5&C
%aI-C95"r:V1=Z83=XOGop?!cU:;CpU0H/WG@Sa@-/g=ti#r+pQH"p.7.5Q?/`T5-(B98Ubg1DNF>m^(u,g9W`H;(li)9.k/U4tm-
%K\q[7[E]R782Z1:4$#nkh#+X,ZAHMSIS#Qc3IIjL9j.<lW0Zq+QC#M5ZPpkS]p8l\r8h$e%aRc5XKGeC<Wp3@S[eq(X_ftLKI*fV
%Oja^u3-=RM4mg':j`=!S7?t(YfTQJ=jOi6L&8JVg5-mU[:j];p8ZPR(:WRRuZB\PaDIS=+F06"cen47^INUi6[.t@RJYtA/Ho0T&
%W6,#3Q3C<JqSqP\Nd,lbNK^Fkf3+7Z3UKfYBi1pdG=H\`:K_E'FXRF8A"kO]$)Ie=U;iEpiUF7cfRU]2WOgXL0X$FG5GkLg\m%]<
%$)gB-Z1R)K**:OWI(+RjescbAmsbAG1Si()^#Bf1nXF!+)ftZ\md5to.`h=LB$>Of/GPc>M:ML*ZX@`jkSEDMJl[@Dd<]&j46]ia
%QjLF5>P([p#Sa\k=GR647>LOOHR@30*tSH)s"H6%.Pn39<8UO1(U:&*;Td2A8SH5o*5;rRO>GT_@ll5nI\8R:13]@sQt<-sKq%Tp
%Ft)*FU7(W0XFnt4q/:+&#rP#^L;b^3h*[Z)R.f+4-7#nUFjNaJcGi-".Ts,4-,Qs?FOA>4cHYs`79]1pk[E?<,]]6I$5]W)KVT:p
%1nrec7(:B0GVo(]FC-W]M<J0,DGljQ3htA#^Dc]T]n)DfcRk(26L2iL:OlWg&nMi4889i(QY_b]fiPa>k5;HdZq>QePo9N`/n@Oo
%Q)>5mRfb"V4>.&UjM6bEF?E's.#LNFr+;rI(#*L6)!s/XBaNX%4uZBGW&Z:m,XUhGcliL(Nt?0;UEqfg>G'JR:B/ird[@V$EJbl[
%='qo:L(%G#Id-jF([:T[Y94i'-YL:,U@!6-Jo\3jinAmo>Y,Hm!BNVMc^?+lUMHAiZ@t;N9Ol)4oj75tN1K,LVOB;@(XsE4k<[@,
%Bkhma<0TCfa/.``9+4J=hD"W:6fMXP[1*SK-j)?i3Df6_1Rp&o6c1p44GUV2>\6MXF,!rR7CH-m^4Q^LKGe$M*7^[s[7okuET-EN
%AC4/FrRBarKSjFa[7TkQ#hOZ8O06_G\a!A!>n!1HRY+YilrM;Ze0j7ra(K#coZXnL__cun`98S9?G.$/C<9AqgXO<Nk81mnKB\C5
%m9pks#\6!XZQ+H.F*m+Q0Lf)hoAcBK)]a,lnn+W$I_&IuQ7/IbBXsd:B7<d]^AG"5V7$3)9j-,jg8<NHApQf5KQ7U#Ib?DbR(HiY
%+(%<"R<l>h=jM]kB+41SK#Ob/Za%oBA=4BJAjm]YD'#l)=?]!oI"Z"j/2<;?MXsfRQmqY)=,0pm@P_B=,6_%iB51$!0WDm#>8qqV
%@?BKT4?BKNK_XtrZ\Xer/k;D&`1H_k#nAg@3<BS*orU814A^s*Pqed)g@oe#r9L-#e>GM%,%FbQ72q+^obN/+iLJ7maG;%4>/!Nr
%Uu)>S\!MQ!*a$S7"7$^!]lZdoN)D0)Ep]D_=/hhB.ZhQ3EQ/k.(k_NL)5WRGKJM<2<+a>'H=nqtRAUEn@5Q*F>s),4m"KX0)JqR4
%]='<!4@qECeFGf&::RMY@eA>rh^t;ddEA.'"D>A)"J`A@#HZ]V:YZF?V.Y#-bW'OOTcQ+K?V1qG&(g?(&fHXuD[]M8rG:]N(%0.?
%9([\WdSPT/\Ul<]#I+Dc//6)`2@]m;E+-Ns!b#ilTi:agKm9b.r#a;?7=tO:G`\A=$d#`Rjj`?PRg>ri6eRNc-_kq'5e7<(a1?Jh
%Vt_I;G9@Q/d/ek4)ZVOI!!PrF8BhlYNk@H@W]uGoRapgh@^1c^aXd6XeFh5U+I'7h=U95CF3MG)Lm6B@cVcj<'%VE6>[^6!et`3J
%Ql*QWPB5rlRP6gc>:)ie$J\&19&Y;Satc7OaIM=rQ0ho11Q&2rB?O%OXW7/<[A3U+J1@<Jn`86E;s#KP)O\'^*uj4aV\t>!(,h?S
%RkAXn8Kca]r!MKr&tP^G"J]9IS=_#cKQW0.;qO:ue`'3OQt'QGbOtu>op!S0r,fh/j5^[_Sh1l'8=D#*b7pc!7N>q@`E`nMW>lNo
%Gug^65PU'mNY@<s`qPL*;B6Bg-+eS(OEE6/.F%(;-HD?I"`_?#A!H!:G_bj#<MnL=9dq^7Dm;g42+(:JZAC!`:R$>Y/HlN^cB'3U
%p/W9E@F6UBii>F4FRl4M()-BGJfmhKg^J5js"LQS#0S/=hKkWNT<^9/2cUMXLJS+b?lc41O"KXU[_OK9@]a]L\!9HAU%\"geb[#A
%3P]D`.ZZU&IbqkJRV9hhem!,B(lRnXXm+fc$6BK-AJtq([EITRD]=lF-Bd]j(U=MK(:=k4BCj'M0qMBjj%F@'qrMTXpJ=TY$'67Q
%W'$<$<Fsf02&Ff$Up4ULM1,eme'&i9LoY0>93De=pH&//ka-9k.(!Q[T0%pU"5D5drd_K9IfDVcg[(:tPQjrH+aI=/d"d;\Kcq`G
%h3AjIQtMN-OP<_SA],k2qjVi@6^h`^#+hP61065h$Ts(!/3Rc"+CiqB)kZSV&\BEnN%3\<"oY[h_PW9IlbZ1L+H"OF%ib,%BPj"a
%4N2b]_de8(H(XQZr3o*@6@9Oti:)^+J`tLHpu6CISD`Q?WceAF*$Tp^/qMJ7R@Ek#.QZLDp)K$r.QZL\#&Ub9]^&moI&E53o&hZ:
%2T*"aTM9WKgB@e_2,W+glj$*p&-/*nfNj;n#cFeb);@cjmBE*3Ngs8!5S>!8@Kffu*LRsRqb@A\/Ma/*n\9A<&oLUkIf=R,pNI.&
%GKtR;TP-9hE!iajo@UEc&?:o;gRrgF$?@n8SU/CI*c'I45Bh(5ft.,6\D@-[dl7+8lMY!bl!ZN\]k`2.Yqp<J$f9beG,;2!p846O
%0u!fV$rn,(&I'J%>5hUs_]eaI10pG!I[ZLLi0I>;:F=cF(](\;VoTj+Vt^)G@Jem8aqW1G2Cr^#G0'G9:/,b(LEK5i1ZKfZi>ILm
%b\!!f@sY&"PI=)2W:Ofk@#_n[Mt0OldheZp^Oo@nC5\j1LoRa+c373@=;QD/7,5<lX^'>fXD/8+[9OUJTRp<#Q<V<D45*Oj+dd#q
%:U1kA0@8D=j7PM.3H4q(c4josYg)Jq(A`;Hfa(3A]%_VLHh;X$eph,pk#I.l'N;A8jA'rhKd*k&]_V*;Y/m<4QiN.qPa/+a$4JHu
%@I8q@@3G#9U*c@N5K;ca&uVSC<g:8^^jR^g15XadeEST_^+MMSiUDsBAQaAgq>6%3*N.spA;D)/3hL#`.F>k%/iMlNHY[8fb3p%!
%/6A_`45>'m"G<^5l,XMP73_W>ekoTj1%hSF=l?(jND;W[kHX"`&5;-7kp2Z19.lccV6`":#gGhj%OEcj3oB>'V8Q(WmT#O^M)Xti
%4*WkZl,L1U#(R8,r/Xbu2ZajreAb?e4*6bm9qk\>$(("sC]s1>g@d_]-k'#mZ(@R<47$Z2&!gW228)QGq_Wb'.FG5L;S)Z)D3o(r
%;.PWh5Gg*Qe<BqLKsSK>&[8:D$5uo#FoEN=i>[KLN4P7+P[#1Vo;S"o*YFVfJ,i%.L1TKYm/[+48_ZYWbpk&J*,^5f,)0$Li,iU!
%j]$Ja^R$11a!n?V^fTBVPIEGO`?hSHBrsF6On?K3?cbs@PYM^9$#Z#Y:;qO8ZEF;Tb*XkTrM7n'@C!(Gg1N`Lo&_)b')DNfEGB7-
%B#7Z/Uj)L*65QHTf61]3Pd5'5XgXh(F=*Ns)SRq/eh#7YH=_>5Z:lgJ/VfDbG0WM4AEBso+[Ua8(tu"L[WF>^HItRZ5V_6L<7g=s
%0RX5OGSE,o2BDOC_HDj?eeA-+G;^hp76QsW=Yh[e;D_POS"9SZ/4IrA'Q(WbV_3pi03d,"_R$9QG"S$#9u=/t];n7j'Jo/jH2/qM
%E&_$`\NC6goa)bT`+AO0bfe4R?_`*0#j?I@EIV&0Z)80DIYpKi$:DpQc0,[<@CWnPHqa8'5rQ8NTP')Ea0[jHq#tEmm]_\100T^2
%24C=kk9b5E\WS*m)2n=g)jA'O[29]:jH%QWlLrJ)9Z^*@+!'O)A\MRI[[9CUq+hAD5L"=E<`6EZ9@_P&+bd7^7`,ECgc3lX:=cmC
%^qb.SL)pcIjuWq+g_.9)bfC;4%E=8Va+sRaA$nG?-/T8m':/E<JV;0R.I+5:Ge-h,"e_VZ>.R2.gc""+dCPV4ODW;\2ccofGeB*E
%,K`&tlBXA8+NsPI&=mb`l&_g?FoQ,CbuhOY6-Npq,`bGRo)S)1ZOk!"Kt)n57*g,WL+#W#Mt.'a*o1BC#aBrb?*oH6QKcshUoKui
%a]h+_T`di-,Pepr,$abJ&P4bPM65Chq/c59Vg6hVh4a#/m6O_0P)X[8+&uN]cHg)kC.RP[UM\a-f6;))Im,Apf-3+A`1eH9iE_V(
%YK_&#GW7E\a/r8ujQa>\XtGaa1m(j^%Kk^#?UbEUf:qEjTYe0ec@dVU]F3E4k6Cc:*Wpd<0QA&s=QSk2mkZ/\fp?R4?oPDA,'.X=
%a>F,[ct@)).mr0*1\ul!)=<VoPsFWB1'H1:'n*pXYp%^+F+Lb.jc9s";7S8X'SH<X7KHlAm/+$Nb]"V&KG+uPFtJY_?4BKl9BPg@
%rS<pRd]'*8/5dibT"&dmQ5YZAYhOohVR>L\j&NMK(m68I9uFCnQLA`Xba`rGe*3*6.QrA9Z0kl<&/8h.4+mZ7lL"DNDu=V:MKoor
%fJ%)BGf4:)jVK#+<MV.jo4L/N+_RSU[dnE,]5mI^G?CRhAe="1Qlq,4C=:W,!9)JR%h)P6iK5afa+earoTlRL3j-L4qiC]$MPA\T
%kBcZP&MKM<hJVJmb4-fsms+ems&`]#kpT[>3RTWSGY!OMcD#CVlLJ:*("KKj@5DpQrDq,K9!ehf-:e;AJGcM=1ub9^1SK,#Q3KuZ
%E=tdD!nCGb!U';VL;NMX4T<3*BuKIE8JK*SZ-VL$#*!&fisj76jkY%&,MeF%!`HD,Hl!*r[7\7\P=s#ojBlO0,Xeu=`7m6ZA(h<t
%)&>;T@8'LsKg`hU#>!^pkm?/`G"[YBK/Q$W'97M#+1c9)0YY<]JL"V27F$&rD.\m7kpSMUP`:M.-@%JoA@9`#HZ8^08WbGor3D#D
%&/C\*^/UmaaYo?UP\`1+]8W8BXr1,s=Hq8pZ"dt1R6[NVHO_K_S?uJiK`6;=#lC(pA>f^+'5T/-oL"2J)4s&^bZ[.+?t_K/f2nh^
%gQ6Cs<U'&Y0a3Ob,nMpi"pd=P7`)[KY2Y&@h%Q9r:`'HCYc<XNApJoQ-q"o9s68?8:nqlm8t6dq&KYK;@jumD23PPuh/2_infjFI
%EQa3lB(a@53;rC,K%DHT&qGkQA*glTRtWRfV,):,^A&UY#^@!<Nbit%2i@lJ")T+BP@=(VPjs8R5ppuo;GneU9Ph\O.#.tU"'Vc8
%,=j73*!gk^8/+s]3?*W>0H%:?jRK,o6MPX@5Q/SmoZBfgm@[GKPW!I6O_g!rTZ38QN==@*[S$(EVTs"A@DK1h(&p!3iqI\V"_=Pi
%l+$$OD:?]`%Y2q>_2#aNS8qft$W%"!Q1p0i@EK13rh(@3X5_ZU+;[!5SaNPV^l2Hqe`enU$fD#\[@ChWqP!LM.MgL1k/NHO&:a25
%;8L`R`TQ,IoI@hHcY)AcPYtlS&);6K'=,h4>UEsn>:uOW7$XH!V+gP,X*88%@"U$cc$^cbn5bFa@2bpCpVt5i%Jd:Q5I?,iM1Z+H
%MScd*4c1'WMrC(BP_EM(aOIZ,fue^=G#]ni_/IW$5ZT:Abg-<("8Orn?\e@0)=VO<]U;GHF&$9i&'o;H<2?17WfPkK5&+'jDA#']
%o*g-\NFU44>F=hTA<!`MHNAs7/3<;>P,8ltUJ&ePWX+GP\2ZXt!>>VP_aE_p0cjXr'HW-H`Ub)Ie/>t<5N]WQ`#Ua7kj8*u1ZSEp
%pl[fF*O,e4ds7lcU;e,mE]=4U$g,LEeD8C3=i%9nU;EU+)!N&WZ3lF,_poIRAE%72_$oFYkpO*l^GN+TrAK\Anq!*>!GdR?A4Xm=
%1]t(i&JOHSdf'uni6T7nB:1Q/]oA)(3&k)S'%Sg!>dV1#(0lYiLXWdl*;l/=@Sr=&<)L^"=^7(Tng_!g^RqcQkeB?NYlq\NEADE[
%!ZQcu\R']Ym)>`9I6tBFBoKAo#`5lCNE`#OFNg^_Y>-7f+A[;SXH]_EPI=5[,$7M.hC3`@NOM[)1)B5I,%gKcVJD`30p;9+.5E!@
%H`%;!2!T36?L'$aouX8]rmj9L;0(Y;+crC%Ep?cTRi1JfabbTk`$c>u=<9`gF(?(U4.HQmTnPO=4n])L@\kml@dSq11DWD`[?Wd=
%]J^-ToPTWXWr+pdE1NdLfc9T#?I`X*.lCj\(B+\UgK;*S6CrkGMAu(g(:m]_&$/&\bDt6\)7q2:en9o%=`unh1s=qs5$hihENJ&0
%fp#B4)1ra9=c_"[3BcG[J$RROQR?AA/;JPo;f9gnb7ef,RI%+UT".T8bpH4Tl1DR/P6k]7%o]("(j/%'RFR/e/l02?Vd5lf&3ilr
%'1B:+k6+@.4QOTe$$cb56dd=,=0_^+H.U2]O[m$KF8Nd.&I1jOo4&8IUT#NT'pk?`RH-Xg)2R7,cQuH&3F?12@8&(XTB4N'Ohl;Y
%h-S/5STa0%Fmr`>:ZFO++SC8d6I1$CUjsVqXVj%(rFA,3lpKOK!U,DK"1d+\A/j6ga1h;$Gcb:B[P,c"aM)tha1mN!Fgk\^,L6h2
%;Vf'Tl;ArNjomXrlD,UD5'.\tgR69gRPohm8K;s!qdi_k3;4dP^u&e63Ms/*UAi_bd&b>n\mFQUc)]NtH.ga=q5BVjoP)W<s7l!i
%o>XtE^Uehh;$"RXs6R!1A5CUAQXqC!hB$e_=$&=eS%Ci+5A>K)p#TDqk%1U\o1@7=Ho:no'q;p"PYHp7>\Rp?5or)Yr1T=<MRU*m
%>cP=a]3G[5eju"R6-3$[U2'Af5W76T%s`pMK*up?0_f$JE@Y&I&Df.bJ&i`Y`XMbs*#p4aC^^GEG",#B_RA*OcFkBs/DAeA!_)Z:
%qPkq&#FqhemM=SQb1NF`7'cUAY+h\s0gH:+2WKhn_!Dk*#OR=\_cX9pa>7oj?\4<!iZ9sq_guhs=]%VeP-e&f$@F(ds)>kW,T+8#
%F_!Ft-+(u-6"F#\E<?jq#^MI^5dqD21qohanQb#`NAs8*khBLKQ.H=cA?<gj+3SDQBp!EjQU)(hPA2fb=YUA&]8SP:I)>k*<?[Cs
%[m`:h_U^.*Lrf3DgV"c^kA?kb+XWN'Zq5!p]P>L>"WE$ho.RB/*DmjGfeFFbFl*7%0*a=0WBG;J(qE;P&"!?ZD:sXY/sn,*GE0<D
%f`pXEqD]hThjg)ue,qg`dq1[S":cSJDk5@3"/clAT2TMmXpMUh5#"DM>g@+3PNQX2\oY`XMoYF687j0fPAk0dl:0Nb\D7]OorNbc
%"_JKtQg;c9NO/2NY@Dpf!fn#j@=;h_nHkAP*3:EI4m<$VpMF<CJ9_>n1kaZEC42J.GS-]sp/,#<!/p)c/<5\NDZ&PSI4OK@>U&">
%8B?bfSk^W91t\SNdNMMj@&MQ9jGe$-Mj&i9g-oh7f%9EdQQ<R?bls!$)Lq"o-9<'9?Z<@j@/qR$V[&Y(c<]4'*6Dhc@\(m*LPM+U
%Vhsch@KXaC,`m]5V".DLg=Ij[bLfb!gK0:hr=BsC\?,ek=]IY!GH:S>gqX<.-N4Gg(OM<sc,rDPQ$DR+]9XMd*3s3%;dU[C_c5j^
%oW36PUe!eGbu9_/aJ^Vf$mZk\\d[01Z9J[GUI1a3gC"_t)Y\E+-j+(hrJ&Nlgd%3ZBGZ!*KLPO;ZHdWU<pXd+aPJ3RH\Ou+bhh$7
%WtQ;ZqRVN`A02>AN80lj_hKRXB>X;W`JmphAe)TafuE7\g1YA\lF6Y@DdJ=i2D85WQ+(VZV]koh[jea/f1asbT<R[jk*Yj&:%[+Z
%?hY:?EL;r:Xq(s[OLVJ;)fdMf([)6)a+J1bGJ7ZdAil9udK]/UZ!(TH=pF$\U^PhAdL5[^(B\j+F^(,<[C$b>oS6qHIUQKFEk,1O
%O-gKMoTO^;;CBMZ8WI2(kG"l6L>%obm!AjtV=Xp.W<?WI,,$Df]mU&^$nkf0IGic@5mD7)X<GiE%;ZBlhZLJjLaH33oqVO>l48[r
%#Nd\DX\J?8,Yh^@&YjV)&+gLMcnZ1uquYZ,qV"f=>MS8khCQQVS2GDm%lpq@>%D_g$CcMDGR]jmKIH!HOW5qi8b7ZPKopTF&%9ZV
%IYl>tI(k$sb-f5\?qE&SH."RX?khNrQ"fme6]O9$.&XD^Y+)KFiYID:6T!I$/<Sa\AA:L`'0b;;GNHY2-%V8r%eV_$WJFpR\>$!1
%J'cbk.ZX2WhZ*2%+r0f5[42hD&\g`C06m*D.ml\7.;YS];&&&),iVG!F('=m==_=,:r"GpJYo=],Q2mX4*7hfo/Hq2mD!#$re/V,
%ci)WtD,?T6i1Tq`+`9M.<37$EiR]/i7ePEsr/BC:j\I=lhMUhuo^dfX8uMsjh64nCkE_qu%Mu%s6`OIW(V4q(aYB[\H!WceY<OjG
%We(4V>uaqQcPoLSH8NAW^87!jmeI'X:\]>7gqQM=&T03_<9us6fUgBDW&A`2l1KS9i3*c9O*H/GU;"u[W95o6:@HS9e?@3sgI1F]
%0>eQ<KZi,SS`kJU8)0cO2pJW)$>oP:U>_'ipbW&h%8Ek&hAudn4Z]5)q=_A6?o[Ua^'=!Xk&$2u1>R]Q>P(u'q\j^kYV1)7lSWeA
%UV!a;T=[#N;FlG%RiHk``G0R/HYPA0D[Xrtl&k^rIfe_`dR;HQ_dS7R2Dc)b@JndJWjVI?SPQbj'O<]i7o]3"4KKfC(+JOke:n:O
%jFPGkg[.><^l%B"!M.4=4McXt;DB@/A)Wu[WW`I?m9;:3jSJE/S*b;?dbU:^_RRtkZ^(-'p+Og!(`,5e1&c+^e(spk34t=4HjBg,
%/[LFB(NuW4n%ul<=n5K.3ETt7-B.7pVD)>kfnJt%3W-O@J\^FgCn+B[[)OcHpD_MPg7J<.9BRJ=eCLo5gtR?>_.qB28)NVUIn2Z3
%[G^X*Zag(lKa'cnC!:4ZGi#4aQb,Jm#i<P/2ss$,Am>spO1sNBrn'\bDo8d+4r#>\oU_Oi'WPX+mQGrK='ojS^BK+LAeYO+[lSMu
%B!e8$%MVmcTmR#])UOtOr`qk2-"0Ad2_d7]q%!r*!]PsB\%`)rQ'cR7aFS@Fo7cTFmFA^h^I!-1^HVC1'D+0U2Wa-@]%bH`#5L-q
%p9FK1rC*a62YK&ZBL=^)kSh*P_+b)Zo@.,$U3Ao,_7L*O)WmM[\'b'grDeH``ni?3$f,B?NSaEn0'_'OrnTX!lRMDq#&ZL]\T+U,
%s7AJNG/<u1X3a)gD#uq?i8+NM>dXKHf7grpDuRs-oZt!6ln5MZbMGYY*dp,As4ea3Mem=cL$jr1V"5XU];GP;L!C*`q1OZ,.4-=j
%*=DEig%3]hf(R];3oFR<78Jg`S8^]2-s96c'uh4FB)YF;X/ln//)\.NoJMN&d?QAj!_XqKUY?IO8EH;T7^n[\g,Sii='Xteim5)S
%=Gm3*GDbf.Dt=<X-`#?t%$V%'agT$$D3duC2)PPu>X!MBA,l4-'7H-sP@JU<9Hg5[R\;I$O+G$kN^Bm\&Y_>orF5ISi8UJbF<K54
%)u.k8^L;@m#3DdMEF7J"+#a(!FRojtANBSq5CSBFbJhl):](:Lhke_G5213MV[%ek)Y9:<Z?/;A&YVZFrWPnK)F&Z/m4c!HpZQLq
%-eH\]*o<W'0L,J;GW2e?U0c[078m!_<Oef8/7]sRJ@hoG2C4r@R2$-WSnG%_oIGu+gge66>!6dZ`0;>k3_Uc)IJ%a0I"#?:nR7lQ
%]?%:u'S0sG_$cN1rT0L=l"bB)iUcGXfArkfSoQfM%l[iu_MN&=3H0Yaq-f$%Au-_W;!plQ:)tg@[XJO4Jg/+[KIpN%%_$1GD<^LT
%[G\SR(#Mh9?;N2STGVOE:n0f(].YG)/Dd"gIS94re%MmToD`?0VDk.>F,mpHmk1+q0VX8ZgsC6eqHbT="ZXWc]6)Dpk$e@UW2Ito
%rPoGJHE^Vq>"*,Yfdt!cCOk[c)@&IL<':pu2m<1-qZJikr#77DS+.8Io+'R]/:f->0eVqB^YSSVkJmi)@BO\%bXQunUT>&.\l"+l
%nQLlY;1F0o1kAcD7^o3Z>(u02^-JkL]P6j$8l?ODqq+)C6a%hPX#]d<i:]2\?01u&h&=L<'CtbT2KX;_CMW*Im^_hU*Ym^FWP-[G
%AW3kb7D9_P0=A"0?-E8BEG1ko5K)`HFW-;1T[]%%A?+,OqEqA3I,A^]SQ<ehk7&_-N\"t.]r)aRPNW#]Lf2O(5t(O^U?W*N@E,h7
%0%/jOpQo.3Cs@19f24<"4^qehM:fu4@s\M]fi4*e=u2k!)^kJr?Tgbif'Q*AlQmM2XnhrsN]u;+XRe9+?,-i]"Iu/%\k/h3D)Zl3
%Q[iF>2*UuigN;'CmEi5,IXB1gFobt60&R1EhnEE;8SGNo-K#]i=+1+elh2W\lQm@S$i!/N;o%Vm[nljG6a(EHZg?3g+gQ+*;nc&s
%e%g"toXHoPrVhZXh8HqPRs6T.IJJ32-(ikXRrk9qX(;3Tf?Hqof./Ie([d1i?+?t^Ys3qhU"@N5,a@KHr$KPcHjKHMF<0r]jaK!*
%fgi]g@R7KB@A10LiBl/UY[4WrZPp.XpBCIOcp)H`fnFCYids)I^<1C%\#k%F?+:9U^)ZjAH=&e8d25$Bqgs88HCX**FH`A1hUCd:
%$bD1=Tf;LJkkb#GP"S-B2)k?FTV(r.re]7o9+]]J/nc'jM]?$<LM2Lu6bjML^7BK!Rt+K1iO59IVH<E=d(,N*$B\@FP.(1H%GKmT
%TppFRFFO)ZOsQd%27n6C;71CmiH=l-_tB#tg;Nk<`@5,VTO5.9$baJ_W"s\`4@pm)$H4t"^7_*Q-F%B*[mNnncJ(u-[#a)Ph8eu=
%Y&@Z#\KnOcF-H&#qIs=(T6T2+"ED-9Jp%10aDhP(,?K..^C.`hI8\^7&gBd47D;Redm-nagi"5Q9^Hun0'FY=L#0apU$KnR9.p%a
%`n[Be"MKNgH2Gi=K`)W!g4fDJ6PHU4rg#ja$$Sb?M+\#6]F,OSgiYL!jVRR<d$/I,\#]sq/RuK4U"ek:d+di)U&OH69;[BNenjo*
%KDH8['<g/W+Kh&9cm@U/Eh!3N9OSf.]7:]DI61Tfm3Wt'*iGo`?Vn/D@c?X^gF:U?qs>C3]#f/i2u-eDqXjHD90fO82u11\DV20H
%h!]D@>jo1q?+_ggr7ho)IZrk9I`:UK73V#QO\j&)mH1^=>91N(o/"e?]6f_tq0?,(F8H="mPc*+)*'0T>&'idO^(ba>F9G-Fc5Y-
%b05:&\XWI,WD\l%L48",lh(dPp`&jO_Hq<DmgJiD&Mt:YM&%U4q9pm@;,u,69s'`NLFmiJE:i8&^5#)l<23\,']:^Db5q"fEDB0]
%2,&XfpY!nH/9nAErO`qeq#)qVX>nsrgPeUKn%:Mur>2o9QQc)Nc#2,8@Ckakfh=n#^MNh[(;2nS:$I""&s?5>]@"N8OJkXJ[\LG^
%bfasRM>@m=MX9=q&.>0.:m?CYo@N4"JCiA$BeUdVdTCCI_eN0N]V55G6>%<g2XEcn'0b;;pGOf,K!e:ZRHJEJ;ZO5O1F[=W5AqtI
%%qSn<Lpb[\!q67GY?G/NZKc/7YGfd`j"`jOm:<e`H@*bcAo%%WKsIo3i80V)NR.a'O6n60;`XTcN>&n4EMB*!ec(EWm7S#B9.n:i
%oDPd2IJHL9K^LJN$XMXB6HMfqlOl8K';h[X?dMS9O#*E;gE?rar?gG+h#tC;Rt*/6IJ\?4-)&kXRt+km:]"o,`-(r'M"Qo?g'%='
%a!kC)d*Da*^e;=bhWmm"PW5]q5K*GVWp)"hHQ0_VU>"`.Op174^!L&t)nNb2^#Y@&C<\Bf=4Gi]FBO(Tm3[VS*=LPSqimetQBY-E
%f"27_6J$u[]9(=-F9@bZof78(d8*+s$Fd8N'm?[f)0/$TF>%a&mY9"?^L"4aF1#VHmORR>oM=7\G<tRKRF!;<=#j%;-N7%MCC^GQ
%kV[@*6/4sV0j3nFr?:*#o[D/$mYeQ3MqhVnOk\;<_;!,:^pPl?k?mPlC<(0sGX4R]Hi<!-gQr2KG?iM/n@hH_<>SdASmk<d7`MhX
%/.E@B](XA`q(p,`^T7rV)g%]YfA"=&S`hs7&)aAJLSK\sNV6d@(<>4VL8H:,FdZNrB_`fcYsus<<#s`6<eb/='F:s"nP6Ibmo->Z
%kLRAn\#l6&RVo%2qr_eZp,PW_6D4!/WZKTs`m]daMKO=V0'<l%KlJ4uHHFp^m-_dW@ieCaq(]'i^:YmPV#L.V%Ga4FLpu[#2ha"Z
%bM:+hLg;n"Hfn3ZiQU%8@Ss;o$a"IaH#eR.kA9AU4g3,eFZtOprZ^ITIJH,-%M/U:LkOY7F6o`_%r^R5.<$7Mei8YSaf$b?:/K'c
%_:Y-L!^s7jSEf)@chItkarYS1\S?\FU[ChGO;MZm6seO(pESW&,U=PtXA(s_G$d8BU6/"1]%om8_UY8AZDD%+M_8:@l*"+"SmRmS
%Nt/).H/5WLHLJZQe_sXX(c@gkU.7K^,1f[I-.`.Ipk8q"#^0p?M1FAQC>h`4WgHFNWL=[?e8M)V"DR@\ff+Hfn/^-fD3"Z0h>hT?
%!^u\hq1VoJ##h'GBI!\m4=\i<h>hi@piq<URD)&lVO%^B-(34C(!S3i!-]aARR[TKZ=qVp,n(pfhe\sa0Yu$IFHQ?2?+[S\a7APG
%q`TWgj?W_"0pe+'<b2nDc7=&KAPE$!9WcmCHJmU3U1b1*%"b;V&gXLhs1n`rOpDc]-!0"QdDQN%IGecsDM%>=66Y>X?%!I@0IXf,
%%dVN"4YBP9cb6FAFE4=AClMnH@pi.=Ws:Yrok+2(L>>ttOuaofL9Xrm3ARi9Fq':RLB71f=UkrL>jZH]it0e1eXYEs1rO.5&eAKd
%I9!.TEi1l$-ed%>@l6(n.Y9&s09!"cTPq1u]l,A+:A+-UX"=0VA$X"tS>Mpc*#IQ/Kq\r^(I>L`\gj<top$7DmN3It#%M@(G1d"n
%o+>Ao;N^,E53JVD+rs2q`BV7=ZS`:(:;!DDB(9qa0R8d+?#k*LFE"0Z7cdTd<8/.NC<'jnR^<&oG%R6IQ-1%195O_$XqGS*Q"&@@
%TKcr[^S*"XQq%An^*Pu@&FgII9_8o`L:ds\'.?7!\$TJ+1]gH8pJE7*L'SV#)2>:^=W0a>[f'm7Bj_1^7oV^pP#i\Td?pgt2+3Q9
%nU\:0R.hkn`_VlFJZ)Lhh[hHWX(LYG&3oc1!^FmG+Ofn(;7(X:'H>MY6h)6blpl]S2RQC!3_k[r+iPqu]hn#!atp-.;YjD/`@Dn=
%12g:!!XF%1'GraS@R-YggCPg`W^#iM=ljX&@_oG=6=hHnTIaOD$jJs5F.V7lKDCAe'C*6/?nV-@$14^Br"p*seIF(61M25eP8O'V
%V1t1F-s(Su/rn%rjJ`9mG%W$e&0agoXJ4?G&o>p#jE#aLRJf7YWTAl]@FZV#&bb_L!#f)tgbkC7+6`kh+a?I[;=,f7M7X&FK2SY3
%"bKG+LDqTI-XITdM.oLLMZm$TIPQ0<eabnpHVsbVLpO,ZTc"1m<[#U8EjeeQaU,JSH?)?@(r/EHj)M`Qk*mf9?0Fdk$Ia^)"&)^j
%[6)H3HRT=s!AUt6:@TXoB,S?H4A8]:J=ub?=UqIU?LZ31p?gt>M"%,+%Q82X:m?KB5Soh*`q42?=th*OhpR>lK.VmnC!Al<XUM%e
%;H@fI@5WZe\@40JCauR[NKp#VkgM\+4e'S?-:RMAWH-p8)U,Q^hBSm8KSQnE6,C,6q_ZiaEO9VC+4$jS#B4IskoV"L>5V4\`l^Ge
%ggHC?^53afPQ`O&=ln6]bmPEdb4npZ9W<_n[i<@/;[%p8H'Eh'-Jq+FUr4D%BK:?GYKA$)X[(TC1aJnlHfYtV\5?Nha$)FU<QSM,
%:o"id%X83o977E)W#\pR!m/A6GKbsELAN4QKA$r#s..&OrXuk]O6#>l)U7`dX$mtN2>qj^HghY<UqfKaGPrPl8bhs$0l?gff67>h
%TPS1'Iem4TV^K;ZP\&4aStW>W+nN*+_tHR0rTWG6\-UeNW8tg0(PtVC#`Ws&L/ITP(sD&J`4?B^1T>4d[6B-$>_)8S#LW#;7>J8u
%O`d\=$Okhap\/r/k3YMp41mS<$HX:DcM[3sKX356)j0#M(`Kf@ISO_#;$E#.RhZ1&C/o@k5f4h1R+%6G(5rl#*"'!bYYbLU1CQs4
%"q9UM'2't$'\1jjGr1BR[ej'2:B%6+X,'fF7B*B6W3hk-s/`-eZUI-F')2;Vs4jlqSB;BT]5"Q\J-?GU7jV+u%4k]'D]kMl1&-hF
%k)q?YW@'(cN'H4&X><"PJ5t\$>t#%9$qmkeCKpNd&8K)A@G_3Xi26NDrE'h,j^lSn6(nO3pH^O)`-nD+p>$JlcZ2RJ%[HlUWiQF>
%<0!!o"nR-G$BGkoWT?$Ig@7/]"9->ZS=GN#Yj':Mm)o.C0=SPZ7n#J-`%ra"B23!>(u">r-8LbsiJQu0;2k#Q_pe2WCW;]+na+id
%"Nq\+b9QI/T2qho75]Gl3:mtZoq=-:[#8/6o6ATH#*(54>q`\5a%#?,"MLs)7I#pcdDs:1Vs3IJa.cBXG/*p#Wm9#Gni9tP;lb.X
%#gYJB&mOqLnr5K1UWgcMeZLI^E"TfHoBNG/,9qi/.*8(pD!(tN:,''\fPsu]JRp6)kB5ncbffUAjjtRZXPDS7O"1=?U9XcQAbjP<
%F`:cGe,T!OH^a$'C^Z8ei(tE49mYLGj!;tPAE!WUae/17HZfFta+HQ67Al%n3$D:-*.I"ZJuZlRh!_#B:gLk:],&]Zb#?I1:o<db
%Dss*t+"JOjTCp\k2=:>nKK`YkIZ:$`L-hE'!_Da_g;'bc/G&PA;3g1!m'kD;[fM_lPAN?sCn;FJ3%\jf55&gi5119IdmW=Cm3qL5
%9ZrNG2_E`H7qZ4n"h/5?jE%/P;P#_c0>OjL[2BqeW:\r@l?5b=MG>!&8;/'a#h<lZ$7-D$gNsV*jdWR/N[eO1laGrM03"d!"BF`=
%J+mnP`rMm7f-V@lRjX\I>rE07isD&G3,P12h09ac2:/bgl*(a^/0cJp,Z@:ppT.1s):.WkcZcioDh;^7J$;?VX4h14=OETFS:qIU
%Z<a8iXT45PZE^eP<B;ai_T(._h%/g@l@\r.K0:[($.ot(COCVKdTeu?dgbtdr(has:W!P$E$0[JfTZD9L_O(IBdTI0(NGtpEjlAh
%.P/C_6TmpL3WN[(#(RW1BTCA$KZ1A\/[/Uoc!qaXDM%/Tmu.@ir<;hLneO3T9_6]")JF%ZVHUL_Dn'(21:ukfX;%lde2Z>#TXi)O
%CBWhs;Xo!bTSg:\4l;o7mI%(V`8pSc9Za(2hk2-Fg)R-(2%C5q:oBh]*(*PVS7Zk9O=,Fn7`9"?c:=_p:i)#1Ym0OtDmSs&m:$<a
%<"\La-0MQXG`q>tBrnheTh6;%002lI-q$Qa=MJG-&9i6J.n8:LhO#F@Wk,H2Rlcnu'WVF^F7LR&mD@jU%g:GTf!hH<V2M=^-SrH.
%9&eshe8u[0ejg9,oQ^ag//N^Qa0H%&DCCSJ7"MX6+_92M0LM,CD;9Npg%E8`"0_7)FXnA7LB]/2jU_re'\M[!XP@)i1;Hp$*C8;5
%4*3\%7@OUdA'%Fj[)Fe-B/NL?WFn!uSuUX.-<+q"\[+iqD?n_Fr@ShS-2YY4X;-(X'u2#-XZ:W"dp^C'aJb:,?aJ!&)*D&3<<M5@
%f3Mrf'<E6t`D#iDIBM8d-/be4eH"%)!&,^?!<lKZ4;qT/OWDa9_*E4MAY&4'omG/OlVOIpMB!A<L,&nM.@_r,!&3\HbH#@1<)5;k
%;4KGe0%36-PQmL(=Z%eo?&*iAM;e(Z.sb8BB#M_VOHg`npCH`1;N`YihEXgfH:n'Z&`8WqeP*>;+2bbc)=<cYhOVgZ7ko'>74Br#
%q<JF-BY1:YpA+RN)OJKj9(Gb`DlPB@U[ukFle)#D3$/MZ?.#F-0A)rn:^jO`l%dNaJce@Vq)gX@%(#->(&7R$3IVT/LN7dLRFJ@E
%fN'oJ)%QaCo?EfQN8BulCj[^&Wmg</9jRR03&\*^S8ulE1+B+Hmt!%OBt>[69tsu0E`i%"k&5#-j\:G,nQU'(C\k`\qcE_ulF(Gp
%@(]:Oj/gmD:0IO2oFRlfWCm6X%Z5`qj1,.Ir34VLlQRf7UItgAoWZ]M:2f[*@cbdTOh=@mKGMC6U-5;AIoC%hpgNQrZ7tU=5jcnW
%%6d!_^?W`GbS_?l=b_D:bE9hJ:(S:mcs_iY/X\ac=`$?=R])o$`t>;,C_p4o90:spU9KZuX+&^%68BXKl?4RpVOlp[Lkit$'GSn:
%pP;N\?0!'7k['>^cesjUDr7BN0;98`<5^!a-\YQSnKM6W1'.?UEg)oLh7S4cW=X_<!4(,?Ub+a;F10)2?tB.rrZC8qW%)nIU2`Mm
%10kId*\LDs2mF5546n:cYrg!@Q/f0Zl&\Z6a'.;edY$i"G:JMSnB=Ip"c07!7C^!jJ=fNuAIGK#o8fYT0rZ8UhfIFek6bWYn5Mp%
%QdL+G'tU+p/;!E*6LmMB\J"%!5p^9-62!rj:N?C&c4PsnHJ`rP(->s<A'Kk+KnImLi2".[+hF<3Lb=gq@\Ul&H:f1sCLNab3>=PM
%F?sPsVT8AoWQ0bY:5P\-dTlr8Xn)5Md)0"#/,h-3\>LRqQSsuCmeRHeC)X>H"uf<Ab*WY13lb\H$[*R1;ooKd;764A`YaU@asW#/
%E/H,Z),g-=4RIr=3glFo^Gdn>3rp'3q%2t;\i'-;Joa-BB:FRh2`/Z#YJUeQbJDQCpTr)#X3V8-_%/;<45AIKjufiRNBMY_KGAAN
%`=/"6Ka&>o0h!E*.``3=<%A\?Z*4$#C)?,n;Z+%i/0n[e"XuXMA"#N4=0a3JX0"JlQ!^CLHa#'JTkg?q*>D,PMD]sIh&7FN5:l^'
%\q]&-p(RqLO#P`IoY:Dj"VdqF`DBbL'j%5P]3#9h&)9">6AAsb621699tCPc"q,5kWnEaP:Wu+F&K(4e_[*^:eU3%7'-aF^NDED?
%#B:BSS5<^%cbjJ(_rCge#l[gId7g0eBJ:!>B(iK9-DM<pH^#eReFpNf#t*6g-QfYM*t&%1o?N@b6<)qR,%ZW4J%,;MQ/*cM@TjoU
%]@l[kDjXUdA\>-Y],p=+#!);7BF?ln]`j\jPNF)o2ljlaXXlU?"^/g.,?F1W,["e_X[dTY"^ht2:Y"-6!u`eNk"&A6O/N`(:TgB<
%'"9]>hIoB0634#mH)geEi]CWZ5@QJjOIAdD?cJNm50%IPQ(/e,S&R#0]-8a==U)_:*\c/^:AQu;X$LuN'mK_/X/O*`D[2SZ"dh&:
%3D\?!<L'he$<7#$#Q&n&N]YMjG,h<@/O2tKbp6TBI5Y%@cs#^MTud>K2;/l<'FpbZ#7ad\P8tH9/1pAL+;1S2$dI)'*L^uPdcn3<
%;_Gbb^U<OJR"<C@056fC>_VF>/F\&+iONAD&3lrbL"s(8;B:hnhc'&qqRZqPXG2%@/4Dk@"J*i]VA,i%_X!s/d1hOZL;;^Lc'ekK
%-u+AlYTtc0$?8>=/D=A]/gBie8g:fT4VDA^M62!H0d%TGJ,?8ZAVP-T^^Y5bg7aYYTg55f\VRk9['!T:LZCJ8A#Agu"a7h+)mjY[
%TdLIhPk+KIps6OgqLX;&ZsGN_o*UpFo%#QcAbL@qN$X.R$l-Zj5PG%r+b$3ags"P%O'e"9,r*$P>Y@drq6?OA%%>]kb6/I9R`RlY
%ND`!@"u;"o1P/BQAdL&1LeMVlAROP"@I+rcj930">_1RKBT9'%'mNu//US,\-!P;g,0M;]mu@5WbV953F_`UMmK0'T8_#6FI?d/:
%9%mma2`ILMT^="s[uG*>37"_l++(S8lJ&K8OtO?]!rJJ]c^^(h<21:k1QV$)f2(o-#,4d=%1kPSR'nEes'\&UN&+QF1C43NX;?+K
%MEJNoXMkS;0c=M`<)poVLcJH(DZ+['oDi8Zc!3eSXaj?>k?&ZubHf3EgeTN@l->Xqb;S21_Ku3\,*J#MY:E6UX4OsPnd`W]._?N_
%>Q4cKI!*&Cj\C_i'e7`I.mt-c'^B._M+"j+]jA%7qZLO(l-OqW`s.L)d#XCthn:TMI0Bl63VZErqsMi43Z(fYY.4Wt&UhS0'#hrD
%Tbu!'G:3_700@ajbeBe"#/P9d6o`ZNVnm3:$p%hB(-tBOS$b8Jg2Y0]h:<`n$t!i:V\kj*n4qZQ4>Guk:?#A9U^;;KA[imS.\@Jb
%OO51)N%7s"!a$&XPX`[^hMJPZ[OCmKi3./X5KFjJ_0!A;h/OI@4X)aO:M]<aUrLu!HS2]`kckH(Gp?b$=r/Kb\jme:]:orn<FhN8
%<8[9Ds)QFtAb-s8LJ2fk0bnK^:oCVPKW9`V6;JMt)*)/DU!ddBbX@bkXBUJ>*s",4<<dJ[dmdB%e.5g%g$EGV+&W0DgY_O#"O!24
%dgAdi9;r;'DjnR/5a"@L!.S!8RCZ['g&m_;M=]CWr,F"(A&VM;V&TLsA?_$8!3UmfNEbfo7Vd*ePMOR"M%K2&lO<<^V`Z>:fBOD(
%!EbW^5OMHH3J`e(%mBN?ApZW8Yn4ZI1#ksa*bBsO*Ood7a/7#%M4#"<,tV`O.>4sn<im/Ga9qcO1,f<Rq2e1,T2EQ@gt*Dn:\L(r
%+JD_H]J!P^S8_Zm`js%Zk&4>HPn0'%A!JR^o_S]12#O5^lRnA@/0&YC/b6d:+#piC<#i4lM70>i"W=n']9[Y;qoIr;>Op&$AY8f@
%Z$VX)El?#d)'u>0h`WW3B!o]B)f67QiT<A%BRKu"8$&&i9>A7];V0BDW#%4;>[eJ$6?:KTi6r>](>H;S`6nsIFn8Gk]2eWg<\LSS
%b/pOeHL(6o4;'S]cg@Sf[6"7oh4dH4Dcg(A65eS)=/gVmO<&,`+sApt)4]Q67%!-s+'BJFm%N6_;5:N+di\nIh7V--2NED\Mp'Wh
%:,.G=b=C1bg^T8\UIH+.GZimr<]0KBSI!W<j\8B4X*M)sNh&]u?;FG6*Rkc`=7PEWn34icf!?:>b8R)q8-;o.fgZB<d!kU$XqkI:
%8Vaj!6a6`-k*t0IHk8pnVN#%K/Zj&0WqA'$<@8EIpsp-\JZ"6DEpTLIeh2ukSLl[imMN=GbIQD.S='oc3et7b.Z6$:\*P^e_H>GS
%$Y7FFXLf,"VU@^D7tFOQ&e[f$D3CqA-GWn)6KBA-(NlRDnX,%mQuJ"Jk'-ebbDO;9_F-HGE?g\/Pb3uIo#C3fX3T%h<'+uL$"F6+
%Z1(S%$"upE8Q[5Gp?9<^F7cUWe;?^2L:gLIgZP<;TXB^g3/m'"M%c9ol0V3A`J)Pqbn6V`E=5LV?R=IrISo_lEWJI'UZ[_XSZdVh
%53$85pfXu?BK0&`D3P>pGi:hua%[0qU!]ddL&A!u.4^ThPbqRgdX4I<]cN?bK1^k,'ol02MUUlp=-M2<!U/_\nCnS$I8YKm<3?-]
%/c.,kL\GhN*I7(3]!5D4a4_M%f>i(BOn0!7JHHO!PM^'3D2mMM(EXLA8[^B\b8+5VIa5meqKh7,os+uG3d@_O707pIdRMuc*;^l/
%cRYd<VhG,UdT^D8`J1B4+ruhY>h)1;grQZnBl5d]gXO!CGu!'5m@Rl]Dd?p]lM,67n=%iji^8sMJCj'/gX,6,*255Db+punB.*E2
%'L)S!=euU+LQ!?@f]N]RWGV@"f?J6MFn\+E\B=JmJ!"6M(QiQ:C:le&4h0nqThdjV<_dJIG:T8NA*B7^F!=(nrM3SX-;M-mZ-@X?
%i/SmY;=jcmC+N:\7BitV]g28Vi>!<pm;Ki.p4&N#P_7K?Wh\8kqFk%$F6Ha3`iC1)`E-Ee7So,1-1+`!AdRXuV'6%5N-:%`i70^:
%h=%T8Ah.`R>4nEFG$(M<lbVjnLN6K[,*hq#"VrW/m*.I=Ck=h2AZAdV6QB0<b%`N,WuT.`au_cNroWTd_<ps0XO>a4ZE8VFH3^Sc
%/)!,rZea3^g.eb!;q,q99W,HtR(qqhmVRB#_TskfIOg#Z%G5obrc5b:D-#^3hdq>'\i6#j\&L%>Qbg?3*VSC<Kmunamk&s9^sDc,
%^A[nPDuYOI7fc(^lY^Q."]+C1fEpuJ?+7QPs#YPrn+qQ)+20krk8+rL(W!]fr,Xo*=&lhX&i[mdP?]:\i;aJGgcY'YcBMKJj4s7e
%91H5+Ei."Tn>E6N6QZRMppl#s-uc=SXh3J!gW`A_H#oY9e<3&r<MZ0UOs%!N3K"r3d?sX4+d7Go&YtWO:6$\+-R_9RH\f1aniW`[
%!f[^\j[1/Y_qCCkg11WIUlCS.eL/rS`igj^<DeQ.pL'G,U7D^=;8GrC+grKY4B..7^^Cs=li\W.#_7D"*7uG+(u.`,F9O1Pe2C"9
%Gs,<faK\VjiFC\cG$Pg%dEAJqLQ32#5XkSn]maEP*%IPPLbagMR1mu885ggi<jO2Qbi7gU?tI:ma2o3lHl:oJA2;FM>]Ji%Wjp&=
%5Q1BUZ11mc7AX$mNjH2q+cr'+$S26Z`Fd'_.H8Kp2DX^:d6pb?0,up?P(Ul&i,==Q7f?i4Tr@AO<T4Y5IJ`R:.tJ1H/t-cK(oQ#U
%r*Y]'4@ZMDYtt#LM"anG[18QDF9B5)Q$2<7)iJ&=d7(DQ+TG^0I\fof0-Zp^HOL6oM11+nr!`Xc+!<!8ZmaJ<Xg.QTmcrOlf&)u!
%(!iB9.H1DC$5*`)]n<][dCr:$$%PQCEL=r6rTL.D1b+MnU!XJG.?+[dbH+1e3>rd2"eQN=b!RNFjJoB8ATZdH!Ct8X%3p-qUB109
%Ct$EACL)E;+1S.Q]larN"`]QVc4ulqFTNTi\KWS[=MhfbCuZ[oPa[CDWAh7;:=C0_M4_X9FqUpQA2+h/R##VgSsZu>ittP.!fs>s
%Z9Qt*V!V[:b<TO`B\,5(ZbU.+'r]>_d@f$IF=*"";N>h$;AgB#_W5,0"@ss@(sbWb0nCcI^IoD:gi;&C1U`-tS[KA3UUXHECYMZV
%J3"HB>7`juEX9D61-1FX7JnaZP@[`B5a3@i_EoQ!fZH\#6M="S(>O%:&@)!hV12G\7W2HAK8^8^)aC_Q*p9qg-JgSFNGR,MC/Q0q
%&s\Q39Hm@oPUGm>n&.X+W"H<Q"HJk.iZM"&'%oT;Oh/j/66(qi1ciRB@)ddMhc%UO'lL"KnQlLj;:Ppr]e6<#UE$L$p('epWrc0,
%DH<b?!+K@u<J&SROd*[<3`t\`p:-n%LSt#!E8Y1<ZVCkA+=:<4Zo-(\_Q[fmh3H"pi3"3b&-1oB8Gc<aM<LE1;QoJ,$R#&FB&6<I
%NSUG!C<iUNnM6[8_!:I4'e<aa)X_oJ+ke`AP<(uYnnC"iWW4ROlR"bsk,]N>rCY=&$Vj63DCsn54A8-Qc"p6BkEWP+>`k/"_5i\<
%IXC2e^,5i(:q=:O5r7fq]*QdGZG$?KN&XhMJ.csj99uRN-5J<QR09r+hm?G'C/bW5p0C[W(D$#gbWkU%jNg(%V)lXokF-BaLcQ,I
%(+*1;NTfa)_ph?3=Y(LI.H'OTQi0"4hkj#?rH0B%i;K)06]Cj1O1E.,ig2fhjT!-3F)L]$\nL$&UG$-q[)?G7M8%?N-$-9?6Oj3t
%fj-m.<Co9J@je_FM>T%8E,N/.ZH/Kq"<Hg%;Eh-OEKc,[h(,kYpXZN1etMj8aq2uIApMu,LmYfa$Q_r;5L'1t>?m5R%n0'8`=7_,
%chmbLPdC,V0KJ^tjY+l1WC28GEkd/R/!^q\8Oo.Ue`le9,*3W"dBC**$-=3X_Zir+j#7rgX7RT^Gn@_X/+q&B0<2:e9=$%S,<`2'
%6p+XRF#qdmFAC+H\@$A[F.=-$S.1JM@@Z5fU+0m2S1Y@D35S;::9d$:7%cq=`_!t-pp?SsS$>;5_dj:V$=S@qHlf_!SjU+jaCJ0D
%gS[8+rj9\bnU=WILPAj2Y5QBjX1VGgmg?!O>Hqp!:O@5D1PIC=U0Z^?%><e?Rak4uMP[/1J&_W]+(ibie[PelF;("X6Ni/.SH8*A
%!cLV1oQ"!BLu"GuVhO3qjeHcV`p.^f&IP+j.4;N"e/gt"ade<T-m$)H.!8e]$rfceLaukCJuARQXs'W3[;9J>ZhQcm6@gYXNtM\`
%DPR8L(5CV[-'Cpj;k,LHnW-g"(OLjPHh$/>U=,&]3j`FXp#!*8mm#Zjl/l-kE:<-$,i*IafRI&]<+W;Z/-#;1p4%@U:9#<,`u)D'
%mBP0><<C;AfU(@m24Y-(1.\pg\[E\?!_EHYF;rZ=<d_oB1pQbg^@=5T3QBY!f7),<FtatD=n*b4/#_=/S_^jo"_0-U)@S8DTk[hr
%JfPrm.1/"`$Kj&X^\K?DFMoA)oc[Ko*Nbc*km`-,gQj$\B4J2?bI/\q*XJ)I>DU*cjCi'Y70?;G(D"tt%,W9lC?-7U*UO-b`^>eC
%c-'IS!G<C([8.<S+p0?oH>0VKPpI:ZWsOE\Pf1W\Us(k\dg>C["lNOPU:enXdssSm]r=>$EF,arpf,GfhBMfSE;M%Y0/<+bbB5R#
%b9`W%9!WaV+LVi%p6V"Tek#>rLZc2B5$-3rMVNqrG"3RV6PVVX(=fKDFT5cMX(e3/nM^*r"JASa^'HR82Q_Lg/e\p;8!ZRtLK+3h
%?S%SX#1)+P)/C.M/_GmH+"shorjH.ST<3/)Qr?MnT5DbcJQ^sp%?u?,Lg@/Q"Y+TG-,PpFf\(k&a-)hdjS!@5:*ML8$[2T6jCW^)
%CfXc?6Nt7XT20IcOTFou_RWha-2C!Sq<!9$N0,Y+MJlp<m;)S^4U]D-0nOI5$,34OfVEm@s+pQ-#%orDH(M%OBbS6f.qT(qe1Nch
%+,"[&)CQ(?V1se2a>ALK9[n]/gg.Z<p/Hj?hi8r+</P>SVh-UeRmXG'@oGOJChY%!(pi-W8+KbX"&!GglR^Ep<`PUEeocSNQ!$lH
%Ci`)Hr4IS7+qeMBaT6.R>W4Dj+Ngk734J`04qjlDS`$Dukh8Y]3p)f+bOYnoO;sN;LE^M\rtm>"QkH`uOb/j)lRHRk%7Q>uHl]Jq
%U\_C)Ilms#$#);6lMd`Kr_]T0AKJOuZPq/E9o18q7hP\uRTJ+N^gHqQ/nogOrr*n1?=!%\N*hA:)^2mi`-7F<3N'V2^SRl0;7^:X
%s4kHO3L95n(EX3,_<pr_03_2_^LW`J$/?u`D6]#sgb<;B+2O=DPPOX?#X9nn[1l:+7W*K_R7:[AlIG0$7WM\kSBG'WM8>Q-(8BRI
%6Hdt<&A`"uOCebe4K10$g;*S\BMR^<RH9XPp5O*4(@s8.4,bRSr2E;F0O<UlXjgLYa"1,PA!K%58E?/AdghaAk$<_(;nG3RN2Yk3
%+urlEiA%JhRO0bSKYZ7"6]Z!K4Y;Ps(*dZ?p3iI64fWsi`(hpPP(s4/@d<()e\(Bb395B'g8<Ub%iGnfW1"+PW/r*&d17[LO7a;6
%0Yr-V-7UblK/4&b?_ei-'q7Or^RI?H-*n*V@NW46o7nfbmE(21BB%9<irC2MfJ&.BfO&c0EFk6o0eGs.0st[)]0s*6(9Y^1r$+t*
%d]gkE.S99larZNL3QP\Q.?K$^V5!9D;*e0Y'>4g]T7:7AKc7ZHC4cHW:htNH4m%e72GODP=HdTN+)BrPc`qXqBX%7fIW)HUgg14i
%N'>llGX'i@CTK[S(?^t;0\T%<O#]Pf&Sm(gc.`M$LA@;No&j%,DrYh4L<QC<pDd90Wg&YY`Q`7A'+G0)]Vqd(f%jZn_</>X>d9i`
%f=VP2VO9s^N@"iu\DZ[e)7@L6QV`TtN$e(`(g?X%jC]+2M]jpB2[ALbKg[J1.#OXeH9&2c:Z.#s4Q3e(N>7RI+3K/A>qCe94t'J)
%]@U&Bk56F`#BFST:5a.l:&uO&/'jDQWZT7">`B&+9F?YD(h9mT`=@0X?=qja?Z/\hR:ea&fJXUSG(sj+J"J:BU?rH(g"1>IdZi0W
%_"aV#M5ReHV/-T8.#=!OR6\tPH(AEFLTrKP9\r6RC72Wg#Gjd9,Z(4B_q9N,&;A"KkLo8b_)6d\#[NqAghoN3[4ME?Fi)^lQKLU*
%I][n)q`T,Ca/X;O%1h"[O/:VslAbL5UmOmZj/cf\@ph>onCS/2Xj[hgK1_3;3s.[bj\-\O]S(:!4]\^LQ6-BMK("P3?(,ZMGDk(r
%lLnH_?ZtLsAb<Al0:t]4h+6kPWVMG*qQ&R+%hY\4]iChA3Qa(?QBXTJ0(<oeiLm4pXo`fjs*Jj7^on:+;C)Jm:6;m>-?jSeg?YFK
%--H:Jh.!Rf0f>q>&NsEG^QSKECf3$W&HWr-dVBu,Z=D0^^[j&.M:3')a^#cI7QtcJkf&;/W`P?>Mr%S10#dshdI7\2^hSo.h'O:1
%Yggt'n9JJ-(]cE+'6&hP_4GJ5k2M:\7B#EoAU%?QiYJO-Bj:Ipk)ACR/'kTR37D,@R1ci0bb\I"mo[L"Q!)4RU@7o^[-;Y/`eq6Y
%.UprWJkM>_8QB\EhQ<])E<MVK[8ctBHHR0+'i21L>;6mDB6@mfaV%5kr8NACPq/%T<&&d_,fV-.9.bN#Di1C*p0RUpA]h[7a84C<
%>;opK&QPV6bZlnKZ'6r?0)((_e?UmVm9BdU?%$&)jHL^B'\p^l)'c^3R:!`DJE=$UgK0ps8SNU<$=p4m#U`t8TP+-@@`C:<^=u@6
%C@q:_"!F]e+O7U?k@P-'YB,cS/_m21m_ktMUd5EelnrEnIJ&N9\G16.TKK79Jh3uQ7G#OK&moItF0%dQH\^7LXNYBn_iD"ZN!D5n
%V\3""]CN'+hhpfPe=q$3jN5XF/cKAP/!5d`.[pM(C/t_?>5FE`RU_#V(d$?^MXdN@K%*7e;ZC",4Vuc6F,RJ5O-N)E'^J(e:ti_m
%Y'!@%1jIpu_lR-34;Q<Q4%Ynsh1d%!MqaDhhpEhZ'6L2$"*h)<@D'n1Tt31lF\PJPO?^kq)o.2\0+:<G>HDfcOPJDfaag'GVuVcY
%O0ff0;h^!Q@r$P7ca?SShlMNWQ?_W!kk@FVHE''"("=#:\UqEiV98`<.mYpB4Q2FOlDV!WM,_qm[UqW`R1aPc+)#PLT[oeP<rVM`
%l@$.uD&dAkR\NJK<0NP`&UPkeJAeq5!pIE1gN>M@>h9+Y]LRL>[9=#6^)Pm;?Su8%[6e4*$pmS:50]t^XEYDe":8ZKL9g#`4'pcB
%kPXVgi"<B@1a`a_$oq;qAs(&%RLE>KE+[fpZl3a=amVi@cf&/dD65TS#,<s%ke(NoR2&]sSAKbd`V?JD5$hD]+DYb^0,r&!hA<tr
%Nq9\IC+MO!;71jWCQjQeYI->D/052m'">".>DLkB^\&M7_fsj5ZKbbuY,1`LO466U=u#6q#[p,n)L3)q0"M)'4If>>d!<^LB7F^8
%Dkg=d#fE&Jb&EBgLO?BNhteVIB`p+/nYadCAE[@O[!=U<S/'!)T<DhX%(05CF9oV,i]5PehEr_ZBVlM\rRB<1qtaBrP1PhE_%S%H
%Fo^)N!SENG=?b'="qhK"j%u!P!CBjR/+K*"e*KAUs$CEr^FMT97N&:P\@+uAFq>\U%_+((S,1emBE\N!=fejs"R=W]dmkp>F9?2m
%5MuL-1WVfqgPdX^">sX@(&<m;Qp`..-Qot+[cd$%(eI[2M5$!L@WErU'd^hoCrHHqC>d$2SYVTD"<_/-L2eu(m2?e07+K$2nG-G)
%$=ZZkA3%rDL)k8Fk:=lM]^WfR2.HhRnFZT_ga;M40Nbsl40gTIK\m;9Ucb#e,UTFSAAF8rfo7:f(-NL%^3IbOm7K;(ClIJ2LJ('0
%m&-Jrc4/i-mYA/_`sGkg9/$#emb"l-Ik'),i=(P:ce$S5:c-Cir")('<q>/:?[>o%hIY-'#N]seS(=U"H<-m&la*smWBTd*4W=.R
%&a:1,5V\GtEU%WfbhJ_[.N/>:27DZZ\:OBErXT;,r#bX#Is7D1V^[;iNK)c=98Ug>8WdXUP[_gb8D)$Cc8;9>)T/sK#/(R"R4NM^
%Q#9nDN*]Ahr/P6uQ)[K`=<,ooIA-dm;ilg%K@5A0?su-cnn]*<q-ON?</Yn3/NhR!0>ob3PVII:W_-h+O'iZH`Wo&2&/C`49j6!2
%Woou8#ifNq%oCdOMUR5YH%A#"hO=i'T2Q"o=R?9^UP<YGZ?75m&AeRhCK-6hH`euV3=.TP2N3"EIN^U8/)j6n`H3\6a)f)N5q77B
%.%Lb_E'$1B2P0&c(->fhHuPu4Ncu(l*_.Cm;qCP&Tm?2Y)InB\[5+KDgu#iLbJu0S[BGS]bFbPYF%Wo/#qkFBIH\Tk(.o`VJ2+F*
%f]g7PS"Do]a10h2LY^8sRM%l\[+JhSW^Sg;H.ZMeYQpEN;[M\;80DahW3RG7&#8-W&4@-T9c4ao$'TSHO1m2@\sob*1%o";5#Fb^
%e6*,)+o*BX<cH#B<$S"d;Gmhi1^:g-2%KnSP6FSuo%f(1R3f>JLC?]>a3MoppCd8gJ[hU7+qQ!-%,D5J,3EHB;H-UW._!jd\8sSs
%KWFt5]'KSL(sg8;9bA8^0"td?6?akkZ(u6-Z"EjtY\if@Y84eo&alOkEBT+?$r$!=q_H_F-bs$4;PcA&n^V_V'.QSZ5-TjcA::/n
%!?0l?dVtBal]##rlf;`\X^8k$M,X6uWg)K/'deAFp#,2LM>0oODP#dVp)4Cl]lV++V3I<`?kj\p_L.f35OetK47LuA`N?+7SKjP!
%c/;p,2;g.8bXo(X\)tsgjYb"XB<5gW3p\S&^HP[ooaohhp]LnQ&l"be;^I*cNa]R#Q4).mP4]U$HZUZc*mrjQ4;D2Y<D,=*e?gYI
%Y#-l_bq\_:^uRq&UB2klR&mHnJN"i'@5\fEWWl>REZMA\BMRruUMINZ(_m:gi*u3`H*X]/_mr0n3ZUke;1u8"(CdBn=S5fagjk%C
%rjiH[n<g@Jr,"l8#a%9O/gD=H7:r9iq$4.X=p4[+/r;-a04DS:`8;X59fUk37s+dDJV>MaXEa*)+K7kmp<2hEqjjuZS<(]si:^7[
%81ArE(/k.ErEh5*Wq-.uS&94bTOjGAUP^G0&/7,7d6e79/A;n;07Qh5FXX<Ske89K_3,T5[t5p.32Zp`k&=WQ70A7K8arZEof9:<
%H^[2_ZGgV_V#sk3m5/+o<CQ%lk0N1c9N=R@CAQeA\0O0^j9!Z.ghFV'nH(UEfk;Sd"6n[%Q-3Lqk/"4^0U(G.&"b*;2K1*[;Oms]
%7'!)g@>+BG/j6gHr1r+N^/?k`VekGP3CtdKQ9U5250m</\-=+;Vfn$"H%_S6Jc"-Yml,ESS5c?d;dnk%97fTmdZd5!QXH>Yilp?e
%k)P:EnNA=(Ap:+jUe'!l4!'VY'E%baPY0]TO-0J356(*5U^\#8`fFJH%.M+'OT0e.J<%rrIcgIrq."m:5-r6[q+Z!K^Q"MGi"V+?
%'tT$F-e[d$eSig`^]\)#&B+nU7?YE;Ec@8oSeU=*A\,hk/,J@H==&u'6WL^(-rkqPeXS.E.#85/^um32n<3DElVg"0Xb6`XM5`iR
%NinIC(*m,jYr7GU+'iA^`\J#ijL96@#-^HE5Ajmj)sS0F[\k-Vp/=NGHL$65fXGHfT_jF&+ORI&a'I'chA[sD0L;VMK]KIqTecYF
%Qp!_e>"Q-;L51%X*uFGLL.LNRRSm36\ifQo-.>86b&8@Spl%R):sVQfLsdHM.I$>('3O</5uuB;9^`Q&XfmEo3iJX&I=nIVYk(2m
%X9qINfHeYc#`$jdog&4<W$iC3,F]@O`Jk/RK46p4lm%'Ybmjb9MUTj?fb"pt"A$`OY*ebAGcK3fM+^UhQj[@r1:lc\m4p/i/Qnpr
%a8DTj:JtD;;'!O1c+<B$EN&0N:_A3C">8qF:*B_V"cK'tKCE.@>;%[>*/G[a5.smNkj7$D8ZL-72e:]h-9HN\<uicL]KbXIedFF\
%gI3MRFZ-GC&*-^_e,:L''t39SN5FUF6i.KufT8h3)sA;-)fRN<]lZS(hoaK;]^WeNgIDd8VGRV=NfMDkA:q331bSajGTf^`6VSM$
%pL8_<,faTdiZO\b()$5aOZqVlGCq3:[;?[9'gIW2<2g"sjaN[r'fp5$X_Zq4!?T6HC9BZ1NIMX!*>B89Z%BJU6OT=8f(qk[1KQG:
%'so)_=;H'j/fYho$V]O3g[hi\'oE*jI0&@teR,po(6u;<5O(SD2dW.1V:VJi\\2<o/]rd=Ltb7%#\(k-:t5lOPQ^Kfgi-=oiMj@M
%ECUh>nD]UW"t7Xl[Kg#Fe-oIg3T=h4)M9G:7]s^I.g(?mptG1ijD@uZ@@.nXo=e42?rfEGSIEMRMq'N;6']s]-*T5b=!05YoY,8(
%Cl0Rk\%\ESpUtJKRVffsGpR97$e,\8oD+%O_6Art_jVa*1sTA6LiD_P"\TX[OhV&Y&R;g6TY`_34"tSn#-$dg<e/+,mofm26rFaD
%We(O"H1H*pDo]MkcB^6tp;c^(_CquFMSlJu!b+6aE&Of5_qB"&BkgQ<&[V&9(/RRF=VO`R*Kj^5)1,@b`R842_a0H)Q]KTrOFCBY
%hKao=hr`4@KD<C'*IVSf"O!pDNi?!X%G_C3h5HLD#`p*m@eLjB"ki_P@>cjWo`Da,2]X#tS]W^6&"\JrR$#?;bY(Z[O)>I6'R@gn
%r"@hS[A2=im-+,If>dgo3^r9/5j7/>Fj_miVRbu`W]>WN@O8glhl:PY">#s]U@'=9<M;*F57JeK=ut%h;F81gY%;7+W"<P?akO$e
%'hb@3hF;-3P?IWWI&QD.![sO$%Qd%NY!k'>)>Yb>8&ntQ/)[kg$'bhb;VZh&`8snc%GI_\SljgkGWQmMkdE89";q:0W2_ajCs5=$
%?i^ssrEA5>X`n"CSuAc<B]`sWCn569_JS*E5)pu+TsaGskFZPOHXLOiIg=e_+XYG5X#2qO#XKA/Pn^QtICI;_^DlmZeXd+te*ZRq
%)^]/Hj0`PlBge"P5&[lBEc.Q0_YpGQWYUs0.V-a:,sV8*oa16;Uc@N0&0lSXd+\PPTBg`IoZIn3?YUPjI6>Xb;"8>kUBQ?;&3!Jm
%bM#OQ/McimOh0Qn96R(^M#(7OHZH[&4XBDlR;kEfHR5A<nTJ"7F+K`Dlj.nH_)!:#Rp[jLC\W5&:b"jrG.mAARl5(8U-J*o>u,$d
%-`b]ZYbTIg&D3`?Anl0*?*f[/2>?YdgK&EEnA,TIeO;68NUmmrdQj'8YZHe$17rBldadF0$q.M8I6Fl.`L.&^`CF_e)DFP6W,4Sh
%?]Qi%)H,1?P[o%Ade^8Qn0M34M?+Vk%:Gjk'mr?ePi3!!^+]ACee_&S+mTlWC"e#!>Jarah\s[5K_00>1r,(+b[c8lK"7mR.ous<
%]BKhocMWAnEHNPg6)Y[se"gPfS-b(m+e49tihUK`J?%C9DrB$^b2BS?5hpqBj-B9LpA$KV42<,jY-uO=rCK)DpY"3#pQg4k5l6*)
%q"9b&ZM7VsHa_#1jdBi*%@X'El1$4JdC$kfn8eiDFl9k0/\'WN0f"gK@Ed+d3N7nmO&6Xg'YcdMfo'o<1a?X^FZ&Y0g%>$I?_CSE
%q?5JP0SB'f<)q3:7?iMb^5/Z:RBo\l:O?s!X,6LNC_#/"Pnq,Q%k&C&93o_%.S5ljFfkUYB$&=dgE(o`Q^Z27lU',udrMr>8(PF,
%U>%TrVDWkH7^5+#gF>J;^+KEh'cC1Z"cs)Ih"HWmbI>`JD^oVhQZKVi%=ddUMuf%-/?)muThKZ1(u,p/d*fcnfdGH#/`gJHW.Cu4
%$MQ[cmCA^l]58HCr0XOJ[YUU+P11OL4(Gd=)lT7H;'5[iPgEZRmGYoE:W:n"\G0kFgHQ34\MHne]V7]CNnb\Ho'!\m]74Xf]58[R
%ggS+>;+02s),P\a^-crPg!FRL\YH8)gH4QsY`H/,+&SqmHL>sM&gM<j]9'RgD!8<ogen*9ooA?j?R54N[Z_h7^V2@_a<,.LW2OVb
%jG%O[`qG)[kc`f@lp^_tI)(GB>KCm%F)YK7[BVhp?`bOHeMgdi41f/>dqakJ[hmI.q@Tiq_%GeDYI.e,A1&7P^V"`N!Y)19c0O3f
%3s#R8A]QL?.a]dY_^gFlBh=*:41c^eP#gEo3Tq$"LgR>nY)9,;f*IA^B"H8T5/jX-iuesu)E&5M%]]`>BGHQi*"49o-!s["EC@PR
%G%]IX<;nSN^_j[B%e)G*PSJ2M0Hrc@jQ=#eCWkq;)Qc?$G)$J,=qsDE1Sce9B`'o,Mdc[02/9^:(QcfJ3oota@Oj-qpWdb\b)qS.
%NtlaC&5cLGH!Z2So/ltV1NLrUnO`HB-iZiU9r`=G1%kH\BZQ<D2_4VjbSVF$/F^60PCC5/l9bE.G5@_:[aM).UP;;No_(aEbT&hd
%2D;Z\59KRhNB\I15lTcupuA\HrkZJfDP%C>7nH<aRh((%l6Y$YKYVJjF%Y2G5l5;/:YV*>7.0aemrK[$Jp#<b-3\`qW7,RW=b.kU
%foitlM]KKC`cesiNM,c!Rk-`^BZq?lP@[K!lmL<lh/d`B<<f'j@`p+/KWr]3Ut(VG4+2]c1ArLTADa8f.<==Y26a>;R1j0BIT_tt
%E1\BMiN4[-Fr^W5q=_$#\d%P^qV^3Pk;-Lmm57bLeud,u:KS-Sq:6XgGhHFdSBqpD$92(UADo[a^bqQ>n8e]nQp!#6H/8H8gi*5U
%]Bg4LacBq\J*sabD^Zl[@jIW[jp:B$_+o@%@g@I]L#R;[(lma+QL-[OipUB"T:j3#EqJLX`khhMnih.)pn?$@2GNOQpNk2U&%&LW
%[:!g*P^5F)%,1ta?\1;e/Tje5mmoapXXT;.OB\V\X)tsI`3HdA?&62AguoE0V#/8LjA0O/k)AukHJq9%EOBS6HfP'-Y9,ckpjZqV
%T.hVHid?`J%4kP?(]oueBJ8^CgJ[Kr"ZWljV0Q>^NS&?"dY1qS[XhiqD^9]n9'e%^qt)g+XZ"iI=/4q7?G::$m(^.1ECt*8FB;U=
%/\&2H.U[LPT0'PWf^8\4kk9PAB.Y=Gl*M#"'5e#TfMW&V0'WXimblZRmJckDp4.X>'^jt2_(Ff]3%&qe-h1oE4N7+;]cQZ=;b:`J
%qo&M[7g\]W(<BIMKe,Mc^k=j&W8p:ZCN6GpQ8Ah2c&E^FgmNec855#,neZ+u2rqTr%hJ/N#KM^J6C!!_Ik3o6?Grl^'DZMrWASpP
%mX4[<S*9SAo*oX!o_koajsWCh&Xq;^-^[Uj9X&3ecCE3&DpFkkVq8<\Ca8ENs8;NcS]K.Wr)N9Z'W6\1iS-pupsXY0'3%lB9s=e`
%FJe!5as+W&&D=,:9#=OY+Gc!)):R87KpE]fLmt`Y+(f3&MH=mM>YRQ):^@iafe!nY*%J)Y[,N<gmG\luTNKR:i%f*rB+bj&=\[;#
%KKQV@@tdb;,*fD`<K2YA0l*2GV@cE\mP&dmih:,>3UB5`0E;GW#QU!0*[E&4$3_9(@aI/MM5NdKMMip(-osMO'Da?`J57h%-i^hn
%*7YB"j24sp&@',9.2!<2H*tJNmq*^ieR`0$s),.>h(b,cNcD_bY9S^'Po1cWXN0+0<"Qnk"_3(^7WqLsf8NY9T&L8XCeRj3WW.s+
%J5h#ZJd0)tT@B1SGq*u$!=c]76Vsms/R93o:r]^YhICUPmoWu`V6ujQM18idfr?W0X=P1Yh5j%Bd<#b%G1iX/.),XTh#B=M50b@,
%L+u,k@cTsAB4hb?#o!K*e"T*Z0'Z(5LMEMid/8^gn)igL4[:FC@D;Fipkn5&^nO_,($p8[DNps;0u?L8]E$2pMfLXb(EQ[ln$-0f
%$e+/%LV5qIqn!bcDrfE/`A?E>MiYZ&Dor55$7E89@r+l\Prp<+0a52:'=iH8[k:VAKs"?rmX2-"XR+:\G7Pf%d.U]>%qnh!\fD@=
%*e?\.^m3r$k8U$H3Y,ssP+DuCd3=!HPllFH-+s$<C1%\lB)u@3a=*)F/$QH,?/XsTSUpPt\6l3@RbQSre<R/(`M6YCC48#BK/c1G
%B9*"DrheJ.&/&6$3#.7gcS1'bb"u9G^BtDf&fhSA[R>7ml*olD)?;YMs8Vf,[C;=ZaRZqDs+gJ?JB-<>oDR$`P%cShK0(k1Gm6@M
%@UKa`>3]7RD7*P&o^=`aM9N!$>BSVHog<O&O@0;RZLSkN)&[E(Y:Yq2H`F.KDVi8n&FBNfK2oOffA=">+`^&6AH)]L`>sa9H!$A!
%`999/=&C,.FZ5$,?MoAuC[^IE%@pll:2*QqH:--ak;ic[*`47A^?dTa_H3F'@\-s*F+5b7VqOBl9jPMbFCBG0al\Nm-<NhX-!G_?
%k9M##8YI_+KO`oa_PrS`BEA$h!BOIaP6KGl;VV^($GZS6><iWd8BrL)i/o6T@:HSpC4p?>hFgDl9,g*sIHrlA1?XR@m#c!n"i90#
%m>XXib5cB*9s-u+/cEji:X`$gSIY&lg9jY@4DY?^&d#=P])[A%/oi_jp;\H20&"Vq[9M]LXAp/@8D5ZUf:)bE1Rp7C>W5f:B/7]-
%o\YFBG>SO2JB"]+T^37T@7)s&EL,8knhq;;h`3Q_12OF"a.?)leYjd0JOE+']jr5[K1u7!Z5e-lg\:e:GhA=_O5#_A!/ZB7-R)Jd
%:=3Hho:d(Yj;;#!d*Kb/`?.^?^:?A<E#8o6&]@K!(38HQXY^MoY\(EH7^/4YPapPP3Tn6(A`Z<q64>C3cDda6d_C%\#+p,Y#Esh$
%nCE>J%$RLP,Y=H,!`nHn3D$aW;DTKt'#iDA//59bll<Jss%ZK05\k'F17kiqU=[[Wl[_>9h-;omO+@g!<l#DG0Sd35_\feiX@KDG
%&!N_S.Rtbt"pd?tOsicX&sZ]WSZ2SW#Bc]VY;WQ.X#A>T\b5/b\/bHFVIB-;rC5/\,^o;VFk_VH6#8/DT9=3d2mc$f0eE`hQ),nO
%oaBOt(^#68\I)'*IPfZR>CR&`CUMjC"cV99MoJ&WW<H-pkM#9-9UkZ>QeW$u#.#U/,]iWiLq`Z-Dn^Php33^chnFDbIJ2g$h3X6%
%MM/UI$N*-TIe0JHDdH_!Zhr9kJ,@dlq%$P6^OCNaL]:fW^[UGOi]jHd*ilB>'CSN>_kRG-D\r$,Yke0ME9a9ZY2&=6p"4)>heJNS
%Rq2XV`ECn'e&hhN8U8!EI4u0rkbjSY[pf',=;[;PjAVW40'EaKFir_SJ'U6cQ+Z-FelF+]*##YFTU+hL<V7+I1pj84]MhmK*S+B#
%+%/AWBPA.Y`=:5mia2pFU2,rJ0(e_GB_V^.='Z3GRblh_c*&``;WrZK^S-h\'2d.C(<(.4VDlOKaN6IHh%P-d>r6pr-4]jG`pu$!
%o;de1'\2=*8"+,h#_??Lj_]h9(WT=-a_Y6b[%iP6:F$<7Jn:K3Ab2s\O5L9[(1Z2ij%!LUVrd\kb2udGO(bW9pl-U<5*8/1R?lmF
%.@]2lCV(]?m5tZOqsbV21jl)!oV";#k>sTro?22'_Woj<2[ABrJ.Spb'1'R.dN;2h"$<Ef'A@![Pa[n]%aYLlm2WtKO*48.H"lGp
%'%_l`L7R@lbdXftBV-sESAH(443&Q`Mg'^H6!^%aV=W^;dl&:^nEO8<RWuF/RJg[nbiXu\7`f.L"D32TP,95Y_D@_b3!Qf8C4W8r
%@C$_[4pH/H!1\gP'SR-UR2J=4#s'_[!Ltr$TV;XC6=Sn6@8'.(jIS@^'d1@>MC7m2U)Z_pJR$Op$mgk)^q#IrCAfkpW</S.'luoA
%*@/iY<:@gX9SueE#nsT%@6p,5,d-r78n]r9(+;c\`^0#LDjuS"_Qs4R8'"b`<.,Tc\C.NDp.,]Ze^2bI?Rt`IBY+BG'6guc"1t?t
%X*@sN9TRRn-Lau'A9Jq=6N^sE#WTIl])Z72(Bn%ZE9OA-nU,Lj%b1SRG&8H42,Wrr7,1Mr$q*FkZbUZOA4G)Z+WOK$-u2C"M[M%#
%7+dI)-+Xmi5A;8Y#AOeSSG*g4%q&QfkqQifpGYjPUEFXaN^\"@dZRH^7E3QM@33%n9A&@K\MHF(C_*;%iLih8"P>ma^/:R)_(S4l
%K%P\(57i![RZ)n"`l1Fkl%g6O`4g!_Z/DM!o#_&92_o^4!.&mU%%T0^qeUARjTs-6F?#<DX33*+<H77hFM.U(X+_)c=WdtR%N.U?
%W_lfqU&65tf?$AaSDc3`qkJ4ok78h2`lkue'=joHq`Li;alA#]#Caj4$CiK[U8V5#S0sL3`%R(_-Pdu=cuM8_/P%tRgVuJ^%78Sq
%e&2>VQk11K@ObJH#ce$f18)`48\QngM(nJZWUM7Zo<H0EN+*K)D=3lG3S.tSi'&2'91Z2-S0iqde55rU8)]'c4_7cH;#/F7J)4VY
%_]oBkhd0QJ@ZPB93tq:5+^_X2]MNLY6!`fl[@TM-VJV;F([h91`D>gs"s'qA.OL.\eiJS'C>j-4%d31CS>#fj4[W"fU+L$8re&P2
%hFU3qrM<!<CNggL^9quDU-k:05qD?LMHF($LNP\LEba/KE6*kZrFmE;?C9/lk`DeR/Z.>,frW=Pg,9$;g#>$+bfdG,8G<?t@kbV[
%JmUM&-'dSW<(*aoSL*HF,*0AN)BY.P-ne2]"Kk%:;2AH"A]6c@0g]ZUZi(BLqPp!;<#3+c,He)+@O,\J,`G)Bi0\D8Yb5oqA;P0?
%jt![SC7X6N1jTI<q1h,I#Xa#"Jh$5ni7ge/=lVK9#R&)Yl,*BI7#Y%;e!1m0hNA=$s&J6B%5agk;ID@O#V!,uO=`Y\)YM[Ucr"sg
%ir8p<qlp"!UD;JKRrsq(C-8AWUui>sJ5'Q8M'nq;Jph<!6d.`H!c"_b!=Y*VK64Z)Kb,I@kGhR07+P]$DjAs:'&F5+/'CLO,Q'r^
%i!,]X+P2W:LHfH(a+\C%X=A8"H.sB"Y.fU/>,O96"!R:;:-4pqIT%s@lAr)VVNMFigTNj`B8*J.CNCIB+j<3)"Tak7.cQoL"\b4l
%"3W5U=&$Q)UuATCUJk$FeQ?RLLJ5eA0Pu=?J@0B>+Nu+i&]Ik7?go6`YoP_W!t/KaFNLNIfVPfdiuDMGht6uO.V&:,K[jc1^aes^
%KQ4>9&+.*#_-(jTbnW7jU'VSm)uPt"US\iS]B?II8ZT_m<hCtoK8c,@RVh1BM.L4=:OV2E@e7JZ2Br1",InjbXUBeq>WsahD?_MI
%$53_$!/@AJU,=o8EA')Pm7$EPaH`"E_5SZ^5a^h_pJ5oqn$Wt%,I-[GKRGWEq[>Ea);aEIjr$q94MteTol.[h5O=[6l>62)pr`=7
%>`&7Zc<*&d$0lt.J?8lD\4Pi);XQPj)ut@u6)/1]Q;98\aeI0rh*FSJ>e:@tqfoB#1_;17#-*boD%\.%%CiS%<GRfcRI+TPr3n8Q
%Dd?e1"sH_[MKfi'BTncY![8,OYR%)M:?*c9Z;&b5R7RfiU1oX!%`5=qkA'!sL1(NqZ@q>kD@3sKC284'::i&"o>m/mXGtSU@jLfT
%P:2M]''1=mG/?WQPuIgp\_Q^VR#qslFC:Vl+R&:0RQYSmACmCRA-gB/+qVu=hbt2q,UUZCs0c%>'SQ1AF(Mh\?/I)[VfORjM'H]6
%pA(,5-Pc_SL_<.lHo)*?]+p^'VZP>Gj7FML+)3SD-XA;NmT/4+?h>HHW*)W'Ci2E".j</'>?KO5@Z'KW!<:jD.p%RNiVWr]eQE.m
%1CAtdC\aguTf54S:@NC2=-_KT&M[PlqiQ"tS0u9=BkLO"91Zc&nGLpodZM1s&*\'1fLp3fNQ%fMc9PDg'Bt$M#-t'UQ+8e[1AnI"
%O@)kK$18Z:P3nH#;bdfDMS!FSd\j-a%G`1W@g":N$a]6Nck'nZKHajDPNp7eO:XA/RF]F9U\]B2&`4\`Bc4XMO]e[&GI.\XR>bHj
%\NCY)%L2N]-n@'NM4I*#+5H#E*3%$QJKW*AgBOE.L.39U3u2=908=7Sq5nXO+saGY4;N!(let+gUe;tE)-7*R]1+h^!b$[IcmPX^
%[UB6Z6`E<2G?R]-`=O8-q5r3_7.JCKA]CYZ>%D+#>*T,i&qYe!TE'e/0K)jV_R!J>RDgC>:Gj]AmoEea,GO$&,)IJ49OPms2"#)m
%C5B.[C"/)JS5!FAID8co5Q5nD6*PO-%g_S*h\!I1\)B1p^U,?a6V1B"7DN+i*@h/bJ76;0X[CmpeP\jt;!c;_4-$gZPI$!VZ5tk7
%GWjen?4;5I1?CZ!)j<`BeNj5-`nW<]`5Y2/\#]ms20Z*.J97q$\fe*3W=%)2/J@TH$A-j.##5sFN0C!iU;@'?W"VK'6G5iFFqV/'
%dC5PQ<YJJ=,%E&qdQYd;lD"Y$D<o&-gCSGlPZ)">H]Znr>2Ei^W#/fTX.c#Gh&`(I[]8E=OeGs<kudO@n8h#CG)G[UYF;rcJ5n7n
%*pLtb4sZrEGS$hXetXGWpM(k!B@E2gI^LYcX;h;h7UfWN3)PM)?A3q!$*oaR_<FuhpQ%30X/0u^9NU0laYb6G=Jgehj;he$$ke(m
%/$I<7NU94RdVI@(d*eiBI9<\LJ&%phaCFM&acH'g$a:"%OHOP_pYIsj#sj&i52_AVCWK&gN0*=A4k]p@8u]S=,o^2ls&H<Q1nBT8
%<\oF_V'uIi;V'$^#+3t6fS/*ba$gnl!GlE%I[%[R(_rE^H?W"?^H3J2nOI&]O*rbkiP./5,>.A,k@>WqC-1?-.KT,D@iAg3e5Y._
%iPDLn@tCt*ke)%dArkjp9nRXIH#DL![!4r]M[&od`<Won%]0tY_4669fVhYZLjQF[BKqCTD;Tk.;H/[@9c5R=)[Y9sKdOFeq!*=6
%da5YnLb?X#5-K,k5i-!S^6+CQ#;9U)*TIsD6MqKpl5)5&pnd)Q!AP2J;!+N)F&ajE[G0"4%KK0`^&L"sdFF-;`2c`q8C`f+WJ9&#
%?$<c-FkJ".PNFaMC2/NY8ql!%!INSj>VsWQ.:?,^GptNfGeukATY<tPl4G:hli`uSjlO,&J)mtBoI6r-R?oePi9i@h[R@9sp5R]W
%k,18h^N.[2FI`g,>rck0DY1d#:Kt>8LD_]<?T,D@pDCr0HW&J#5#bPp/C0`7>]A\-<eTc]%2,6SFHd%>\.>V.,LHXl6rm,%\8.&O
%0hsBFfi5<a&6lQBO`$87r[#UL3tdZ\d>p^ocRr,IQ4,5EP2L>;%Wht_.pD!>,pP8T.d?esIl#.i%ZlOO:kaK0oK3EOoAlZZXU;4X
%EIR;\]ul;5o8>jH+]CobH5-#?ca$SC'Z8"[hMbJ+[9"PN-10LR=-Q\e'=5m?ld.bQ2L(@.ib9=h;aj-OW;$.[#cmf.)k!\`5'59*
%]ARe+7f,Asg-Qq7,4t#4kk-R_O0YE<K,A*=Y[r(YjbEtf&8Wmg=)N<DKd7\F8-_IIW;:j^%9glS.\/26e)ne\:dW_u5gW[:ieFp*
%)1_.H$,_[iSDUe&#kMOGa3ZiQMuf^lRBhr0)^lWh15K6kUs9pn&#;a%?aA>scbYh-$jnMA:7bXHQj[ID`1gf3"-b7]&@$%-Q(Z)6
%Us//<$Qa/uT5P5B86r*SFS7FU'p76$%<M`GX)P$Cp-OX31SBq/[h63/f``,+T9WR!g6i]K(k+p<9!0ql4G#Hu1PJg:,fGJ5<(=8p
%ia_(;[6WDr>0n&j/YGNCK'E/b>!Nf-V-jj"0e.mVS]p$>Zl9B$(dnuS$36#hbAL;JS\oErmj-;KofKfd[LW/I$-)M<9J<f%]K&j#
%Cmms?.#=rd*7<kmO%M][Wa.(]YfY)\Ss9@H>UhNZK`m3jF#@<M[`fj:&m7U61=pEd8qAas4BicVbb4MNk1$@$&mUTpcD+dsH%dB<
%M@?%ZNOfNe1GcBl7Ul.AJU8oe<bJ_VJdrK/L[HFN4:$HEE]uu3W$;VmfM2qkY,n2Q`FolM,:<t/B5iKrp$(^15;+TE'M?Z55..P<
%6n"bkH(@[ChH/^LYtRMH27jD!e1lB'bWA9-/9[.6g\0[Aen!gT`^r8[COKg4A'8ub55e\%pZ4-^&:FkE2?_XbBL=&[YTWd?*G&L%
%UBSIK5?\V(<FB3$*FsI,7q@2M=s(AUi'B&FI?J:J]j<*]\o'Boo9t#.nsJAFm(5C#Zf_>9M+C9!iaOn0,JN9!nIP*MY1R6jY72AU
%(6)LdKHqK=-Q0Q]Oka785T4SO@9NeYoCQ_X^!kcCjeES.0?9of61U<>#;![3S7F'HDf1k=>j-J;Fn,]OLT$3ed]nI*F/Lh*ZAHWg
%)2@4QJJ/qMA?dU`Y;`'PHUi"8+_(sW*.F80j#J+sB>(lO.sA=^g8Gau6pCbNYeu_f"A2s;Q>h*WB^,i26E,^H6\g!6dXukDN]B4%
%HX4E=WuZH^&\Y56SNe:`jb_6IXs2U&n9Y%Qr[SnqEhpHg?c2bbpVZ:PCBt\Be!qd)dq$5DR/Q0gm'fUChpdsk3NIsA'U6<%YVDKn
%WK'Md,pBn9CWbW^"Ie&W_VMTe\"kFf#7Y%opt"t=Y8-+(#nA3&BP<qNT(iBh)&*C0Z#ssE#IYIXhhj[NoTQ9[Eh?`D&Ls_PpIhJ:
%@IP]6QR-H@k7ZX.FuHu[W_?I#4fD,B/uo'ss3g&H:r9Y_0&\G50r0u9#M&(eKB`FD6K>Sq%rY'q'(/^>X@8*s+03kdbN]pgU/BY)
%qcgB%m@1/N??cuo"m0?@:Cjes+O;/K,2qI1TIrYDXRE*\l.aWe_LAiHFcGaMr(S8Y_bR!?T':>\cVb9?"iO8+gkN)&i"W:;8L+D=
%K*YP0n@L_m'Bp%-jhE3\(A6#EVKS+ldUg&H:`Me%OIA+U[u9bD<57\.\IhbSldhZbOPg&,<PnXdX"V6crT3.A^O:SdUqB(+J+_j@
%T>!JcgVoLdrmTQnbKGf&s*Aj2dB_Y2"bEBWfSdN?qVpj^2\u;PQiH7!bI?B;(X;(U4h(EklYeEQ-U^I9D:-oRV\ds'0AcX&`_uj3
%lJhQi0?5iEIXekVHgoZ0Y$\kjFa!TL5FfE7F*@NU>t+bWmFdu<bDJah6C/YVq-WO:RsO=k/m`ttmG#1G^O?',<S6F!oDeRZ=5Wa*
%s5Rjircn/!m-=HmIm+")\-k^)7l2%.=3G/48TAYW$<>=$UeHNQFH*TNN9dL#\?:?]SehoLgdd.)Zq3$UW_!K;HA#T7AK`T2!@G]S
%]*PUc[@85-gFsAODX9ks<OgU8naT[\^1k$);QD;&Am*s:9cn[a^#N)HU&uHa[e2NBo]>dC!6!(%dKkkCiXs;;Z\=PICN2GOFbM?M
%U<sV32cG%"LetH>84/U+lNY!N9(tfYQ'1qD_;5aE9L2_0XsjBg,=E0I/,SS\gJ5amA$_#S`5TZ7fL<6e5oOR+C,uGlZ8)31Rr>>3
%)g`3.'=6!SJ.OW8Yoi1N?jR=M5[gs2ATc%*Pb_>95[G;qd"%TSm)r_[J<\P3M=>G]riB%S4G5[Tp&'((VD,%TFJ-/jS>*AU5Z8r9
%"\j?\LRf_-)SEp=Ifg^.,MBlk,Hn4`.]nn6Kc-#,BL>5";6L!LYZNQc7^)`@6X>q-3uZHUoHA:,%7:E0E@q0dT#@Y;"qG["s5OK#
%WQ:)7ET+#u@:LqX>?I^*nJ>%+*J8\qTJ$9pZ4,1[6AdeMS?HUiF(?4M,-AqLD/j=kUo<srF=q"#fsZ"$)&cu+dXYribbfST!S#Oi
%X+rCrW4<NAeEjV#qp&?Xn/7gOqbRZl92,EQe^ti\Pe)>>?pV#"3%T,sFSu-<WdQFK43s.^"A"[-ieRlIVH$/^Xn'8P?H<\sDd%6H
%;C?^B9ggRNjIN><qq$]F.]@A3n#KY`/Q.dtE#cl7C?4X[j.Li%iCqf/(m+2Z[j$"U%]6R0DYkPIOJ?_.M6arD%3n>IV33eb`%A#V
%F%2?>8H3J*Dq+h.F!Fmb-F?sXMOfbO[m@)X4K$6X&3OgN5GQ&6r'(*h1(aUoLT>M,nNjcUEnl5pNCbQE/qEKm0(5(jRA-09a\&&W
%%TPt)lB*T6Css&(;o5Na@W"\+4Mf)RO2R.4Nn`m'm;Kqk!h*Ee[G2]"9WULCMae"G#?Ad7&VUSg1a/:CE69sLD'2;U.Q=h*i9+(9
%0IqGug()2(Pq3%2[H;_bWYY,H>1pVoARh3$Ri;G$7_(IcIG5tDqVqG?R@6)GYR)+(bZ*ZWMYYdEY(&RGI.d'gA&B6m^]*3gV>T::
%I_r#]Xku3grT<t9c!B41Ia-a@4`df1\h3Mpp$C:C044\IrEM;IQ10"pSYPoQd;jTi&J?DTDYo^H#/4BJGAE_@%g!0Z0?;pQ*!J`3
%PA]toB.WH?]+1jQf:_hGo#(!-G]`f_Ejni3GpXA1YhP.E*&6l*Gdrg?I-=l\s+d^_g;,]uLck*jR!qPDY1O]$>E77&7Or)GO58C7
%bTlJ72/1A67_-jVnu:rt^aS@7IWX[+*VJB5V$$Bs37b`0?&:NU\;rgH>q'ABh>a+/Y/JRV69;eu2\!SP&$b=m`0[j#]bG8M2g\;@
%k8>[HqD#Nml:#K>*mr:5X(%]Dh,DpJ(6#Vo5#klYG1>V"`D(NLBLW!NI\+-2N7,aY_FN!r^>eR4c4,Fu!q,SN:UM@oY8Wg[ViDfP
%i\L*.DTLO[*gZF]<dgDCPZ@V*Eh>5FkFq.#WMH0"V?<)(UASo,kpfS]c->G5-a)]o3A!FPVAjI**lE,&RH0e.d`0<C#aI,G)6;s4
%0:O9n.3h-'c.*[j!ssN9a<Vl9HW$@=jZY3?Vlhu[R#Lsf-`T-<rJdo#>98Q^:[(&A`JKN,UW2rHnJn]Ak,O(,=7sQpa*)6M./1m=
%:d>AC(:$I&?JZ+l<B7#&kWtTl8cV%A]38O-qlKXc]'9AeG>6,J?U'%jL]'Eoen3.!Za$.%l9hZN;=")=*0)gqpq55%h&7"s_\8u"
%Y!(c-[YnPSe(#3U<FaL,bf!FP>ND[T<.IuRc[,#YlT*lC*ArCsp1fW"GeEEt8+MJY]@gcjACXp]+5&$;jrWP>N/N\<:dHB"1nY).
%T96A3>OZLjHGb/f"8WK!Va8h+n^Dp.ZIieaq:%8J8ApPB!C(p*M)a_gNkh%$Fbp4Dj_(PA5pkXX-Zp8\G:nsq#f3FEOa.C5[RdrD
%JZ>G*Et<IL:+prWdYpPSXq*)hVG(F.)s'76\u2^pYRMX:)ZK(<*IQSMO+F81]),`"@%c]*V\LhoG5BI=<pNM$:qSuhY)r,\;H'.P
%(1&2_J2b9EBii/3TD629+M`DiRL]nG^"d8FpXD'm!WCT5NW(a'&)B8h-@f:oo2L+&a[Db_g66"o_U_q??AYYd*/J&Z[6okjSe6hG
%Cg35I5=e_:-IC$ql)NNO-27%s>R<oEoq/p\6Zsq=LMpn`+n##:jP(>LF,ACXT9,N-C#okLqlR1-O(T/Qn8'i*UEJ=$3s.c%`^;LA
%aL^!,!7d<Jl,!8W$&O_1::NcO$"uiP4=7LY,8bDGKH$`aKsWgMR^RUjWJ#-Q:r5`U%F"E]n:>`b!oLbJ&>*H.J%2$la_K*k1H5kf
%!\:^D:S6rEhhhaln'U-cPPn1Z`8+'%!,DT!&VWm'?D(h^Kg&QV$"X!/r3?>CNs^dgMT`u!F'*O_BBajo"clApPXfd$gX<WcB@ZaP
%<?E)3hh*6QnPrpkT]eEPk.Ihm5#9Fi:43$@MXLhn?a(XeA;Y@rhQrr)Lc2E3*CSnl(o=26U0'q<MZ,0'i0#W#*j"F_PVbNr:;8jG
%n?d3L;PIH\p*u#^)C!EJQ?lZd)\(W8g:>J:[Io2T(;MB)MGSpu.'Mib?+OB8&\!m+L\1>MAFnR%5)q"mg7:IMffV^RScEYNqs1;W
%Pin[8DT@HSr")nGQH^0f`@!B@lP%+HN?t*=oVNcMK+]jLcF^?j%rft5f9;R>NsW>Ndb+(0nVN^OG"%OYECt.o5@@hP%G2""S!LdF
%7%??nV$H*Glb9:"q^a0>O4eRbEU_P,'KkNq.6oRi!Wqn8[]PI\#eg&u-`d<M5C*Z],S.)F!K$X'(Kip(qlp/_"p![h.<M/5f`HT*
%_0*>2'$3oN.lb*MD$WHo>.1,TO^&onlVaA*gukBn*^=Zc:lr`AWt2,iJce^7/]0=)9QO,0;(T0%6-Hr;TH;Aa@rJR3ACF,)G:oJs
%3f4j@^`r.b#e3OPRZk'l.#QCm`K2X1K3_6PH@_\L7d7M2B-$_lkW&V+3_l!bnT;JUVrWBZ,"JM7.QQKj*mMe(*0f7U2!&gO=EgBQ
%l+?rm_]b&Q0bu_;\E^o3^b(X&.5eitIWE^V-rUn*Lj3r`"lqXnD@REdUF,aqcp?D%pJ+i\9*d,"J"9'=>CZr=3D:8cEtT[-p\ZEM
%L2]Ik/V]+6R;:seS-]@H8;J7)qOGljOaDXO6l`b.#ONQPV[dD1;7*kIgGTm@5^l355R64uKWP7H8d-8LkKjSjG?kYul??fpiZm.2
%&8k>+"+41M<!&/diQno3g>`aC>6=X$`uXWMed_ht=bIhSYr'LPps$Vo&:dsoeG>dqHgm1;bBM:Gqn@CNgL'qHQGN5khmo*1ZEa8\
%#L4_,(n=!F*"0L%#eA66!_3oB?$4Blj]&o[i+FkR,)H(WqY*icLKH/;?nB+^#FJNpT.l`%jJABo7iqTGd;o.:#bZ.k8i1ZmABo47
%cq2[cZ$79j.35Kr-kt1gdPi]h]_B,AIoVMI)caP-]&_-Wp?s6icL*4\kJ.#1_DtuZf:\$ljDqU(BDLeAjKF'j=gS!lh>dFlZ[;L@
%q;^)Td)5o2:ofGhQWoge>6aq.QfQL#RK@-;f7K$,8L>9B(/[*M`KXH/egdXlD'F*ShNe)I+9f,k%"_X7(9fg?g9@AX"tM2&<hlrb
%3E,Stl%KQ`8U1m5cl)!h8t[2`3sYET`2Ad"TksL,=30DOmBEmf@[(qgSAp,JJVk^(8Qipr`ni[_:)Y$KWja!&h(O4?m2=&)%h`BN
%!ItEAPj!C82)1+6M4/1N=(2?:IomrC47<^a.uhVL0WOO@-*1iOFBlm&mB6LWJdC2sA-kL8.f.EkDTkN9pHf=G!Kn(2aO80BC`J8b
%[6^ZJGUsiYI548r;'"4u'(slY;@\rmDTPKeMa@b!$]tfP9p,Z^-TW94S-\*31kF5aW/3'>O3)"-L%%[@^j7GgCXWAA%o'II_)oWi
%bW+oRl/n^^)Z/)9=Z[aY_]V_&7:4kq*CrpL;5gs*Bto;#Oh+u!iQM_Qemq',mq\+fWTDE;fi&md$3N$sV-4FukZZjX7g3A.(Y)O?
%H3p60ZkZZX+A]iEZ?R,%5o,_%kfW7'(1AU_Wt_j3alJDHbE3;'ar6CNEtf@ba`/5PX<_KC2s2[R$f\7!@6++o*4]2c-pt4n<ipe:
%cF[#9JmJ,d,!-j@BUkD&l<VhY(7YtDquo_.8&aBMFkk!J!ZKhl<u/TNm_?3+B(oP95_ciDq?!bfed?1UZs$sD4\,%%VSes:"\rpL
%qWdqMoraP5#LBbcgKK'S!V]rOo'umKT[`0+M\*ODpKiUC]utp(Ls+0e(-`Af50eo9a^SY6A4uXK.TWhZYX%D;%)odDRnq4QhN'"K
%R]HL@Yj%,WM3JR0CHG:UB8Nf7`fWq#)(9aC>\`?Hnd/*S)utkj0GmXTSZ760MCb-]U#l'K[1BSOr&?rZ^aHE>Zr[jK%?&;M*WV(*
%YOXYM7G8jUS6rRX@u2b]SJ[#RlZrg5%mHI$WP)eA?,MM<?8"$H!SaD%@Epa&j!b#rFW`>CpZuU,m!5rYG%o+%<;>V6Wd$\>:fU^%
%%/JHc6[o&$`nMHMXQ"R:1mIV1LDk)L%CXFJ2r'InFB1H]a:TdN%:TRPGebV(DjP#-W$ja5`t9@jd7geE_1^q))'MYFcqAm&S?igj
%;Dg-s=HV%J9d(_Icq+h(Ch:nD]e2;[)=DeT)gZO>7*._WEgnJ-l,,M,'&1ascB5BBUW19QaFhuCO%s_QN7g+'0N(gW2EoKQESgaY
%0I2pbR])(\*^H2lUjD;MIu5'GYRjKJZq0+M8<G)d$\69F%\IE/-rkGJ"'MjMP6#AAR(TplU7N<0I&#A-JUj<(]j"atiQ5)[MGb$)
%0fm4cH?LVaW5ru"GL9ia6A3,eb^8M`j$njs/8AJWP91m">o&A@M]5(_]BnQ1[2$.r@cknRi@GnP^ut/],22.lK(FUn1T'.igA@fY
%L&YC='HZJg4?Sm$=""NQXG3`0n'G(WOU7!jI4%(o_PBokpWCMQD>2\;(N&PS>C#<!Arug+=:nD7#V0uS?aRIj#IOgK@:5cDW`t([
%"+VEX5"NM=ihT'3'W-P[`rHuX?M*2oh9aWk*$_TeY?$_.!r8bi`sVDGA12!]\Z@tM\>8=07+Z]P<aD[6,C>:!T#rGgqid^+`.P?K
%G]p"ZJHI&#(9^4n;#Y`.lFIlK5K4:^O6[&e0]rD-ois)hR\Y?bqM6k1(eK"b%<o1e8\oR?@R)2_MigJO,.>&66:FI7p";X+\tW3)
%#b/fF#-\:bE0-6d2a?*'dI10_!R,S.+Y]=ld4JXh+=Z:BW(_*VQg1RRc)J^;?kpK-Le`l-4f9Z!&UEfLGUDZ+%'!]lG:g.)3tZ`<
%7GeOmfSkHRjhcR><10Z*\C-t3c)563.qpY6WM;!G;4G$HnfS07P+bq^>cWk)p(5`$`MH[h-H"unN8t[o;PC!#ik\FNMMe]VmdYqD
%3o0/=GPGm(/C/ER]>Ahi[s)A&d:?6I8@1XVs4/&^[?TMPGA(KnAHk1`4uWeSISNndPXKOmfh-#i;jU\L1DFPS/!D/h^LPI3n0<k0
%<(7M:_?+4q)ta<t?9c>P2N]2h/]uLmIVWod;61X4"V?AUlOtJAQhDlb-/f!h<\_iB-9VqXR#*g/5:T&mZUeM.JsUMQ^J6_7nW?=5
%2TaI[TS09,1_Il"^tJek3H<;C?>DeMW`\S&iJsRe)-Q<)]W.XI?C_+DPucWd[#D_3ru"0JAe;Q53BU9*K+dlWYdP?m+Dh;E_AabP
%YaEYdUM5mYp^NDA2PcWQ9q1m%e[5]n)c&3c+dt="Uht["%ah`!M:dF3]lgp:Ko\8]O)%!gCCsRh<+Q&TjE<5DZUNu+Mfg>8N9($S
%`$<"s6:=7$@_7F]b!q^A_*kB^84SLaTjBF_kn=O'e)kj,+*5VCf>Kc\"Rb#ND#VX8613:W'?s76$W72ngp#-Ulj8<K!RgP]Ft/AN
%:G@=2MeF0)*^)0\Gc(TPNTci3dh>f4"a1Jqr\D4XU[GZA-9aqqNC#G%-;;n(Z]8kdYf-sNbST1]-e'o"$-4uJWHFrsM-s>uTAGoC
%qVBK*4$N4`ks:l7g4GM&*:bOH]`r[W4"pnZJXguWE+0u&G+6N]eQr@TFNo,9.\G94]`r:1^iaY$%q,L7@YaEDlWB"k:8W,Hlb)XB
%H14\od#m)2k#/klg-#!mh/o&7X`g*OA?K>3;+"0+ar%^O`.jQUK2WTcBg%\[gl>h_QV$B%r3(N!2,L%bHSXb?n+q5^P+s&L!Cns9
%;HkKH5r6i0N2_QR<H#[=8(U2J/V>\bj27OkCAb"XcL8,=Ho@?7]M.fRpISq+_/W;615J])hJu=7?dP\,.;bnb9Z%D_g+Oa-b+eC^
%3UbOa56(Bc>S^5G5t<TD`H.lEc/Wh3_\,*0PEQ8ebTRAWa8V`T=[@p,/6cd`g)4l.7/>k=Msk33+\@NWRpUZp4nOq?]neB#E?Kk8
%]\/n]()?6:/>'n$N&.m$[]&;'3_WA_?6Z^\$P(3tro$Nce&ChC,njREjd#GcWim/8A7m`H-[Qbj]m%fq4R>H.3YEM-'==n9KE4d9
%dn1'ohjCp,PDkVtA6$EdA)nlEX]d[P;>'C%pZOoHdgS]MnRE"9>S:<C@KW=c/.5Jc/tZ/TIUoQ'm>dGZLlqcIYM27$g[OI?!(;ob
%/r:Lk7_0L9KXt*a@$kK\'"14H'PcEHQP#u$S1/k#9XTjn\q7bLQQEg=7-:,o(TMKdC@`SmU->NAOKOj?6iIC:`baDUVQ#-IHJ-#3
%BnEo)?"OhX&UeF=q^5PA6aQK'^i\0#+_>.A>:G59hr$n4eA+2_a%7`o]K5o?U-[jH*=];feN<`YB!i^\J)>^lY,fVBRjK/HYU9!]
%]lg/18pJj_I.tP`q;WtRWQC0W^o:@o0=5cRM"H[!:V'0[^R>2Q:I[/KdEmu#_Pg+LA>%J)m(:KU#Rp!OgE&go1\5kBJ4JA0Dha3]
%7bqHO)!AN6g4rU-GOY1\8NGae.^VZ;Za@1^mZ0.Cb'f2W_qEcKU*f#>i,rs8O:HdJj-[X7J-bclcK,CO:1aGEp!kC\Ou!R2BQ_=)
%P^6R8kaQ6Q,8eNXi+Q-*5JI;l_oQr7FdM^6agn&sU$UKeLkAnI)\k\eCVd\;/-s,9_f7qs1RDV5E<4Hhd:f0Wgq]=(ik@MX9/hE1
%YSPO,+h#Yu6DNE#(Z3+ECN<8]DY6`*X7qY:f.9Soei@$KZ6r1":-=KnC;XDL3lPR?_ifnuMJ5S6MVq_DU^)=*0`4ioZD.fCJ6`]"
%<qr&5d]^]La<'lGk:BE3Z6ZP$IJf9m-h\:Fl5TDCo_*n=;%:TuGcTDEoaM_#USuL*(1#IC%n!nc2F`?3,me"%/Mb>macF&+;8Je#
%U/I-mUUU<Q6Zm)i:I&#fCO=A!dMEDsR,(6f*d-`i94M*0:[hC3djGjN3SaQ!klgYgd3rJ"Kc-.'!HJfH;XXb;Q`!KKK<k26!pEa@
%c$"_D1StEO^D4RdIu&UMrUnA4fhWE&?G$ic(OnREk2JV^S@uMHGk9*cI.R<iNu,F7lYH.6`S]`P]5QP2I/ip5Ru?+shnK(O,^=$L
%iJT@<s)7r7QbW=q'sG,*~>
%AI9_PrivateDataEnd
