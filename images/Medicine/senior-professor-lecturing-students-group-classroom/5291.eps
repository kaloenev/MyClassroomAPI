%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Senior professor lecturing students group in classroom.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Виталий Викторович
%%CreationDate: 4/3/2020
%%BoundingBox: 0 0 3501 2000
%%HiResBoundingBox: 0 0 3500.0005 1999.9996
%%CropBox: 0 0 3500.0005 1999.9996
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Senior professor lecturing students group in classroom</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Senior professor lecturing students group in classroom. Grey haired doctor pointing at body silhouette, explaining human anatomy. Vector illustration for education, conference, class, medicine concept</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>dentist</rdf:li>
               <rdf:li>classroom</rdf:li>
               <rdf:li>conference</rdf:li>
               <rdf:li>meeting</rdf:li>
               <rdf:li>student</rdf:li>
               <rdf:li>class</rdf:li>
               <rdf:li>doctor</rdf:li>
               <rdf:li>lecture</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>audience</rdf:li>
               <rdf:li>college</rdf:li>
               <rdf:li>dentistry</rdf:li>
               <rdf:li>seminar</rdf:li>
               <rdf:li>training</rdf:li>
               <rdf:li>workshop</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>flat</rdf:li>
               <rdf:li>people</rdf:li>
               <rdf:li>cartoon</rdf:li>
               <rdf:li>character</rdf:li>
               <rdf:li>concept</rdf:li>
               <rdf:li>professor</rdf:li>
               <rdf:li>expert</rdf:li>
               <rdf:li>speaker</rdf:li>
               <rdf:li>scientist</rdf:li>
               <rdf:li>senior</rdf:li>
               <rdf:li>group</rdf:li>
               <rdf:li>body</rdf:li>
               <rdf:li>human</rdf:li>
               <rdf:li>anatomy</rdf:li>
               <rdf:li>explaining</rdf:li>
               <rdf:li>education</rdf:li>
               <rdf:li>university</rdf:li>
               <rdf:li>presentation</rdf:li>
               <rdf:li>learning</rdf:li>
               <rdf:li>studying</rdf:li>
               <rdf:li>analyzing</rdf:li>
               <rdf:li>analysis</rdf:li>
               <rdf:li>research</rdf:li>
               <rdf:li>science</rdf:li>
               <rdf:li>discussion</rdf:li>
               <rdf:li>medical</rdf:li>
               <rdf:li>medicine</rdf:li>
               <rdf:li>scientific</rdf:li>
               <rdf:li>organ</rdf:li>
               <rdf:li>treatment</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-04-03T14:19:14+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-04-03T14:19:15+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-04-03T14:19:15+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>148</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEAtAC0AAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAAtAAAAAEA&#xA;AQC0AAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAlAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq07oilnYKo6kmgwgWtt4FdirsVUru7t7O3e5uXEcMYq7mppU0Gwqepy&#xA;MpCIss8eOU5CMRZLVneW17bR3VrIJYJRVJBWhoad/cYxkJCxyXJjlCRjIUQqu6ojO5CooJZjsAB1&#xA;JyTEC9gxtPzB0A3Kwn1VVufGUqOPGNkUtSvKlZRTbK45QYGfQED5uZPQZIzEOciCfkyUEEAg1B3B&#xA;GWOE7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtEsZlaIMDKqh2Su4ViQpp7lTiji&#xA;F11WXV1b2kD3FxIIoUFWdugyUIGRoc1lIAWUg0DzK2p65eWyP6loiepbNx47BgDXv+1tmbqNL4eM&#xA;H+Lq42HPxzI6Mhn9b0m9EAy0+HkaCv3HNbk4uE8PNzI1e/JeK0FevfJBilGuQxvNA868reNXJ5Mw&#xA;j5VU/GFBr9nb7u+ZWCRANc2nKNxfJaEvJbOWBoJJbUv+4kDr6pRSCOSyHiwJB6tuvbDcRIGwD17v&#xA;s/Fo3Iqtl2maRQQXVwjQXMJekUchCcSSF5IrFK8evHBlzcwNwfx70wx8idiirOTVpbh5LmJLe1HJ&#xA;Y4a85SaijMykqBsdh45jrjOQmyKj9qJuI2lgkjU8WdSqt4EjY7eGRkLDkQlRBQljpYg0m0sWfg1s&#xA;kYLw1QFkpXrXYnrXIQx1EDubsufiySn/ADr5+a7WtOk1HTZbKOc2xmoGkC8vhrUilV69OuHJDijV&#xA;0jTZhimJEcVMT1TyDLFpMUVhwuLuORnmkZVR3UgAKrEmgFPslsxp6eQhwg9bdrg7TgcxnMVtQ60z&#xA;HTo5Y9Pto5hxmSJFkFa0YKAd/nmVAbC3T5iDMkcrKIyTWpNOgdUqFYsRxY0JFP2R3ys5BYDIR2tU&#xA;VgwqOmTBtBDeFDsVdirsVdirsVdirsVdirsVdirsVdirsVUru5jtbWW4k+xEhdugrQVpv44sZzEY&#xA;knogtDs5Y4Hu7oVvr1vVnY0qFoFjTZV2VANvGuEtOmxkDil9Utz+gfJC+b7WSbTYpVj9aK0nS4uI&#xA;P54krzH3HMvRTAmRysUD5rqY3H3FCaRcaZLqsmrWi+nDcoIKOYowOBFTx5cuw7Yc3iCPhyHI2145&#xA;gz4gNj7mT5hOY8//ADQ+vS6joNnb6jeafFP9baZrGd7dm9NYyoYodwKnrmRhIESaB5c3D1mQxAIY&#xA;x+gdQ/6mXXf+4jNkvH/ox+TrvzU+9w0DUCaDzJrpJ6D9ITY+P/Rj8l/M5O9Sg0u4uOfo+aNckEbM&#xA;jFdRmI5KSpoe9CCMiNSCSOGNjycjKM+OEZy+mfLfuVf0DqH/AFMuu/8AcRmyXj/0Y/Jx/wA1PvQF&#xA;1FNbTtC/mLzAWSlSuoSU3Fe7Dxw+N/Rj8mifaMomiSpeo3/UxeYf+k+T/mrD4v8ARj8mP8qHz/Hx&#xA;d6jf9TF5h/6T5P8AmrHxf6Mfkv8AKh8/x8Xeo3/UxeYf+k+T/mrHxf6Mfkv8qHz/AB8UXZWNzeBz&#xA;F5j18cKA8tQlHX5E4PG/ox+Tbj10p8iXp/kG4uLzyNoc91NJPcTWULyzyOzSMxQEszk8iTlGoiOM&#xA;jzd9iPpBWT2l1fapc1jaGOFgPWetKKKVXx8c0up0Upz4gdvupzNPqwAYkHb7U8a+tIp47eS4T6xM&#xA;f3MVRzIIJrxG9PhO+bUW4kskRIRvc9ERhZOxV2KuxV2KuxV2KuxV2KuxV2KuxVpuQUlAC1DxBNAT&#xA;2qaH9WKsEl1vzKmrxT3OlSR3kCvyt/VRYXip8XCWpBXkVNWANetO21jixnGQDt9t/i3ClOQmCQy3&#xA;RNZg1a0aeOOSCWKQw3NtMvGSKVQCUbqOjAgg0IOa7JjMDTlwnxBH5WyUbuytbyIRXUSzRAhuDbio&#xA;6bZOGSUTYNMZREtioR6Jo8f2LG3X3ESV++mSOfIecj82IxRHQJV5m1fVLS8t7axeKL1I2kZ5VZq8&#xA;SBQcQ3j4Zk6XDCUSZW1Z8kgQAwbzFf6tdeY9CF/LFIFS8MXpo6fsxg15qtctzY4RgeEHo4OonIx9&#xA;SMzAcFJ5JbvW9ZGhaYrvFCVbWLmEkFEO/wBXjYfZkkH2m/YXfqRkuQttxRJIoWzzzRZR21pa29pa&#xA;LFaQKFDRrRUVQEVNugCqMrDn6+6ArYMbyTq0hu0tm1S79fiSEUxh2KgtxXuCMLhTA4zarFb6EY1M&#xA;vpiSg5gSMRX78d2UY4q3r5r/AKt5e8U/5GN/zVjungxfgu+reXvFP+Rjf81Y7rwYvwVbTUtUmuBa&#xA;0MXwUoSwrQ13NcSzxCIJ4eTO/wAtf+UA8v8A/MBB/wAQGHUf3h971OL6QyTKWaAZ9Gs555+USXDb&#xA;zfEDIeI2AFa9+gyyOKR5BpqEST1UD5jsvq0bqwNy4Xlb/tKdi9f9UGuXflZX5d6PHFeaXav57tLC&#xA;6WGO3NzG0YcSq4UVNaChB8N812fMccuEh3Oj7P8AHx8Yl1TnRNUXVNNivREYfV5VjJrQqxXY0Fem&#xA;WY58UbcXVYPCmYXdI7JuO7FXYq7FXYq7FXYq7FXYq0zqilmIVR1JNBikC0Ffaba6g0EpchoGJV4y&#xA;NwdnSvvTtuCMtxZjEGurXkxWRfRQ17WI9EsEnEQaIHhxHwhQBXagOQ5lo1Oo8GN0xv8A5WjZ/wC+&#xA;B97f804eB1/8sx7nf8rRs/8AfA+9v+aceBf5Zj3Klv8AmTFczJBBaGWaQ8UjXkSSf9jjwso9rCRo&#xA;CylfmzW5Z57ZruKfTZI1cISjjkGIrQkL0pmVps/hgirtq1WtNjiBj82KNdR3HmfSitw85WO6rzrs&#xA;OKeOW5dR4kDtTRHOMgKP1bVXWQafp7RyajIyq6NIqNFG4JMtCG5FafZA/DNflE4x4gD8nP7P0sMs&#xA;iZkCA571/azz8utFsNH8upb2qkF5XaWVzyklkO7O7ndmJqTgJJ583N04gL4Pp4jXu6J7JJqH6RSP&#xA;0ojprRn1JCx5+oTQLx8MruXF5ObWPwzZPHfLpTA7+JYr64iXZY5XVR7KxGXPMZBUiPNjkzsuq3gV&#xA;HZmjUAxgEr8K775JwJH1yRUN46xKrWk0hAALlF398AIPJuPFH0yjK/cw+4/MDUtL88DRdZsY49Ov&#xA;gn6Lli3kq54r6m5HxNUHYU+W+WYxHJDiieXN2Oq0U8AHENyLpmf14/8ALDN/wIyt1vif0S3Yyepc&#xA;XDem0WyfAwoehxTjNk7Uy7yTqMOn/lroFxLuPqVuqrWlSUG1d8r1+XgMpVe71ukwnJUR3Mi0zVYb&#xA;9W4qUkShZDvse4OYml1kcwNbENubAcaNzLaEtGkRrps9sqr6sgmCyUFf3hcrv7c8yPHPGD02/Q1e&#xA;F6SPeoXdl5XvJodMumt5Lu3UGO29RVmCgfyqQ9CBmPlx8fqkHK0+pnh2gaRU+raFpqLDPeW1osaj&#xA;jG8iR8V5CMbEig5Hjk4YpHkGmeQXZO6PBBFRuD0OQS7FXYq7FXYq7FXYq7FXYqoXVhZ3ZT6zCswj&#xA;JKq+67+I6Hp3yMog82zHllC+E1aQ+a/M0Hl2zhtLSDldToyWka0CJxoAWHh8Ww75janUDEAANzyd&#xA;h2foTqZGUj6Rz7ywjWdZ1ifTGivrs3KE1PJUWjHaq8FX7jlODUyEhxGwU9tdlY8unmcY4ZQBkOe9&#xA;dDfl9rHrC4W2u0mYEqtagdd1I7/PNuXzDHPhlaZ22uQQxcG9WU1J5NxruenXBTkw1IA6llHljXba&#xA;XTtUFtVNRWMNEDTmU35FN/2epynPYiSHf9hZceTLwnnfVDX+qzWuj01BmkZpka1DOGehQl9iagUK&#xA;n6cx9GZG7dn7SyxQjEjnbBPMPmeC31WxvUjJeCG5VUam7yBAtads3Wl05yAjps8vgyCd015F0ma7&#xA;uZvMF/V5ZGYW5bux2d/+NR9OZGvzCIGOPLq3z2FPYLO8azt9Gght3uGlZpZBH1UNVObew55pZyI6&#xA;W7nQ4YyiAZCNRMt+v4tO9Vl9G1E56QyRu3+rzAb8DkgnNKo33EMM1+JY9YulXoWD/wDBgN/HJB1G&#xA;qFZCw6+u/q+qXPwB1kVUYE024r4ZKrDq5ZeDKT7lHV/Omk6RPDa3NzCklwvONHajcW6GgrSvvmLp&#xA;MM5QkPg9Z2xlj+YxZMY4hIRkfde32Ma1iLR9f8z6bqBu7aeLTgstvbwMDK8itz/esaNwWgooHjl2&#xA;jxzxQIkCCfkw9pdeDOPBUo1z/QWW/wCI5/8AfK/ecsp5X82e5G6RdtdSXEzKFJ4Cg9gcS24J8RJT&#xA;3S41f8qvLv7xVeO0t5BGzAFwI+J4g9T8WY3aQ3Pve77HNSG3MUyTybBD+jhch+cz1V1rUoATsfn1&#xA;zD0OARuXUs+0pHj4ejIM2DrmL/mb5ln8ueSdS1O1dUvVVYrQtT+9lcICoPUqCWp7Zdp8fHMA8mvL&#xA;LhjbxDUZtFPkRdSeamoXAE8V829017yLFvUHx8uakE12GV45ZfzZj0HMdOF2uWGEaIS7xsevE9c/&#xA;LLV/LPmvy/BqP1a3m1qFY01eR4YxMbkR8DIxpv6g5UbwJHiMydQJwlVnh6OoxcMhfVnYAAAAoBsA&#xA;MxG52KuxV2KuxV2KuxV2KofUrl7awuLiMAvEjOobpUDvSmWYoCUgD1YZJVElibec9YCkiK3JAqBx&#xA;ff8A4fLZDEOkvmP1OvjriSAaDEjD5g84XLXl1IkcUJMafDxVe5VVG5pXuc5XLklkNl9HE8GjiIx3&#xA;J39/m660G7kKWxkJitmCz/zHb4WHXY0/HMjTwByREjs6/tHXCGmnIDecaHx2PytTby3bqSrPICOo&#xA;NK/qzpOLH3S+x8v/ACsPP8fBRu9Dt4baSUO5KKSASKfqyQGOV1fJjPTQESRbA7vzRPHcMtsiGNDR&#xA;XapJp3FCM2GHs+JiDLmzw6QCieb0Xz35cu38iWnmGyvZSqRQTNATsIbhVrx8OLMOlNs1/Z+GGPMY&#xA;HcXtfSno+05DUxjOQHFEfO3mmkeXrrUNUtra5LQC55vzbdisYBbbxNe+bfLrIQieHenSxyRNgdHr&#xA;VvBFbwRwQqEiiUIijsAKDNBKRJssSbZZ5evlu9WUhBGIbMQgDvxZSfxJyBdlpcnFk90aTDUrxLjQ&#xA;75x+wzxGn+S/EfftgDfmyCWKXyYlqd8L24WbgIyEVCB3Kjrkg6rNk4zbzvz3qNxpsGo31vbvcSwI&#xA;rBEUsBVVHNqfsr1OWQokAmrcGOmllykAGhufIPBEa91TUGurmRpZGbnNMxqfYfwA7ZtccOg5O2A6&#xA;dzI9MM/6VsRASJWuYQpHhzHL6ONa5PPXAWvPXAb7nread55PPLf2J/mv8ciXN0nIsZ8v39wtjp80&#xA;3xtBAkKqTQBY09NQPDYZz2tzcWeUvMvtPZ+mEdLGHl9qhq2sanZaha6jaTtBdRuzrIhpQilB7im1&#xA;D1GU4pkG+rbqcUTAQI9L1TSfzf0+7sIZpbVlnKgTqrbBx9qnwnbuM6XT8GSAlxUfc+ddpaiOlzHH&#xA;IeY8wpfmbJp3mH8v4XnRo/XvITbIG6ujMWrsNvSD5eLxT232+9xNXqR4HGOvJ53qGk6LdaXZ6ebe&#xA;sFqGKpycBWY1NCDXKcMskckp39Th63tYTwYseMm4D1e9FfklPL5f/MC70Ep6ltq0HOGWu49AM617&#xA;dC6n3zO1J8TGJdQ5XZ2o4w+gc1rtHYq7FXYq7FXYq7FXYqgdc/4495/xhf8AVl2n/vI+9rzfQfc8&#xA;9HTBLm88mS6tpmnaVLOTyW2jeedUHxEqpdqV4gk0oN805wyy5SB1lX6HrYS8HFDjveNj3VaWWX5l&#xA;+UrxlWK4aK6cqIo5o2BLV+EclDL198yM3ZGoxDi4bEd9j3IhrsWT03Vs1tdN0LVg18sbM0hPqKWI&#xA;o/fYHMy6dXDDiy+qnnv5hkaNp2oRBqttHCT1Pq9PpCmuZ2gjxZK8nW5cXDMxeMcfhDVG5IpXfan9&#xA;c6G029wg1i5ufyvfSfqjStHpTB5VPIBY4S6nYew75yo1N6ugP4/07vSy0PDpeKUv4Lr7mF6FJ6mu&#xA;6RJ/PbzN96IcyJxoTHm8XphRkGdZiuQnnk5a6q5/lhY/8MoyMnN0A9fwa9G9l0G7+rXCpGly7XKs&#xA;Kl0CrSnhvkJiRIouXpZYxhycY4ude/vSTLXTsZ1jUXsLy9mVVZQgZlYVFFjB7ZCeAZKBZ6LtTJpM&#xA;0uAA8VA28LCqCeKheRLEKABUmp2GdGBTmE2y3yLo8E0japJUyW7mOFf2QxXdvnRqZg6zIfpdd2hl&#xA;oCI6sznnighaWVuKIKk5hQgZGhzdXGJkaCS6X521Cw1JpwolspKLLaN0KjoVbqr79f4Ztp9mxlCr&#xA;qQ6/jo7zTQjjFEWDz/HROFNkUVrEMtoygwq/2gpFaN13zz/VYzDLKJ5gvsGhyeJghLviFk9pDdR+&#xA;nKCVrWo2IPtlmiweJOjyp1HtL2qdHgEogGUpAb/M/q+Kb3lhZW9nbtaII4qcQo71FanxPjm00ZMS&#xA;YF4z2phDLix6mJ+rb4HcfLdkusWVvd+TdFWaZofRleZXG4HEFSWUAkijdsytfn8OQPkPuToOzBrN&#xA;Pwk0QNvf5/gMS1We2eylsNNX0+YI+uuoMrNSgKj9ha9hv4nNKO0J+IJdB0em0/slp44DCQ9R69x/&#xA;HuFfNmf5c6LawavBd3MaTalHaFDcx8yiNJwZwOaoR9mm48R3zaQ1RlIxH0F1A7Gx6XCCPr673fu/&#xA;HLm9My1odirsVdirsVdirsVdiqB1z/jj3n/GF/1Zdp/7yPva830H3PPR0wS5vPJZr8traaRdXF2r&#xA;S2lAk0SfaYSMFp1Xx8cxsOkn4oGOVSO+/l+O56jB2tjywrNjsRHMfL8bsT0S08pXt0RpsU315P38&#xA;UcnI8RD8bEUquwXucztbLWwgeOuCt6rr+OjkaGOgnkHDYlYq7/Hze7eU4YF0aGeJuf1keo5pSjUo&#xA;V/2JFMw4T4gC4f5P8vIw7iwP8zrG31o3CCQosDq6OoBq0alTXxHxHNhosnBInyLpNXlHHIjo8f1r&#xA;TIbFoUjkZmcMXrT2Apt882+k1Estk7U42DMclmqD2r8spfrX5S3VuWNIkvYK77BlL9/+MmazWCtQ&#xA;D7ndYDeL5vOvKj8tU0U/8UXA+4KP4Y6kVKfvDocYqc/g9BzBbE28sTNFqLsorWGSv0Dl/wAa4C5e&#xA;jlU/gXWEzLoGpIP5ovo5NQ/qx6ril+6kPclOFxGF+ckldNSSFS8rwlUUdSWjA2yyExEgy2AcbFil&#xA;k1IjEWSQ8ee1uUbg8Lqw/ZKkH7s3IywIsEV73eywTBoxIPuZ35Ejkj0iZZFKH6wxowIP2E8c12qm&#xA;JS2N7Ok7ThKOQAitv1p/PZ2l1wS7QvCrBiqsVrT5ZRDLOFmBotGjzRx5BKY4odQxLWrUwahLxg9C&#xA;3diYFFSvDtufxzfaPJxYxZ4pdfe7eWeGWRlAVG+XcyaxQJZQKN6Rrv8ARnnGsyceacu+R+99d0GP&#xA;gwQj3RH3IlCK075ndlHeXweJ9vYnhwnpcv8Ae/qTO6JOm2qgbkmg77VGZmIVlk6HtGRl2dp4jmSf&#xA;ssIP8xfNtzoPk239Ehby5DWdjXfiSOc8tD/IrhfmynLhWfNxfwxp2kydLoo4jtkyDfyH4/SxDQvz&#xA;U0C2sLFb23mbUFaOO9uOKkcSwDyoAaVC70oN9vfMWfZZ47jQi7PD7RxGACfEZgAe/wA7/H6X1JpO&#xA;nWVjZpHZ/FG9HMpPIuSPtE+/ttl+PGICg4OfPLLLikjMm0uxV2KuxV2KuxV2KuxVA65/xx7z/jC/&#xA;6su0/wDeR97Xm+g+556OmCXN55INburiO/AikaPggoUJB33PTBwgjdws+WUZ+kkIPy/fTp5tgkja&#xA;s0cEpd2oxIei0PKtckTtXRv0uoycXFxG/eyqx1bVLQy6fFKY7NyXRVFKcuoDdQPbMHEDCZj/AA9H&#xA;r+0M4z6SOYH95yluPu/GyjfxvJaSRoKuykKOm5+ebLDzPuLyshcSB3PKfNiyx6sYJRxeFFVlqDSv&#xA;xdvZs3PZ8ax33ldLjMY7oJfzN82+VtJm0/SbtYLO4LSOrRRSHnIBGxBkVv2VG2OqwQlISPN2GLLK&#xA;MaCdeWrm9tTY38NjPfRWzXELpbKHYF1RhUVFBvmNrIDjIurAcIQ9RPfTKv8AGV7/ANS7qf8AyKX/&#xA;AJqzB8AfzosuDzCY2fmbzRAfWtvKusD1EK8vq4IKsPc4PAH86LkY8GSO4XReZfNUVvNbp5U1gRT8&#xA;fVH1cVPE1G9a4+AP50VGDIAQORUf0z5j/wCpS1j/AJED+uPgj+dFj+Un3JbftqczyXFz5e1WxVqc&#xA;7m4iVIEoAByPXfp88xNfARwyPED/AGux7C7PP57HI9DfyiUtlkWONpG6ICx+jOXAfVSaFoLTNQFt&#xA;YercaZqFws0jsLm3VDETXcAt3HfOo7OwXiuwN3yv2owieq4pGvSP0oj/ABDYf9WfVP8AgY8zfA/p&#xA;Rea/L4v532rbnzFpb6fcW82hahJG45VkRPhZQaMCCKUyzHEwNiQbsUYQ5SDx/SbyeMPEkrqPtAKx&#xA;Hz6ZfhjGWxALs8WacdgSPizLyPezHWGilkZxJCwUMxO4IPf2BwarFERsABw+0pynjFkmi9PuHiSy&#xA;s3UVKGoVu/c/jmgxgnJMd7s9dlx49HppxF8J5Hr1P218w89/PWd2uPL0fSP6lJMEHTnJOysfujUf&#xA;Rm0w4BiHCPJjq9XLUEZJdQ8uy1w33R5Bujd+RvL1yzcnl020ZzufiMC8uvvmBPmXc4zcR7k+yLN2&#xA;KuxV2KuxV2KuxV2KofUrZ7mwuLeMgPKjIpbpUjvSuWYpiMgT0YZI3Ehin+DdX/35b/8ABP8A80Zc&#xA;Ti/pfZ+t1v5CXeGD+bNPuLHWWtpirS8EP7skjcbdQDkDw9OTpNdiMMnCl/5a6bda15h1Ca3ZFMcP&#xA;+7CR8LOoHQN/LiDH+K/g5ei05nsOgekf4N1f/flv/wAE/wDzRkrxf0vs/W7D+T5d4V7DypqdvfW8&#xA;8kkBSKRXYKzk0BrtVRhE8YBriuvJsxaOUZA28k/N7ynrum6pf+Zb8xNp15dBIWjcs4DAiMMpANeC&#xA;b5tdFqocIgOYDHUYZWZPGPNkzSW9tIit6EjOokIoC0YUso+QkGW55g7BpESA+l/+cclefyfc6r6n&#xA;7q9uSqQEUKNCOLNyrvzqPlTNX2hmE5Dbk52kjUber5r3LdirsVdirFfzLl4eVZl/35LEv3Ny/wCN&#xA;cw9ef3bt+xI3qB5AvENbdk09qDZ2VCfnVv8AjXNNjG712eVCu9kGlxkeR9LLdJJpiPl6hX+GdPoP&#xA;8XP9Z8x9rd8nyR0el2DXEkbcljWnCT1F+Kv0ZO3lxhjZHT3qeq6Rpa6XeMJDUQSEfGOvA+2EHdsj&#xA;ghfN88aBY3F/qkVrbisrrIyjx4Rs9P8AhczoT4TbseKt2ReVpvR1+zbszlD/ALNSv8cytQLgWOrj&#xA;eMvT65p3QkoH82fJHmTXdJ8u6hpdsLiC3glgl/eRowdpOY2crXbLs2eOOXqNbD7nq9Lo8mbHHgF0&#xA;HnLflP8AmCsUUz6O6RTgmJ2lgUMFNDSr5CWrxgWTzbIdmaiRIEdxz3H631x+Xlhd6f5F0Gyu09O5&#xA;t7GCOaOqtRggqKqSp+g5jykCbDlxgYDhPMMhwMnYq7FXYq7FXYq7FXYq7FVO6uYrW2luZjxihRpJ&#xA;G8FUVOLGcxEEnkHj63U2ta3qOtzR1isoJr54+wS3jJiT71WvjvlvIPLYic+Y5DyHq+XJX/IOHfW5&#xA;z/y7ov8AyUJ/hkZO07LH1H3PXcg7d2KvF/8AnJXXo49J0vQk3luZjeS+KpEpjQf7JpD/AMDmw7Ph&#xA;uZOLqZbAPKPzN0yHQ/y48nabLGBqWoyXWrTnoyJKsaRqe/xIF+kZcJ8WSR6DZoyCogPfvyF0WbSv&#xA;ys0aOdeE12sl4wpT4biQvGfpjKnMDUSuZcvAKgHoOUNzsVdirsVYf+aYJ8tR0NALmOo8RwfMHtD+&#xA;7+Lu+wf78/1T+h5rqWjif8ub/UQPjtr+As3+SEMdPvuBmDhh+6J8/wAfe7nV5q1MYf0T+PsZD+W3&#xA;luDX/JcCzzNGttcTIABWteL16in2s3PZ+cRxcJF7vJ9v6OOXLv3Bkf8AyqzS/wDlpf8A4H/m7Mzx&#xA;ofzftdD/ACPiWyflTpUkbI1y/FwVPw9iKfzY+ND+b9qjsjG+bPJmijSPzbtvL+pNw4X0mmySU6s/&#xA;KKNl/wBZipHscu4hV1bXLAJS4Jd6ffmj+Xd75L1uO4t2aTS7pvUsrkCnCQHkYm60K9V8R9OZuDOM&#xA;gpvy4eHY7h6t5C8taF5r8sWmrxXLLK49O7hAr6c6bOv2v9kPYjMHMYwlRj9rTDsrFIWyjzDpKab5&#xA;btbVHMiwz0DEU2ZWPvmr7Qnxi6r+x6fsWAxy4R/N/So6lD9Y8n2Fwg/uDxb5ElCf+CAzFyC8QPc5&#xA;+CXDqZRPX+1kfly5W40W0YdUQRke8fw/wzLwSuAdZrYcOWXvv5pllriuxV2KuxV2KuxV2KuxV2Kp&#xA;B57uvq/la9IPxShYl/2bAH/ha5KPNwe0p8OCXnsxvy5oqwfl/rN1KKSajaXG/QiJYnVfvNThkd3C&#xA;7P0/Dp5SPOQPyQv5Dw00HUZ6fbuglf8AUjU/8b4JOR2WPQT5vTci7N2KvmnWI2/MT862s1rJp0M4&#xA;t2INQLSzr6pBHaRg1Pdhm4h+6w31/W4MvXkQH5t2UnnX8+LLyta/3Nsttp7en0SIKbmdwBt8CSN/&#xA;wOUYTwY+Jco4slPqK3t4beCO3gQRwwoscUa7BVUUUD5AZri5y/FXYq7FXYqxT8zU5eVnNK8JozXw&#xA;3Ir+OYWvH7v4u47DP+ED3FJdF0n65+Vep24FWuo7mVB4vGPg/wCGjGV6WF4D525HaWataD3cI/Hz&#xA;UfyHlB8s38O1UvWf3+OKMf8AGuW6I+k+9xu2B+8B/o/pL0vMx1DsVfNH/OR/l+fRPO2mebrJeIvg&#xA;jO4rQXdmV4kntyj4U/1TmVhNinX6qNSEg951fSNG86eUxb3K87LUoI54JBQtGXUPHIh8VrlOOZhK&#xA;w5pAnF4x+WV/qX5efmJc+UtbPCz1FliSXf0zJv8AV5k/yZK8T7nf7ObHUAZcfGOjjYrhPhPV7R50&#xA;UHRSf5ZUI/EfxzQ6r6HedmH978ERp+nrL5ahs3FBLbjr2LjkD9BOThC8YHk15s1ZzIdJIPySzrp9&#xA;xA+zwzsCPCqjb7wcr0n0kebd2mPWCOoZDmU612KuxV2KuxV2KuxV2KpFrPnnynot59S1TUY7W6Ch&#xA;/SYOTxbofhU+GTjjkeQYGYHNinm38yPJ19aQWdtfQ3MUknK4c/DwC9NpAta17eGY+phlFCIO/c52&#xA;iGCfEchjQHKXVN2/Mr8tjaG0GrQLbmMxekiyKAhHHiKLttmT4Uu51/FCq6Mb8ieffImhWUmmib6r&#xA;FJM0/qs4kWrKq70Zm6IBsMw8OTJI1KMv9K7PN2dgwxvFPHXdx7sq/wCVqfl9/wBXqH/gZP8AmnMz&#xA;wZdzrfFj3oTV/wA2/I8Gk3s1rqaXNzFBK8FtGJFeSRUJVFbiKFjsDko4ZXyQcsaeF/k7+ZWg+Wde&#xA;ml1Ly/e25v1WD6+jGZIELVP7to424lqFjzY7dMzc8JzjRkDXwcbHmiJbRI+1L/JX5naZov5map5s&#xA;1TQr64fUpZ6Sq6u1us8vKqRGNORCDh/edME8JMOGwxjnAldH8fB9Gx/mv+Xzxq/6YiXkAeLJICK9&#xA;iOPXMLwZdzmeLHvXf8rU/L7/AKvUP/Ayf804PBl3L4se93/K1Py+/wCr1D/wMn/NOPgy7l8WPe7/&#xA;AJWp+X3/AFeof+Bk/wCacfBl3L4se93/ACtT8vv+r1D/AMDJ/wA04+DLuXxY97CfzG/OnyO+nyaR&#xA;a/W9RklKM81pCfTTiwbdpTHyP+rX55Xm0cskDHk5Gj7Rjp8onRNKmjfnT5F0TyRYer9auLpkkrpk&#xA;cBMwJkYkSE0iUb/z9McGklCIj3I1vaEcuQ5N9+iXfk/+YXkfT7TVI5ri401XljeNb5KFqqQeBj5V&#xA;403rkcOjnjvq26vtKGcggEV3vQ/+Vqfl9/1eof8AgZP+acu8GXc4fix73f8AK1Py+/6vUP8AwMn/&#xA;ADTj4Mu5fFj3vOPzo/MP8vPMPl19AR7u+ufVingu7O2LpC6Hc1lMIasbMvwk9cshjmNwGnLkhLY3&#xA;8B/YyD8tPzN8lWnknS7G81J7aaxjNt6d5GUl4RErGSqc1pwpTfIHFMncNsckAKBNefNiv57edvKW&#xA;s6Pa22hFL/WpmMP15In/AHFs/wDeAyMo+30p4V+mcMc735MMuYCJA+o7e7v/AFMo1Xz95LtvLtlo&#xA;Ol3guYbKKGCOYsFHCBAi/bIau2+2a3VmZ9IjI/Au97MxQiROWSERXIyFslt/zR/L9LeJDrEKlUUF&#xA;aSGlBSmy5mxwyobOpyZY8R36pZpf5meToNX1EvqEUdjcMJIZ/iIZwAGoAC29a7jMfFjn4khwlztT&#xA;KHgY5cQJ5Un1j+Y/ki/vIbO01aKW5uHEcMQDgszbACqgZknFIdHXjJE9WSZWzdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVf/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:9BB605EE9C75EA118DD8FCA61EEE42A0</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:9BB605EE9C75EA118DD8FCA61EEE42A0</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:44a6fedc-ddff-4741-844b-8f191437ae6d</stRef:instanceID>
            <stRef:documentID>xmp.did:f5177630-2e9e-604a-b83b-51009992df58</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c37189fe-6080-5043-8e66-852840c9c917</stEvt:instanceID>
                  <stEvt:when>2020-02-18T22:17:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:f5177630-2e9e-604a-b83b-51009992df58</stEvt:instanceID>
                  <stEvt:when>2020-03-16T11:44:34+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:44a6fedc-ddff-4741-844b-8f191437ae6d</stEvt:instanceID>
                  <stEvt:when>2020-03-28T16:09:12+07:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Bridge CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/metadata</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:9BB605EE9C75EA118DD8FCA61EEE42A0</stEvt:instanceID>
                  <stEvt:when>2020-04-03T14:19:15+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3500.000000</stDim:w>
            <stDim:h>2000.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=204 B=127</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=53 G=83 B=137</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>137</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=134 G=177 B=242</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=150 G=217 B=201</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>149</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>200</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=140 B=127</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>140</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=183 G=87 B=66</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>182</xmpG:red>
                           <xmpG:green>86</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=116 B=88</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>116</xmpG:green>
                           <xmpG:blue>87</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=164 B=145</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>163</xmpG:green>
                           <xmpG:blue>144</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=250 G=224 B=178</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>249</xmpG:red>
                           <xmpG:green>223</xmpG:green>
                           <xmpG:blue>177</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=247 G=204 B=127 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>246</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>126</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=150 G=217 B=201 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>149</xmpG:red>
                           <xmpG:green>216</xmpG:green>
                           <xmpG:blue>200</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=80 G=191 B=165</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>80</xmpG:red>
                           <xmpG:green>191</xmpG:green>
                           <xmpG:blue>165</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=60 G=143 B=124 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>59</xmpG:red>
                           <xmpG:green>142</xmpG:green>
                           <xmpG:blue>124</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=24 G=70 B=85 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>24</xmpG:red>
                           <xmpG:green>70</xmpG:green>
                           <xmpG:blue>84</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=19 G=55 B=91</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>19</xmpG:red>
                           <xmpG:green>54</xmpG:green>
                           <xmpG:blue>91</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=155 G=193 B=249</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>154</xmpG:red>
                           <xmpG:green>193</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=134 G=177 B=242 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>133</xmpG:red>
                           <xmpG:green>177</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=53 G=83 B=137 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>52</xmpG:red>
                           <xmpG:green>82</xmpG:green>
                           <xmpG:blue>137</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=70 G=110 B=182 2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>70</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>182</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -2000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2000 li
3500 2000 li
3500 0 li
cp
clp
3500 2000 mo
0 2000 li
0 0 li
3500 0 li
3500 2000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
1268.99 723.368 mo
1489.28 718.555 li
1496.38 718.4 1502.01 712.518 1501.86 705.417 cv
1499.37 591.43 li
1499.21 584.33 1493.33 578.699 1486.23 578.854 cv
1265.94 583.667 li
1258.83 583.822 1253.2 589.704 1253.36 596.805 cv
1255.85 710.791 li
1256 717.892 1261.89 723.522 1268.99 723.368 cv
cp
.52549 .694118 .94902 rgb
f
1387.67 648.542 mo
1388.17 671.25 1406.98 689.258 1429.69 688.762 cv
1452.4 688.266 1470.4 669.455 1469.91 646.745 cv
1469.41 624.036 1450.6 606.029 1427.89 606.525 cv
1405.18 607.021 1387.17 625.833 1387.67 648.542 cv
cp
1 1 1 rgb
f
1416.31 631.455 mo
1416.45 638.152 1422 643.462 1428.69 643.315 cv
1435.39 643.169 1440.7 637.622 1440.56 630.925 cv
1440.41 624.229 1434.86 618.918 1428.17 619.065 cv
1421.47 619.211 1416.16 624.758 1416.31 631.455 cv
cp
.52549 .694118 .94902 rgb
f
1409.9 670.098 mo
1448.65 669.251 li
1448.55 664.902 li
1448.38 656.968 1441.8 650.677 1433.87 650.851 cv
1423.85 651.069 li
1415.92 651.243 1409.63 657.815 1409.8 665.749 cv
1409.9 670.098 li
cp
f
1374.89 629.39 mo
1376.96 628.602 1378.31 626.586 1378.26 624.375 cv
1378.2 621.483 1375.8 619.182 1372.9 619.246 cv
1276.6 621.349 li
1276 621.362 1275.41 621.478 1274.85 621.691 cv
1272.78 622.48 1271.43 624.496 1271.48 626.708 cv
1271.54 629.599 1273.94 631.9 1276.83 631.837 cv
1373.13 629.733 li
1373.74 629.72 1374.33 629.604 1374.89 629.39 cv
cp
1 1 1 rgb
f
1360.07 659.251 mo
1362.14 658.462 1363.49 656.447 1363.44 654.235 cv
1363.38 651.343 1360.98 649.042 1358.09 649.105 cv
1282.87 650.749 li
1282.27 650.762 1281.68 650.877 1281.12 651.091 cv
1279.05 651.88 1277.7 653.896 1277.74 656.107 cv
1277.77 657.508 1278.35 658.813 1279.36 659.782 cv
1280.37 660.75 1281.7 661.267 1283.1 661.236 cv
1358.31 659.593 li
1358.92 659.581 1359.51 659.465 1360.07 659.251 cv
cp
f
2764.18 1472.44 mo
2764.18 933.968 li
2128.07 933.968 li
2128.07 1472.44 li
2764.18 1472.44 li
cp
.607843 .756863 .976471 rgb
f
2741.82 1450.08 mo
2741.82 956.328 li
2150.43 956.328 li
2150.43 1450.08 li
2741.82 1450.08 li
cp
.313726 .74902 .647059 rgb
f
2591.02 1412.38 mo
2186.98 1412.38 li
2186.98 1352.04 li
2591.02 1352.04 li
2591.02 1412.38 li
cp
.588235 .85098 .788235 rgb
f
2251.26 1382.86 mo
2251.26 1394.46 2241.86 1403.85 2230.27 1403.85 cv
2218.68 1403.85 2209.28 1394.46 2209.28 1382.86 cv
2209.28 1371.27 2218.68 1361.88 2230.27 1361.88 cv
2241.86 1361.88 2251.26 1371.27 2251.26 1382.86 cv
cp
.313726 .74902 .647059 rgb
f
1538.09 1309.84 mo
1538.09 710.915 li
830.567 710.915 li
830.567 1309.84 li
1538.09 1309.84 li
cp
.588235 .85098 .788235 rgb
f
1513.22 1284.97 mo
1513.22 735.786 li
855.438 735.786 li
855.438 1284.97 li
1513.22 1284.97 li
cp
.313726 .74902 .647059 rgb
f
1361.85 827.969 mo
957.813 827.969 li
957.813 767.626 li
1361.85 767.626 li
1361.85 827.969 li
cp
.588235 .85098 .788235 rgb
f
1022.09 798.454 mo
1022.09 810.045 1012.69 819.442 1001.1 819.442 cv
989.51 819.442 980.114 810.045 980.114 798.454 cv
980.114 786.862 989.51 777.464 1001.1 777.464 cv
1012.69 777.464 1022.09 786.862 1022.09 798.454 cv
cp
.313726 .74902 .647059 rgb
f
1076.34 1378.05 mo
1076.34 918.264 li
533.174 918.264 li
533.174 1378.05 li
1076.34 1378.05 li
cp
.607843 .756863 .976471 rgb
f
1057.24 1358.96 mo
1057.24 937.357 li
552.268 937.357 li
552.268 1358.96 li
1057.24 1358.96 li
cp
.588235 .85098 .788235 rgb
f
869.354 977.663 mo
869.354 977.663 860.878 1018.83 877.83 1039.42 cv
894.783 1060 906.891 1062.42 906.891 1062.42 cv
906.891 1062.42 914.156 1091.48 925.054 1095.12 cv
925.054 1095.12 927.072 1111.26 922.632 1112.07 cv
918.193 1112.88 910.12 1130.23 913.753 1144.36 cv
913.753 1144.36 885.499 1149.2 883.481 1170.6 cv
883.481 1170.6 876.216 1173.42 868.951 1171 cv
861.685 1168.58 846.348 1175.44 835.046 1174.23 cv
823.745 1173.02 805.582 1153.24 787.822 1161.31 cv
770.063 1169.38 774.906 1253.74 774.906 1253.74 cv
791.455 1253.74 li
791.455 1253.74 790.244 1192.39 799.124 1191.18 cv
808.003 1189.97 818.094 1201.27 845.137 1219.84 cv
872.179 1238.4 948.464 1249.71 992.46 1191.99 cv
1012.8 1165.3 1018.07 1129.76 1014.21 1097.12 cv
1010.94 1069.44 999.294 1019.94 966.202 1013.72 cv
953.394 1011.32 936.198 1011.07 926.668 1021.66 cv
919.404 1029.73 895.589 1024.89 892.361 1015.2 cv
889.132 1005.51 891.553 978.067 891.553 978.067 cv
869.354 977.663 li
cp
1 1 1 rgb
f
672.091 756.123 mo
662.252 769.46 li
640.184 758.92 li
623.522 776.975 li
605.345 771.887 li
601.565 781.21 li
625.876 788.015 li
641.667 770.906 li
664.624 781.87 li
679.429 761.8 li
672.091 756.123 li
cp
.956863 .54902 .498039 rgb
f
3150.26 1732.35 mo
477.575 1732.35 li
474.366 1732.35 471.765 1734.95 471.765 1738.16 cv
471.765 1738.16 li
471.765 1741.37 474.366 1743.97 477.575 1743.97 cv
3128.7 1743.97 li
3153.58 1743.97 3156.27 1741.37 3156.27 1738.16 cv
3156.27 1734.95 3153.58 1732.35 3150.26 1732.35 cv
cp
.07451 .215686 .356863 rgb
f
3063.56 762.894 mo
3043.51 748.87 li
3029.24 766.649 li
3008.89 753.705 li
2993.15 769.013 li
2976.33 761.817 li
2972.69 770.33 li
2995.18 779.955 li
3010.09 765.448 li
3031.27 778.914 li
3045.31 761.427 li
3063.47 774.136 li
3063.56 762.894 li
cp
.27451 .431373 .713726 rgb
f
931.095 442.517 mo
913.399 451.235 li
913.842 471.348 li
893.313 479.715 li
900.39 500.993 li
877.592 511.48 li
881.694 531.876 li
861.408 545.553 li
856.232 537.875 li
871.399 527.649 li
867.071 506.127 li
888.986 496.046 li
881.79 474.413 li
904.444 465.178 li
904.012 445.538 li
920.414 437.457 li
917.432 424.618 li
926.453 422.522 li
931.095 442.517 li
cp
.313726 .74902 .647059 rgb
f
1372.31 1294.05 mo
2421.83 1294.05 li
2421.83 451.534 li
1372.31 451.534 li
1372.31 1294.05 li
cp
.207843 .32549 .537255 rgb
f
2403.15 1267.67 mo
2403.15 477.918 li
1390.99 477.918 li
1390.99 1267.67 li
2403.15 1267.67 li
cp
.588235 .85098 .788235 rgb
f
1630.85 572.031 mo
1630.85 598.72 1645.65 620.355 1663.91 620.355 cv
1682.17 620.355 1696.97 598.72 1696.97 572.031 cv
1696.97 545.342 1682.17 523.707 1663.91 523.707 cv
1645.65 523.707 1630.85 545.342 1630.85 572.031 cv
cp
1 1 1 rgb
f
1690.98 581.208 mo
1690.38 586.857 1692.65 591.727 1696.04 592.084 cv
1699.43 592.442 1702.66 588.152 1703.26 582.501 cv
1703.85 576.852 1701.59 571.982 1698.2 571.625 cv
1694.81 571.268 1691.58 575.558 1690.98 581.208 cv
cp
f
1626.03 582.562 mo
1626.68 588.206 1629.95 592.468 1633.33 592.081 cv
1636.72 591.694 1638.94 586.805 1638.3 581.16 cv
1637.65 575.516 1634.38 571.254 1631 571.641 cv
1627.61 572.028 1625.39 576.917 1626.03 582.562 cv
cp
f
1539.08 903.674 mo
1543.19 893.093 1551.13 880.75 1551.13 880.75 cv
1551.13 880.75 1552.3 823.146 1556.71 809.626 cv
1561.12 796.107 1566.11 782.881 1567 774.946 cv
1567.88 767.011 1565.82 711.17 1569.64 694.418 cv
1573.46 677.666 1583.38 662.383 1593.67 656.799 cv
1603.95 651.215 1640.18 639.459 1643.41 632.699 cv
1646.64 625.939 1642.82 594.786 1642.82 594.786 cv
1663.91 588.531 li
1663.91 588.508 li
1663.95 588.519 li
1663.98 588.508 li
1663.98 588.531 li
1685.07 594.786 li
1685.07 594.786 1681.25 625.939 1684.48 632.699 cv
1687.71 639.459 1725.33 654.301 1735.62 659.885 cv
1745.9 665.469 1754.43 677.666 1758.25 694.418 cv
1762.07 711.17 1760.01 767.011 1760.89 774.946 cv
1761.78 782.881 1766.77 796.107 1771.18 809.626 cv
1775.59 823.146 1776.76 880.75 1776.76 880.75 cv
1776.76 880.75 1784.7 893.093 1788.81 903.674 cv
1792.93 914.254 1780.29 946.583 1772.94 944.526 cv
1765.6 942.469 1774.71 921.896 1771.18 916.605 cv
1767.65 911.315 1764.42 911.903 1763.24 915.724 cv
1762.07 919.544 1763.83 926.598 1761.78 926.598 cv
1759.72 926.598 1754.72 915.136 1755.6 905.731 cv
1756.48 896.326 1759.42 888.097 1757.66 881.044 cv
1755.9 873.99 1734.59 808.848 1731.65 796.798 cv
1728.71 784.749 1728.27 728.51 1725.33 727.628 cv
1725.33 727.628 1719.75 756.137 1713.87 781.118 cv
1718.57 819.913 li
1718.57 819.913 1725.63 873.109 1727.68 889.567 cv
1729.74 906.025 1722.1 1019.18 1722.1 1019.18 cv
1722.1 1019.18 1727.98 1057.09 1727.68 1077.37 cv
1727.39 1097.65 1715.05 1180.23 1715.05 1180.23 cv
1715.05 1180.23 1717.98 1201.1 1724.45 1209.92 cv
1730.92 1218.73 1726.21 1225.79 1719.45 1229.02 cv
1712.69 1232.25 1700.35 1234.6 1697.12 1233.72 cv
1697.12 1233.72 1694.18 1233.72 1695.06 1216.38 cv
1695.94 1199.04 1696.82 1183.76 1694.77 1178.47 cv
1692.71 1173.18 1695.06 1170.53 1696.53 1164.36 cv
1698 1158.19 1680.07 1065.17 1682.72 1052.24 cv
1685.36 1039.31 1685.81 1022.28 1686.69 1011.7 cv
1687.57 1001.12 1665.96 908.67 1665.96 908.67 cv
1661.93 908.67 li
1661.93 908.67 1640.18 1001.78 1641.06 1012.36 cv
1641.94 1022.94 1643.05 1041.75 1645.69 1054.68 cv
1648.34 1067.61 1629.89 1158.19 1631.36 1164.36 cv
1632.83 1170.53 1635.18 1173.18 1633.12 1178.47 cv
1631.07 1183.76 1631.95 1199.04 1632.83 1216.38 cv
1633.71 1233.72 1630.77 1233.72 1630.77 1233.72 cv
1627.54 1234.6 1615.2 1232.25 1608.44 1229.02 cv
1601.68 1225.79 1596.97 1218.73 1603.44 1209.92 cv
1609.91 1201.1 1612.85 1180.23 1612.85 1180.23 cv
1612.85 1180.23 1600.5 1097.65 1600.21 1077.37 cv
1599.91 1057.09 1605.79 1019.18 1605.79 1019.18 cv
1605.79 1019.18 1598.15 906.025 1600.21 889.567 cv
1602.26 873.109 1609.32 819.913 1609.32 819.913 cv
1614.02 781.118 li
1608.14 756.137 1602.56 727.628 1602.56 727.628 cv
1599.62 728.51 1599.04 783.426 1596.1 795.476 cv
1593.16 807.526 1571.99 873.99 1570.23 881.044 cv
1568.47 888.097 1571.4 896.326 1572.29 905.731 cv
1573.17 915.136 1568.17 926.598 1566.11 926.598 cv
1564.06 926.598 1565.82 919.544 1564.65 915.724 cv
1563.47 911.903 1560.24 911.315 1556.71 916.605 cv
1553.18 921.896 1562.29 942.469 1554.95 944.526 cv
1547.6 946.583 1534.96 914.254 1539.08 903.674 cv
cp
f
1887.53 1243.09 mo
2345.32 1243.09 li
2345.32 507.093 li
1887.53 507.093 li
1887.53 1243.09 li
cp
.313726 .74902 .647059 rgb
f
1719.97 715.809 mo
1719.97 727.4 1710.58 736.797 1698.99 736.797 cv
1687.39 736.797 1678 727.4 1678 715.809 cv
1678 704.216 1687.39 694.82 1698.99 694.82 cv
1710.58 694.82 1719.97 704.216 1719.97 715.809 cv
cp
.956863 .54902 .498039 rgb
f
1633.4 843.055 mo
1633.4 854.647 1624 864.044 1612.41 864.044 cv
1600.81 864.044 1591.42 854.647 1591.42 843.055 cv
1591.42 831.463 1600.81 822.066 1612.41 822.066 cv
1624 822.066 1633.4 831.463 1633.4 843.055 cv
cp
f
1740.96 1029.33 mo
1740.96 1040.92 1731.57 1050.32 1719.98 1050.32 cv
1708.38 1050.32 1698.99 1040.92 1698.99 1029.33 cv
1698.99 1017.74 1708.38 1008.34 1719.98 1008.34 cv
1731.57 1008.34 1740.96 1017.74 1740.96 1029.33 cv
cp
f
1699.64 534.452 mo
1699.64 546.043 1690.24 555.44 1678.65 555.44 cv
1667.06 555.44 1657.66 546.043 1657.66 534.452 cv
1657.66 522.86 1667.06 513.462 1678.65 513.462 cv
1690.24 513.462 1699.64 522.86 1699.64 534.452 cv
cp
f
2329.97 635.789 mo
1925.93 635.789 li
1925.93 575.445 li
2329.97 575.445 li
2329.97 635.789 li
cp
.588235 .85098 .788235 rgb
f
1990.21 606.273 mo
1990.21 617.865 1980.81 627.262 1969.22 627.262 cv
1957.63 627.262 1948.23 617.865 1948.23 606.273 cv
1948.23 594.681 1957.63 585.284 1969.22 585.284 cv
1980.81 585.284 1990.21 594.681 1990.21 606.273 cv
cp
.313726 .74902 .647059 rgb
f
2329.97 721.057 mo
1925.93 721.057 li
1925.93 660.713 li
2329.97 660.713 li
2329.97 721.057 li
cp
.588235 .85098 .788235 rgb
f
1990.21 691.541 mo
1990.21 703.132 1980.81 712.53 1969.22 712.53 cv
1957.63 712.53 1948.23 703.132 1948.23 691.541 cv
1948.23 679.949 1957.63 670.552 1969.22 670.552 cv
1980.81 670.552 1990.21 679.949 1990.21 691.541 cv
cp
.313726 .74902 .647059 rgb
f
2329.97 810.26 mo
1925.93 810.26 li
1925.93 749.917 li
2329.97 749.917 li
2329.97 810.26 li
cp
.588235 .85098 .788235 rgb
f
1990.21 780.744 mo
1990.21 792.336 1980.81 801.733 1969.22 801.733 cv
1957.63 801.733 1948.23 792.336 1948.23 780.744 cv
1948.23 769.152 1957.63 759.755 1969.22 759.755 cv
1980.81 759.755 1990.21 769.152 1990.21 780.744 cv
cp
.313726 .74902 .647059 rgb
f
2140.8 1021.63 mo
2139.79 1025.33 2139.21 1026.56 2137.93 1029.05 cv
2129.67 1045.09 2110.51 1067.98 2110.51 1067.98 cv
2095.69 1032.34 li
2095.69 1032.34 2098.11 1021.15 2102.3 1005.16 cv
2116.61 1009.15 2130.25 1011.45 2140.8 1021.63 cv
cp
.972549 .643137 .572549 rgb
f
2055.82 990.719 mo
2055.82 990.719 2138.49 1028.71 2141.16 1027.98 cv
2142.88 1027.52 2175.07 970.02 2175.41 915.949 cv
2175.57 890.975 2151.27 860.935 2124.16 866.875 cv
2110.51 869.867 2110.72 873.919 2090.52 905.238 cv
2070.33 936.557 2055.82 990.719 2055.82 990.719 cv
cp
.07451 .215686 .356863 rgb
f
1985.25 1671.88 mo
1985.25 1671.88 1987.22 1706.53 1987.23 1706.6 cv
1987.95 1711 1990.79 1721.87 1990.79 1725.87 cv
1990.79 1740.9 1923.94 1713.12 1938.92 1706.46 cv
1940.28 1705.86 1947.38 1701.3 1947.83 1696.19 cv
1948.52 1688.31 1950.26 1672.37 1950.26 1672.37 cv
1985.25 1671.88 li
cp
.968627 .643137 .568627 rgb
f
1939.09 1706.32 mo
1939.09 1706.32 1954.78 1710.91 1962.82 1712.06 cv
1970.86 1713.21 1981.45 1703.54 1987.14 1706.15 cv
1993.4 1709.03 1993.15 1734.92 1993.15 1734.92 cv
1993.15 1734.92 1908.99 1742.29 1885.33 1734.66 cv
1875.95 1731.64 1907 1717.02 1939.09 1706.32 cv
cp
.094118 .27451 .333333 rgb
f
2122 1671.88 mo
2122 1671.88 2123.96 1706.53 2123.97 1706.6 cv
2124.69 1711 2127.53 1721.87 2127.53 1725.87 cv
2127.53 1740.9 2060.69 1713.12 2075.67 1706.46 cv
2077.02 1705.86 2086.23 1697.9 2086.68 1692.78 cv
2087.36 1684.91 2087 1672.37 2087 1672.37 cv
2122 1671.88 li
cp
.968627 .643137 .568627 rgb
f
2075.83 1706.32 mo
2075.83 1706.32 2091.53 1710.91 2099.56 1712.06 cv
2107.6 1713.21 2118.2 1703.54 2123.88 1706.15 cv
2130.14 1709.03 2130.39 1734.92 2130.39 1734.92 cv
2130.39 1734.92 2045.85 1743.51 2022.07 1734.66 cv
2012.84 1731.23 2043.75 1717.02 2075.83 1706.32 cv
cp
.094118 .27451 .333333 rgb
f
2042.86 952.263 mo
2042.61 951.493 2042.08 949.917 2041.26 947.507 cv
2038.29 938.773 2032.12 920.6 2026.75 902.519 cv
2026.69 902.326 li
2025 896.007 2021.42 884.982 2017.96 874.316 cv
2014.11 862.458 2009.34 847.752 2009.17 845.244 cv
2009.32 844.815 2011.37 842.383 2011.74 841.361 cv
2013.9 835.379 2015.48 822.858 2016.07 816.608 cv
2016.44 812.665 2015.37 789.052 2010.98 789.052 cv
2005.66 789.052 2006.68 801.68 2005.57 808.215 cv
2005.31 809.723 2003.15 809.73 2002.89 808.224 cv
2002.48 805.938 2002.1 803.149 2001.41 798.685 cv
2000.26 779.972 li
2000.03 778.56 1999.64 756.667 1994.8 756.694 cv
1989.23 756.725 1992.11 779.56 1990.3 798.124 cv
1989.73 795.988 1989.16 793.411 1988.73 791.043 cv
1988.78 789.774 1987.14 780.848 1986.49 777.902 cv
1987.37 772.729 1987.72 751.333 1982.56 752.103 cv
1979.97 752.49 1979.28 776.59 1979.28 776.59 cv
1979.3 778.152 1980.26 794.059 1980.19 796.437 cv
1979.65 792.397 1976.33 754.07 1972.28 754.07 cv
1968.92 754.07 1969.38 768.555 1969.98 783.475 cv
1970.06 785.646 1971.51 799.781 1971.62 801.952 cv
1970.04 799.12 1966.85 773.529 1965.28 773.529 cv
1958.73 773.529 1963.04 810.588 1965.45 816.682 cv
1965.67 817.305 1965.91 818.528 1966.19 819.945 cv
1967.01 824.111 1968.38 831.084 1971.81 837.345 cv
1975.92 844.852 1980.82 849.097 1981.68 850.926 cv
1982.31 854.654 1985.06 875.75 1987.54 892.616 cv
1988.6 899.832 1989.76 907.746 1990.97 915.941 cv
1991.04 915.932 li
1991.26 917.706 1992.48 923.346 1997.14 944.505 cv
2003.52 973.462 2004.18 974.713 2004.46 975.248 cv
2007.23 980.476 2070.7 1072.48 2073.4 1076.39 cv
2075 1078.7 li
2101.73 1040.28 li
2042.86 952.263 li
cp
.968627 .643137 .568627 rgb
f
1991.16 826.113 mo
1991.16 826.113 1995.94 813.071 2004.45 813.047 cv
2004.45 813.047 1999.7 811.217 1995.62 814.66 cv
1991.54 818.104 1991.16 826.113 1991.16 826.113 cv
cp
.956863 .454902 .345098 rgb
f
2115.79 810.343 mo
2123.37 861.497 li
2123.37 861.497 2094.49 886.244 2077.66 881.023 cv
2063.53 876.643 2073.22 856.936 2073.22 856.936 cv
2073.22 856.936 2080.75 829.627 2078.44 815.314 cv
2076.13 801 2115.79 810.343 2115.79 810.343 cv
cp
.968627 .643137 .568627 rgb
f
2110.35 825.808 mo
2103.11 829.455 2088.8 834.434 2077.67 835.638 cv
2078.73 828.48 2079.34 820.909 2078.44 815.314 cv
2077.37 808.708 2085.25 807.146 2094.04 807.373 cv
2105.54 808.425 2115.79 810.343 2115.79 810.343 cv
2117.25 820.173 li
2115.06 822.635 2112.76 824.593 2110.35 825.808 cv
cp
.956863 .454902 .345098 rgb
f
2152.24 751.338 mo
2153.43 751.345 2140.82 808.486 2121.31 818.317 cv
2101.8 828.148 2072.7 823.024 2067.24 807.633 cv
2061.21 790.609 2083.23 732.31 2110.67 724.904 cv
2138.11 717.499 2152.24 751.338 2152.24 751.338 cv
cp
.968627 .643137 .568627 rgb
f
2129.66 698.833 mo
2145.24 708.427 2152.4 722.654 2154.8 728.481 cv
2162.12 732.185 2170.97 740.198 2175.22 761.787 cv
2180.44 788.331 2161.87 808.793 2142.18 814.949 cv
2122.49 821.104 2119.38 834.604 2119.38 834.604 cv
2117.21 820.044 li
2117.21 820.044 2121.59 807.015 2128.18 800.494 cv
2134.77 793.973 2125.06 784.469 2124.21 776.718 cv
2123.55 770.75 2127.67 759.16 2126.78 749.366 cv
2126.78 749.366 2115.84 731.67 2105.05 727.297 cv
2086.66 719.843 2109.66 686.525 2129.66 698.833 cv
cp
.07451 .215686 .356863 rgb
f
2121.37 786.667 mo
2118.82 793.267 2119.86 799.82 2123.69 801.303 cv
2127.53 802.786 2132.71 798.638 2135.26 792.038 cv
2137.81 785.438 2136.77 778.885 2132.93 777.402 cv
2129.09 775.919 2123.92 780.067 2121.37 786.667 cv
cp
.968627 .643137 .568627 rgb
f
2048.69 1042.25 mo
1935.13 1022.49 li
1935.13 1022.49 1948.05 987.77 1952.67 987.77 cv
1957.28 987.77 2038.54 1025.63 2038.54 1025.63 cv
2045 1039.48 li
2048.69 1042.25 li
cp
.972549 .643137 .572549 rgb
f
2106.86 1125.34 mo
2106.86 1125.34 2118.19 1183.79 2113.57 1228.11 cv
2108.96 1272.43 2108.59 1429.87 2108.59 1429.87 cv
2126.21 1681.77 li
2084.41 1682.74 li
2084.41 1682.74 2034.84 1430.96 2035.77 1437.43 cv
2036.69 1443.89 2019.15 1260.15 2019.15 1260.15 cv
2078.24 1119.8 li
2106.86 1125.34 li
cp
.717647 .341176 .258824 rgb
f
2095.78 1122.57 mo
2095.78 1122.57 2103.17 1175.2 2093.94 1198.29 cv
2084.7 1221.37 2014.74 1447.85 2013.82 1466.32 cv
2012.89 1484.79 1989.63 1688.9 1989.63 1688.9 cv
1941.02 1687.44 li
1930.51 1460.51 li
1952.53 1175.3 li
1973.9 1103.19 li
2095.78 1122.57 li
cp
.956863 .454902 .345098 rgb
f
2123.37 861.497 mo
2123.37 861.497 2111.39 869.89 2100.21 868.917 cv
2089.03 867.945 2073.22 856.936 2073.22 856.936 cv
2075.42 848.989 li
2075.42 848.989 2104.34 844.493 2105.07 844.979 cv
2105.8 845.465 2123.37 861.497 2123.37 861.497 cv
cp
.968627 .643137 .568627 rgb
f
1995.62 986.057 mo
1995.62 986.057 1952.67 1029.32 1933.28 1021.93 cv
1913.89 1014.55 1905.86 989.297 1953.17 952.357 cv
1995.52 919.296 1995.62 986.057 1995.62 986.057 cv
cp
.972549 .643137 .572549 rgb
f
1966.52 1039.48 mo
1972.9 1002.43 2019.15 887.128 2022.84 865.892 cv
2024.64 855.565 2049.58 855.336 2073.34 856.684 cv
2098.44 858.108 2123.37 861.497 2123.37 861.497 cv
2123.37 861.497 2145.59 865.391 2155.37 875.167 cv
2165.14 884.942 2167.74 911.977 2153.69 963.299 cv
2142.59 1003.81 2128.84 1026.06 2122.04 1055.56 cv
2120.66 1065.46 2119.48 1075.23 2117.91 1086.64 cv
2115.41 1130.76 2117.94 1189.05 2117.94 1189.05 cv
2117.94 1189.05 1996.99 1215.83 1951.74 1175.2 cv
1951.74 1175.2 1959.98 1077.44 1966.52 1039.48 cv
cp
.207843 .32549 .537255 rgb
f
1935.68 959.81 mo
1935.68 959.81 1983.14 1001.62 1985.91 1001.62 cv
1987.69 1001.62 2053.63 949.849 2068.86 907.316 cv
2077.27 883.802 2059.62 857.495 2039.46 857.583 cv
2025.48 857.643 2019.27 861.486 1991.57 886.416 cv
1963.87 911.345 1935.68 959.81 1935.68 959.81 cv
cp
.07451 .215686 .356863 rgb
f
631.583 1641.2 mo
631.583 1641.2 628.175 1675.8 619.415 1682.16 cv
610.653 1688.51 598.972 1712.02 604.813 1724.73 cv
610.653 1737.43 635.185 1732.98 635.185 1732.98 cv
635.185 1732.98 649.787 1719.64 651.101 1691.53 cv
652.415 1663.42 661.176 1649.12 661.176 1649.12 cv
631.583 1641.2 li
cp
.968627 .643137 .568627 rgb
f
770.303 1655.02 mo
770.303 1655.02 773.064 1689.94 770.823 1701.29 cv
769.623 1707.36 762.938 1719.87 766.004 1725.59 cv
769.071 1731.31 772.575 1732.73 772.575 1732.73 cv
861.501 1734.16 li
861.501 1734.16 861.309 1722.95 819.009 1710.82 cv
813.626 1709.27 807.773 1703.98 802.997 1698.67 cv
797.291 1692.33 796.792 1661.58 796.792 1661.58 cv
770.303 1655.02 li
cp
f
833.797 1190.91 mo
833.797 1190.91 843.94 1247.6 837.28 1284.77 cv
830.621 1321.93 802.75 1668.26 802.75 1668.26 cv
760.369 1668.71 li
760.369 1668.71 752.587 1526.92 753.919 1506.91 cv
755.251 1486.9 764.515 1456 764.515 1456 cv
765.358 1334.8 li
810.183 1182.16 li
833.797 1190.91 li
cp
.235294 .560784 .486275 rgb
f
729.397 1178.99 mo
729.397 1178.99 701.427 1220.44 694.767 1254.75 cv
688.108 1289.05 699.655 1394.49 686.845 1439.44 cv
679.91 1463.78 646.067 1498.44 642.071 1529.89 cv
638.075 1561.34 621.342 1647.49 621.342 1647.49 cv
665.465 1653.56 li
747.982 1447.83 li
812.708 1261.89 li
829.289 1166.12 li
729.397 1178.99 li
cp
.313726 .74902 .647059 rgb
f
647.475 1711.73 mo
628.383 1715.2 615.68 1704.05 609.07 1695.71 cv
604.217 1705.16 601.244 1716.96 604.813 1724.73 cv
610.653 1737.43 635.185 1732.98 635.185 1732.98 cv
635.185 1732.98 642.746 1726.08 647.475 1711.73 cv
cp
.956863 .454902 .345098 rgb
f
819.009 1710.82 mo
817.483 1710.38 815.92 1709.64 814.354 1708.68 cv
793.336 1714.06 777.8 1710.41 769.109 1706.91 cv
766.868 1713.25 763.76 1720.73 764.429 1725.53 cv
765.239 1731.35 767.837 1733.45 767.837 1733.45 cv
861.501 1734.16 li
861.501 1734.16 861.309 1722.95 819.009 1710.82 cv
cp
f
953.282 1290.09 mo
953.282 1290.09 949.089 1285.59 947.814 1283.99 cv
946.317 1282.11 942.274 1276.15 942.274 1276.15 cv
942.274 1276.15 929.177 1254.75 930.862 1253.94 cv
932.545 1253.12 936.872 1255.58 938.149 1256.62 cv
939.427 1257.66 941.025 1258.77 942.303 1259.81 cv
943.581 1260.86 945.423 1260.79 946.849 1259.33 cv
948.275 1257.87 944.094 1252.62 942.284 1251.09 cv
936.637 1246.31 918.948 1236.51 917.121 1235.39 cv
914.96 1234.07 899.179 1192.89 892.633 1179.19 cv
892.635 1179.19 892.637 1179.19 892.639 1179.19 cv
882.601 1156.46 873.441 1132.61 872.39 1130.2 cv
859.748 1024.99 li
818.706 1014.31 li
818.706 1014.31 831.067 1131.26 832.365 1137.04 cv
832.983 1139.79 860.391 1190.72 860.413 1190.71 cv
875.512 1214.96 888.88 1236.3 891.33 1240.47 cv
891.33 1240.47 895.255 1254.85 897.205 1264.15 cv
899.155 1273.45 904.749 1281.26 905.705 1283.79 cv
905.846 1284.17 908.655 1293.06 915.928 1302 cv
922.196 1309.71 919.833 1299.54 919.833 1299.54 cv
919.833 1299.54 910.822 1283.18 912.252 1282.69 cv
913.354 1282.31 917.741 1291.54 924.586 1300.14 cv
926.346 1302.35 928.091 1304.53 929.71 1306.51 cv
933.961 1311.73 938.423 1310.62 934.857 1304.45 cv
933.598 1302.28 931.417 1298.71 929.498 1296.39 cv
927.424 1293.89 926.34 1290.92 924.925 1288.54 cv
922.114 1283.83 920.003 1280.43 920.264 1280.42 cv
920.602 1280.41 920.713 1279.08 922.656 1281.37 cv
924.991 1284.12 928.638 1291.06 932.391 1294.85 cv
934.518 1296.99 938.687 1301.74 938.687 1301.74 cv
938.687 1301.74 946.3 1308.71 946.808 1308.39 cv
949.559 1306.61 945.556 1300.08 942.278 1297.54 cv
941.036 1294.86 936.506 1289.99 936.506 1289.99 cv
936.506 1289.99 929.592 1278.08 931.286 1277.08 cv
932.676 1276.25 954.814 1301.58 957.444 1299.61 cv
959.591 1298 953.282 1290.09 953.282 1290.09 cv
cp
.956863 .54902 .498039 rgb
f
912.203 1252.86 mo
912.203 1252.86 924.253 1259.68 930.668 1254.07 cv
930.668 1254.07 928.28 1258.62 922.98 1258.68 cv
917.681 1258.73 912.203 1252.86 912.203 1252.86 cv
cp
.956863 .454902 .345098 rgb
f
753.076 811.747 mo
747.157 827.943 731.705 830.203 715.986 837.358 cv
705.435 842.162 701.961 861.605 705.534 875.162 cv
714.582 909.498 686.09 899.053 666.753 917.557 cv
620.175 962.127 697.232 1004.03 708.245 1011.09 cv
719.257 1018.15 760.69 1031.5 768.019 1032.55 cv
790.11 1035.71 818.835 1023.9 837.104 998.458 cv
855.373 973.015 839.469 954.692 842.351 938.114 cv
845.234 921.536 865.826 922.384 864.638 889.361 cv
863.354 853.634 852.314 824.688 836.321 809.798 cv
809.86 785.161 772.207 790.146 760.197 801.346 cv
756.619 804.683 754.368 808.212 753.076 811.747 cv
cp
.956863 .454902 .345098 rgb
f
824.804 944.158 mo
824.804 944.158 837.037 949.802 853.599 983.308 cv
869.025 1014.52 871.552 1087.05 871.552 1087.05 cv
871.552 1087.05 847.009 1094.85 832.918 1092.16 cv
818.827 1089.48 824.804 944.158 824.804 944.158 cv
cp
.968627 .8 .498039 rgb
f
778.49 933.652 mo
778.49 933.652 770.309 934.334 728.721 943.197 cv
721.961 944.638 711.336 952.401 707.245 959.673 cv
685.981 997.476 667.271 1065.17 667.271 1065.17 cv
667.271 1065.17 702.008 1076.53 714.085 1076.53 cv
728.38 1031.49 li
728.38 1031.49 744.635 1126.51 737.925 1142.61 cv
731.215 1158.72 714.404 1199.54 714.404 1199.54 cv
714.404 1199.54 714.671 1208.25 778.172 1214.93 cv
803.67 1217.62 835.418 1212.16 835.418 1212.16 cv
835.418 1212.16 829.644 1150.45 834.771 1123.63 cv
843.123 1079.94 859.405 1027.64 860.237 1020.98 cv
861.579 1010.25 836.84 949.497 824.055 943.765 cv
820.76 942.288 815.283 939.213 810.42 938.084 cv
795.7 934.666 778.49 933.652 778.49 933.652 cv
cp
.980392 .878431 .698039 rgb
f
784.03 890.593 mo
784.03 890.593 782.699 920.999 778.833 932.194 cv
774.967 943.388 786.954 983.996 811.19 989.919 cv
833.035 995.259 817.272 957.323 814.243 941.16 cv
813.912 939.391 818.146 883.088 818.146 883.088 cv
784.03 890.593 li
cp
.968627 .643137 .568627 rgb
f
816.522 900.784 mo
818.419 891.181 820.193 883.217 820.193 883.217 cv
784.03 890.593 li
784.03 890.593 783.758 896.811 783.102 904.658 cv
796.66 910.926 808.243 908.123 816.522 900.784 cv
cp
.956863 .454902 .345098 rgb
f
794.966 807.866 mo
794.966 807.866 780.765 811.824 772.575 825.804 cv
764.386 839.784 760.301 879.935 790.446 897.067 cv
820.59 914.2 841.987 886.75 841.076 861.07 cv
840.164 835.391 832.947 801.422 794.966 807.866 cv
cp
.968627 .643137 .568627 rgb
f
843.708 852.381 mo
841.527 858.698 836.776 862.789 833.096 861.518 cv
829.417 860.248 828.202 854.096 830.383 847.779 cv
832.564 841.462 837.315 837.372 840.996 838.643 cv
844.675 839.913 845.89 846.064 843.708 852.381 cv
cp
f
770.25 861.171 mo
772.703 867.735 771.095 874.4 766.658 876.059 cv
762.221 877.716 756.636 873.739 754.183 867.175 cv
751.73 860.611 753.339 853.946 757.776 852.288 cv
762.212 850.63 767.797 854.607 770.25 861.171 cv
cp
f
836.804 1215.16 mo
733.175 1197.89 li
755.447 1053.81 li
864.557 1075.2 li
836.804 1215.16 li
cp
.27451 .431373 .713726 rgb
f
852.372 1135.96 mo
852.22 1135.35 843.625 1137.71 837.713 1135.17 cv
836.531 1134.65 841.808 1131.78 842.628 1130.79 cv
842.737 1130.66 852.997 1126.64 852.997 1122.55 cv
852.997 1118.46 844.645 1119.48 844.645 1119.48 cv
844.645 1119.48 820.442 1125.45 816.692 1128.01 cv
812.943 1130.56 811.167 1132.68 810.907 1132.93 cv
809.458 1133.09 808.221 1133.17 807.318 1133.12 cv
786.367 1131.8 753.877 1120.7 704.541 1102.9 cv
709.627 1076.19 li
698.732 1074.75 680.284 1069.25 671.795 1066.6 cv
668.326 1087.05 661.262 1122.31 664.317 1129.88 cv
666.458 1135.19 692.699 1143.55 722.144 1151.6 cv
759.653 1161.85 770.056 1161.6 803.568 1165.67 cv
813.727 1166.87 826.895 1172.58 832.114 1173.62 cv
839.873 1175.16 842.434 1176.55 847.145 1173.23 cv
851.12 1170.43 852.365 1161.88 852.826 1156.53 cv
853.706 1146.39 854.11 1142.52 852.372 1135.96 cv
cp
.968627 .643137 .568627 rgb
f
2876.3 650.766 mo
2868.57 650.741 li
2852.62 628.593 li
2840.35 678.413 li
2831.31 591.866 li
2806.07 648.153 li
2795.14 628.136 li
2781.03 653.266 li
2761.99 629.836 li
2753.25 672.355 li
2745.41 599.187 li
2717.75 648.747 li
2651.63 648.532 li
2649.97 648.527 2648.62 649.87 2648.61 651.532 cv
2648.61 651.532 li
2648.61 653.194 2649.95 654.545 2651.61 654.55 cv
2724.18 654.786 li
2739.26 627.751 li
2750.37 731.433 li
2767.29 649.154 li
2782.57 667.964 li
2795.03 645.786 li
2806.94 667.595 li
2825.65 625.851 li
2836.66 731.203 li
2856.98 648.725 li
2862.75 656.74 li
2880.31 656.797 li
2878.78 654.74 2877.45 652.726 2876.3 650.766 cv
cp
.607843 .756863 .976471 rgb
f
2931.09 616.221 mo
2931.09 616.221 2939.9 604.082 2957.25 604.138 cv
2972.71 604.188 2983.33 616.714 2983.28 631.262 cv
2983.23 648.1 2968.64 667.977 2930.86 685.17 cv
2893.2 667.732 2878.74 647.761 2878.8 630.923 cv
2878.84 616.375 2889.54 603.918 2905.01 603.968 cv
2922.35 604.025 2931.09 616.221 2931.09 616.221 cv
cp
.956863 .54902 .498039 rgb
f
1129.72 478.734 mo
1156.98 476.408 li
1154.74 450.176 li
1127.48 452.503 li
1129.72 478.734 li
cp
.52549 .694118 .94902 rgb
f
1134.51 487.29 mo
1153.71 485.651 li
1153.08 478.277 li
1133.88 479.917 li
1134.51 487.29 li
cp
f
1114.79 397.283 mo
1119.14 396.912 1122.37 393.082 1122 388.728 cv
1120.77 374.362 li
1148.11 372.029 li
1149.33 386.395 li
1149.7 390.749 1153.53 393.976 1157.89 393.604 cv
1161.86 440.169 li
1162.21 444.23 1159.2 447.803 1155.14 448.15 cv
1126.75 450.573 li
1123.66 450.837 1120.85 449.16 1119.53 446.556 cv
1118.94 441.798 1114.79 397.283 1114.79 397.283 cv
cp
f
1114.23 374.921 mo
1154.65 371.47 li
1153.83 361.808 li
1113.4 365.259 li
1114.23 374.921 li
cp
f
1086.97 548.59 mo
1126.38 545.226 li
1124.12 518.783 li
1084.71 522.146 li
1086.97 548.59 li
cp
f
1055.29 565.508 mo
1201.58 553.022 li
1201.2 548.655 li
1200.74 543.273 1196.01 539.283 1190.63 539.742 cv
1063.83 550.565 li
1058.45 551.024 1054.46 555.76 1054.92 561.142 cv
1055.29 565.508 li
cp
f
1106.7 520.552 mo
1181.96 514.128 li
1180.83 500.907 li
1105.57 507.331 li
1106.7 520.552 li
cp
.588235 .85098 .788235 rgb
f
1132.71 438.585 mo
1123.29 439.021 1113.06 439.495 1113.18 439.489 cv
1112.16 439.573 li
1088.99 441.322 1068.42 465.144 1083.44 496.236 cv
1083.95 497.151 li
1091.9 510.947 1102.55 516.259 1117.02 528.402 cv
1104.34 543.449 li
1088.93 532.518 1074.05 526.009 1062.37 506.843 cv
1062.17 506.346 1044.58 478.677 1056.77 449.338 cv
1066.78 425.67 1087.57 411.597 1109.81 408.728 cv
1131.21 406.078 li
1132.71 438.585 li
cp
.52549 .694118 .94902 rgb
f
1545.99 719.124 mo
1545.06 710.484 1521.18 703.525 1514.16 701.453 cv
1507.13 699.381 1511.69 701.066 1503.9 703.57 cv
1502.94 703.875 1479.35 739.851 1479.35 739.851 cv
1471.9 751.572 1403.64 855.9 1380.64 871.739 cv
1357.16 887.916 1263.56 916.133 1263.56 916.133 cv
1259.28 975.877 li
1259.28 975.877 1388.5 931.586 1416.16 907.84 cv
1439.06 888.176 1484.72 793.491 1506.48 758.593 cv
1506.51 758.608 li
1512.17 751.302 1546.92 727.763 1545.99 719.124 cv
cp
.968627 .643137 .568627 rgb
f
1665.7 533.425 mo
1507.09 734.236 li
1506.95 734.411 li
1503.99 738.158 1498.55 738.796 1494.81 735.836 cv
1491.06 732.877 1490.42 727.441 1493.38 723.694 cv
1493.45 723.609 1493.54 723.499 1493.61 723.417 cv
1660.54 529.283 li
1660.6 529.218 li
1661.79 527.833 1663.88 527.675 1665.26 528.867 cv
1666.61 530.026 1666.79 532.042 1665.7 533.425 cv
cp
.0941176 .27451 .333333 rgb
f
1529.04 706.438 mo
1507.09 734.236 li
1506.95 734.411 li
1504.17 737.934 1499.2 738.708 1495.5 736.329 cv
1496 737.116 1496.64 737.834 1497.42 738.446 cv
1501.17 741.406 1506.6 740.768 1509.56 737.021 cv
1509.7 736.845 li
1532.55 707.912 li
1531.4 707.397 1530.22 706.906 1529.04 706.438 cv
cp
.956863 .454902 .345098 rgb
f
1528.26 694.073 mo
1528.26 694.073 1551.72 714.865 1545.82 723.563 cv
1539.3 733.177 1530.97 738.359 1530.53 735.47 cv
1530.08 732.581 1535.56 718.563 1535.56 718.563 cv
1535.56 718.563 1528.14 709.161 1526.68 704.083 cv
1525.23 699.006 1524.14 693.761 1528.26 694.073 cv
cp
.968627 .643137 .568627 rgb
f
1517.29 705.168 mo
1517.29 705.168 1502.54 711.521 1501.7 709.698 cv
1500.86 707.875 1503.9 703.571 1503.9 703.571 cv
1503.9 703.571 1523.76 688.487 1524.48 693.9 cv
1525.21 699.313 1517.29 705.168 1517.29 705.168 cv
cp
f
1543.38 701.455 mo
1543.38 701.455 1530.63 686.992 1530.13 691.818 cv
1529.53 697.64 1540.17 714.505 1545.39 714.505 cv
1550.61 714.505 1550.61 709.486 1543.38 701.455 cv
cp
f
1244.14 910.359 mo
1244.14 910.359 1350.51 876.146 1369.59 867.023 cv
1388.67 857.899 1465.8 744.272 1465.8 744.272 cv
1508.1 765.836 li
1508.1 765.836 1413.76 919.275 1409.61 925.91 cv
1278.82 989.203 li
1244.14 910.359 li
cp
.27451 .431373 .713726 rgb
f
1224.09 1653.82 mo
1224.09 1653.82 1218.61 1685.7 1215.7 1690.87 cv
1212.79 1696.03 1236.99 1724.42 1250.19 1719.81 cv
1257.63 1717.21 1258.89 1693.82 1258.89 1693.82 cv
1253.5 1687.19 li
1260.95 1659.3 li
1224.09 1653.82 li
cp
.968627 .643137 .568627 rgb
f
1215.35 1689.56 mo
1215.35 1689.56 1230.79 1692.65 1238.03 1692.95 cv
1247.37 1693.34 1258.08 1692.37 1258.08 1692.37 cv
1258.08 1692.37 1277.35 1699.61 1283.5 1702.63 cv
1297.19 1709.34 1313.5 1717.68 1317.85 1724.27 cv
1319.25 1726.39 1319.11 1733.54 1313.97 1734.9 cv
1294.13 1740.15 1224.4 1739.07 1211.59 1733.83 cv
1196.8 1727.78 1215.35 1689.56 1215.35 1689.56 cv
cp
.027451 .203922 .352941 rgb
f
1101.55 1653.82 mo
1101.55 1653.82 1096.07 1685.7 1093.16 1690.87 cv
1090.24 1696.03 1114.44 1724.42 1127.64 1719.81 cv
1135.09 1717.21 1136.35 1693.82 1136.35 1693.82 cv
1130.96 1687.19 li
1138.41 1659.3 li
1101.55 1653.82 li
cp
.968627 .643137 .568627 rgb
f
1092.8 1689.56 mo
1092.8 1689.56 1108.25 1692.65 1115.49 1692.95 cv
1124.83 1693.34 1135.54 1692.37 1135.54 1692.37 cv
1135.54 1692.37 1154.8 1699.61 1160.95 1702.63 cv
1174.65 1709.34 1190.96 1717.68 1195.31 1724.27 cv
1196.71 1726.39 1196.73 1734.5 1191.42 1734.9 cv
1169.34 1736.56 1100.5 1736.83 1087.68 1731.59 cv
1072.9 1725.54 1092.8 1689.56 1092.8 1689.56 cv
cp
.027451 .203922 .352941 rgb
f
1311.03 1159.81 mo
1335.14 1222.25 li
1335.14 1222.25 1350.87 1371.25 1341.71 1460.45 cv
1337.88 1497.75 1262.83 1683.45 1262.83 1683.45 cv
1262.83 1683.45 1252.47 1686.56 1239.19 1684.7 cv
1233.55 1683.9 1216.7 1680.96 1216.7 1680.96 cv
1268.93 1455.09 li
1248.63 1364.66 li
1219.9 1185.91 li
1311.03 1159.81 li
cp
.07451 .215686 .356863 rgb
f
1194.77 1163.07 mo
1174.08 1232.59 li
1165.17 1454.95 li
1089.9 1667.9 li
1089.9 1667.9 1112.3 1680.34 1146.51 1679.1 cv
1229.86 1476.52 li
1302.24 1220.39 li
1299.37 1165.22 li
1194.77 1163.07 li
cp
.207843 .32549 .537255 rgb
f
1202.23 908.156 mo
1202.23 908.156 1171.16 912.477 1162.98 918.483 cv
1153.77 925.248 1125.24 956.802 1125.24 956.802 cv
1125.24 956.802 1184.61 1126.87 1182.32 1157.13 cv
1180.02 1187.39 1173.51 1232.21 1173.51 1232.21 cv
1173.51 1232.21 1288.8 1239.49 1332.47 1222.25 cv
1332.47 1222.25 1318.68 1153.69 1318.68 1135.68 cv
1318.68 1117.68 1298.41 940.202 1292.9 930.777 cv
1287.39 921.353 1257.82 907.359 1251.93 907.024 cv
1229.91 905.77 1202.23 908.156 1202.23 908.156 cv
cp
1 1 1 rgb
f
1364.47 1365.59 mo
1365.21 1361.98 1334.87 1191.9 1334.37 1185.82 cv
1329.43 1125.37 1312.7 940.134 1291.45 914.604 cv
1288.89 912.229 1282.57 910.248 1275.62 909.396 cv
1263.97 907.969 1251.9 906.984 1251.9 906.984 cv
1251.9 906.984 1266.27 918.726 1269.81 923.731 cv
1285.64 946.133 1292.11 972.118 1295.6 999.816 cv
1305.74 1080.14 1314.96 1373.04 1318.56 1374.34 cv
1322.58 1375.79 1362.83 1373.62 1364.47 1365.59 cv
cp
.27451 .431373 .713726 rgb
f
1214.81 752.364 mo
1214.81 752.364 1193.71 738.098 1184.79 763.087 cv
1184.86 762.89 1177.34 762.962 1176.32 763.306 cv
1171.99 764.773 1167.79 769.294 1163.92 771.771 cv
1150.14 780.592 1143.79 797.733 1143.04 813.471 cv
1142.13 832.574 1150.02 846.543 1162.58 860.337 cv
1166.29 864.402 1170.24 868.371 1175.09 870.968 cv
1180.94 874.102 1185.56 871.614 1191.06 872.945 cv
1195.68 874.064 1197.31 878.951 1202.77 877.189 cv
1210.42 874.719 1218.45 865.139 1227.93 866.557 cv
1237.41 867.973 1259.28 859.447 1259.34 859.425 cv
1287.45 848.465 1268.47 794.073 1263.08 774.768 cv
1258.02 756.617 1232.2 745.798 1214.81 752.364 cv
cp
1 1 1 rgb
f
1240.21 875.956 mo
1247.51 895.873 li
1251.44 907.006 li
1251.44 907.006 1251.71 926.931 1247.07 932.094 cv
1239.07 940.98 1206.18 908.05 1206.18 908.05 cv
1195.77 845.395 li
1240.21 875.956 li
cp
.968627 .643137 .568627 rgb
f
1199.15 865.7 mo
1211.65 885.093 1233.2 893.953 1247.58 896.062 cv
1240.21 875.956 li
1195.77 845.395 li
1199.15 865.7 li
cp
.956863 .454902 .345098 rgb
f
1204.31 781.037 mo
1221.05 770.795 1243.03 778.569 1249.92 796.64 cv
1252.92 804.495 1256.26 814.465 1258.93 825.585 cv
1265.35 852.33 1257.22 881.533 1245.03 884.225 cv
1232.83 886.918 1195.3 876.978 1185.66 839.126 cv
1179.71 815.758 1186.73 791.783 1204.31 781.037 cv
cp
.968627 .643137 .568627 rgb
f
1195.31 840.157 mo
1196.61 846.081 1193.75 851.75 1188.91 852.819 cv
1184.06 853.889 1179.07 849.955 1177.77 844.031 cv
1176.46 838.107 1179.32 832.438 1184.17 831.369 cv
1189.01 830.299 1194 834.234 1195.31 840.157 cv
cp
f
1205.92 907.865 mo
1205.92 907.865 1154.97 913.093 1141.95 921.654 cv
1133.67 927.097 1140.15 987.756 1140.15 987.756 cv
1140.15 987.756 1151.87 1079.39 1150.24 1125.69 cv
1150.08 1130.17 1149.86 1134.57 1149.58 1138.88 cv
1145.03 1208.55 1107.79 1375.37 1111.04 1378.31 cv
1132.01 1390.02 1246.46 1389.55 1247.78 1380.28 cv
1258.98 1301.9 1205.92 907.865 1205.92 907.865 cv
cp
.27451 .431373 .713726 rgb
f
1150.34 1121.94 mo
1150.32 1123.22 1150.29 1124.47 1150.24 1125.69 cv
1150.09 1130.09 1149.87 1134.42 1149.59 1138.66 cv
1219.29 1106.19 li
1150.34 1121.94 li
cp
.207843 .32549 .537255 rgb
f
1294.4 1054.91 mo
1292.03 1056.01 1288.13 1057.91 1285.53 1059.66 cv
1282.73 1061.54 1279.56 1062.4 1276.97 1063.63 cv
1271.82 1066.08 1268.1 1067.93 1268.12 1067.67 cv
1268.15 1067.33 1266.8 1067.12 1269.36 1065.35 cv
1272.45 1063.22 1279.97 1060.1 1284.27 1056.63 cv
1286.71 1054.67 1292.05 1050.86 1292.05 1050.86 cv
1292.05 1050.86 1299.08 1043.64 1298.8 1043.1 cv
1297.29 1040.2 1291.12 1043.83 1288.15 1046.92 cv
1285.26 1047.96 1279.76 1052.12 1279.76 1052.12 cv
1279.76 1052.12 1266.77 1058.13 1265.94 1056.35 cv
1265.58 1055.59 1273.12 1050.98 1279.83 1045.33 cv
1286.06 1040.09 1291.51 1033.81 1290.68 1032.47 cv
1289.27 1030.19 1281.75 1035.3 1281.75 1035.3 cv
1281.75 1035.3 1276.66 1039.15 1274.88 1040.31 cv
1272.79 1041.66 1266.22 1045.25 1266.22 1045.25 cv
1266.22 1045.25 1242.81 1056.71 1242.17 1054.96 cv
1241.52 1053.21 1241.71 1048 1242.92 1046.8 cv
1244.13 1045.6 1247.27 1044.25 1248.71 1043.32 cv
1250.59 1042.12 1253.49 1039.08 1252.15 1037.53 cv
1250.81 1035.98 1239.77 1040.1 1239.77 1040.1 cv
1239.77 1040.1 1233.23 1043.11 1230.3 1047.11 cv
1220.14 1060.99 1222.84 1062.06 1221.49 1063.8 cv
1219.89 1065.87 1187.03 1077.86 1187.03 1077.86 cv
1187.03 1077.86 1088.37 1102.34 1083.09 1104.1 cv
1096.21 1143.9 li
1102.28 1143.05 1212.7 1098.82 1223.9 1093.57 cv
1223.9 1093.57 1239.47 1092.12 1249.22 1090.9 cv
1258.97 1089.67 1267.79 1084.23 1270.5 1083.47 cv
1270.9 1083.36 1279.76 1080.31 1289.75 1073.72 cv
1298.36 1068.03 1287.67 1069.6 1287.67 1069.6 cv
1287.67 1069.6 1269.88 1077.36 1269.54 1075.89 cv
1269.28 1074.75 1279.23 1071.08 1288.82 1064.88 cv
1291.28 1063.29 1293.71 1061.71 1295.93 1060.24 cv
1301.75 1056.38 1301.12 1051.82 1294.4 1054.91 cv
cp
.972549 .643137 .572549 rgb
f
1146.3 919.58 mo
1146.3 919.58 1129.71 921.861 1115.41 942.389 cv
1101.1 962.916 1069.55 1051.43 1059.7 1085.3 cv
1049.74 1119.52 1054.79 1138.52 1077.19 1144.12 cv
1099.58 1149.71 1219.29 1106.19 1219.29 1106.19 cv
1208.09 1065.14 li
1208.09 1065.14 1128.79 1082.68 1125.98 1081.31 cv
1150.86 1038.39 li
1150.86 1038.39 1170.35 968.929 1146.3 919.58 cv
cp
.27451 .431373 .713726 rgb
f
1232.97 851.254 mo
1232.97 851.254 1216.9 856.501 1215.58 862.404 cv
1214.27 868.308 1216.24 876.834 1224.11 883.393 cv
1231.98 889.953 1248.82 885.908 1253.41 882.3 cv
1258 878.692 1261.5 863.388 1256.91 854.861 cv
1252.31 846.334 1232.97 851.254 1232.97 851.254 cv
cp
1 1 1 rgb
f
1227.72 863.606 mo
1227.72 863.606 1227.81 870.184 1230.01 871.368 cv
1232.15 872.516 1234.84 873.482 1237.34 873.719 cv
1241.38 874.101 1245.03 872.375 1247.16 869.26 cv
1247.37 868.954 1247.56 868.635 1247.72 868.308 cv
1249.36 865.028 1249.69 859.234 1249.69 859.234 cv
1249.69 859.234 1242.91 857.594 1238.98 858.25 cv
1235.04 858.906 1227.72 863.606 1227.72 863.606 cv
cp
.968627 .643137 .568627 rgb
f
2606.77 434.273 mo
2635.78 453.564 2626.54 498.888 2592.19 505.532 cv
2586.02 506.725 2580.54 510.233 2576.65 515.17 cv
2563.28 532.162 li
2559.6 536.844 2552.93 537.91 2547.97 534.61 cv
2536.98 527.302 li
2532.02 524.003 2530.43 517.445 2533.32 512.236 cv
2543.88 493.229 2549.14 486.985 2546.7 475.28 cv
2539.54 441.041 2577.76 414.978 2606.77 434.273 cv
cp
.968627 .8 .498039 rgb
f
2573.49 449.445 mo
2571.36 449.071 2569.4 451.38 2569.23 453.561 cv
2568.99 456.672 2571.15 459.844 2573.06 462.461 cv
2574.77 459.257 2576.44 456.55 2576.47 453.864 cv
2576.5 451.979 2573.72 449.485 2573.49 449.445 cv
cp
2597.78 472.057 mo
2594.97 473.001 2592.81 475.137 2590.84 477.708 cv
2594.66 479.647 2597.67 480.097 2600.04 479.097 cv
2604.02 477.419 2604.11 469.925 2597.78 472.057 cv
cp
2564.26 515.469 mo
2573.34 500.448 2583.91 484.26 2588.06 478.336 cv
2582.43 475.132 2577.43 470.898 2573.34 465.895 cv
2566.42 478.708 2559.12 491.456 2551.57 503.859 cv
2549.97 502.884 li
2557.64 490.278 2565.06 477.313 2572.07 464.287 cv
2569.69 461.136 2567.06 457.295 2567.36 453.416 cv
2567.51 451.598 2568.49 449.771 2569.94 448.648 cv
2573.79 445.657 2578.41 449.06 2578.35 453.887 cv
2578.31 457.083 2576.47 460.059 2574.3 464.103 cv
2578.38 469.247 2583.44 473.58 2589.16 476.809 cv
2591.37 473.88 2593.83 471.408 2597.18 470.28 cv
2608.94 466.321 2607.23 488.332 2589.71 479.239 cv
2586.45 483.867 2575.53 500.438 2565.86 516.439 cv
2564.26 515.469 li
cp
.980392 .878431 .698039 rgb
f
2577 514.761 mo
2576.89 514.9 2576.76 515.028 2576.65 515.17 cv
2563.28 532.162 li
2559.6 536.844 2552.93 537.91 2547.97 534.61 cv
2536.98 527.302 li
2532.02 524.003 2530.43 517.445 2533.32 512.236 cv
2538.02 503.781 2541.66 497.854 2544.05 492.845 cv
2577 514.761 li
cp
.588235 .85098 .788235 rgb
f
2636.44 430.467 mo
2653.53 417.589 li
2655.18 416.343 2655.51 413.993 2654.27 412.339 cv
2653.02 410.686 2650.67 410.355 2649.01 411.601 cv
2631.93 424.478 li
2630.28 425.725 2629.95 428.076 2631.19 429.729 cv
2632.45 431.392 2634.8 431.707 2636.44 430.467 cv
cp
.980392 .878431 .698039 rgb
f
2638.26 481.077 mo
2659.49 488.504 li
2661.44 489.188 2663.58 488.158 2664.27 486.204 cv
2664.95 484.25 2663.92 482.11 2661.97 481.427 cv
2640.74 474 li
2638.78 473.315 2636.64 474.346 2635.96 476.3 cv
2635.28 478.253 2636.31 480.391 2638.26 481.077 cv
cp
f
2630.27 552.829 mo
2632.2 552.085 2633.16 549.916 2632.42 547.983 cv
2629.64 540.757 2626.15 533.762 2622.05 527.194 cv
2620.95 525.438 2618.64 524.902 2616.88 525.999 cv
2615.12 527.095 2614.59 529.408 2615.68 531.165 cv
2619.53 537.33 2622.81 543.895 2625.42 550.677 cv
2626.16 552.6 2628.32 553.577 2630.27 552.829 cv
cp
f
2586.4 406.778 mo
2588.44 407.114 2590.37 405.729 2590.7 403.686 cv
2592.3 393.983 2594.91 384.415 2598.46 375.249 cv
2599.21 373.318 2598.26 371.144 2596.32 370.397 cv
2594.39 369.648 2592.22 370.606 2591.47 372.537 cv
2587.73 382.186 2584.98 392.258 2583.31 402.472 cv
2582.97 404.526 2584.37 406.448 2586.4 406.778 cv
cp
f
2553.52 423.544 mo
2554.88 421.983 2554.72 419.615 2553.16 418.255 cv
2534.81 402.277 li
2533.25 400.917 2530.88 401.081 2529.52 402.642 cv
2528.16 404.204 2528.32 406.572 2529.89 407.932 cv
2548.23 423.91 li
2549.79 425.266 2552.16 425.11 2553.52 423.544 cv
cp
f
2493.15 464.309 mo
2493.46 464.447 2493.79 464.546 2494.14 464.599 cv
2502.43 465.85 2510.88 466.209 2519.25 465.667 cv
2521.31 465.534 2522.88 463.75 2522.74 461.684 cv
2522.61 459.618 2520.83 458.051 2518.76 458.185 cv
2510.93 458.692 2503.02 458.355 2495.26 457.185 cv
2493.21 456.875 2491.3 458.285 2490.99 460.333 cv
2490.73 462.031 2491.66 463.636 2493.15 464.309 cv
cp
f
804.129 653.354 mo
803.883 653.582 803.617 653.795 803.329 653.989 cv
800.274 656.06 796.119 655.263 794.048 652.208 cv
791.724 648.782 789.081 645.463 786.191 642.347 cv
767.11 621.766 740.601 614.01 728.305 625.412 cv
710.087 642.301 676.363 634.549 651.528 607.762 cv
645.521 601.283 655.314 592.187 661.329 598.675 cv
680.411 619.256 706.92 627.011 719.217 615.61 cv
737.434 598.721 771.157 606.473 795.992 633.259 cv
799.34 636.871 802.409 640.722 805.11 644.708 cv
806.987 647.475 806.508 651.148 804.129 653.354 cv
cp
.27451 .431373 .713726 rgb
f
741.947 703.614 mo
711.112 679.254 696.794 636.4 719.217 615.61 cv
731.514 604.209 725.782 577.191 706.7 556.61 cv
700.693 550.13 710.486 541.035 716.501 547.522 cv
741.336 574.309 746.521 608.522 728.305 625.412 cv
716.007 636.813 721.739 663.832 740.82 684.412 cv
743.761 687.584 746.927 690.516 750.231 693.124 cv
757.176 698.612 748.877 709.087 741.947 703.614 cv
cp
.52549 .694118 .94902 rgb
f
702.071 618.275 mo
721.204 600.537 li
721.34 598.656 721.297 596.668 721.062 594.592 cv
699.042 615.008 li
698.14 615.845 698.086 617.253 698.923 618.156 cv
699.76 619.059 701.168 619.112 702.071 618.275 cv
cp
f
685.769 612.377 mo
717.964 582.528 li
717.407 581.087 716.789 579.637 716.098 578.183 cv
682.74 609.11 li
681.838 609.947 681.784 611.355 682.621 612.259 cv
683.458 613.162 684.867 613.214 685.769 612.377 cv
cp
f
762.796 637.917 mo
732.86 665.672 li
733.567 666.997 734.327 668.318 735.14 669.633 cv
765.826 641.183 li
766.728 640.347 766.782 638.938 765.945 638.035 cv
765.108 637.132 763.699 637.08 762.796 637.917 cv
cp
f
672.164 603.983 mo
710.479 568.459 li
709.643 567.238 708.762 566.028 707.836 564.833 cv
669.135 600.715 li
668.233 601.552 668.179 602.96 669.016 603.864 cv
669.854 604.767 671.262 604.819 672.164 603.983 cv
cp
f
777.402 655.512 mo
746.69 683.986 li
747.759 685.038 748.844 686.052 749.958 687.031 cv
780.431 658.779 li
781.333 657.942 781.387 656.534 780.549 655.631 cv
779.712 654.728 778.304 654.675 777.402 655.512 cv
cp
f
744.108 624.107 mo
726.312 640.607 li
726.183 642.482 726.234 644.463 726.474 646.531 cv
747.137 627.374 li
748.039 626.538 748.093 625.129 747.256 624.226 cv
746.419 623.323 745.01 623.271 744.108 624.107 cv
cp
f
2648.82 553.882 mo
2663.01 558.235 li
2672.53 536.187 li
2694.06 539.994 li
2703.88 524.659 li
2711.65 529.633 li
2698.5 550.142 li
2678.11 546.535 li
2668.2 569.471 li
2646.85 562.921 li
2648.82 553.882 li
cp
.313726 .74902 .647059 rgb
f
1756.28 393.892 mo
1770.47 398.245 li
1779.99 376.197 li
1801.52 380.003 li
1811.34 364.669 li
1819.1 369.643 li
1805.96 390.152 li
1785.56 386.544 li
1775.66 409.481 li
1754.31 402.931 li
1756.28 393.892 li
cp
f
1284.26 394.206 mo
1313.34 398.209 li
1314.95 363.394 li
1305.55 362.959 li
1304.42 387.48 li
1285.55 384.882 li
1284.26 394.206 li
cp
.968627 .8 .498039 rgb
f
2250.89 329.741 mo
2240.34 327.306 li
2249.62 287.132 li
2260.17 289.568 li
2250.89 329.741 li
cp
.27451 .431373 .713726 rgb
f
2225.81 339.999 mo
2223.11 335.312 li
2247.81 321.055 li
2263.15 342.389 li
2258.76 345.549 li
2246.28 328.189 li
2225.81 339.999 li
cp
f
2231.34 327.342 mo
2231.34 327.342 2224.09 358.728 2222.29 366.512 cv
2220.49 374.295 2213.21 382.927 2203.21 382.732 cv
2193.2 382.537 2172.56 382.794 2166.49 381.392 cv
2158.45 379.536 2148.33 376.405 2165.74 346.836 cv
2183.15 317.269 2196.17 297.532 2208.71 289.055 cv
2221.25 280.578 2230.36 278.968 2234.57 284.714 cv
2242.52 295.542 2231.34 327.342 2231.34 327.342 cv
cp
.956863 .54902 .498039 rgb
f
2256.46 333.144 mo
2256.46 333.144 2249.21 364.53 2247.41 372.313 cv
2245.61 380.097 2248.37 391.049 2257.45 395.262 cv
2266.53 399.475 2284.96 408.758 2291.04 410.161 cv
2299.07 412.017 2309.54 413.642 2306.86 379.434 cv
2304.18 345.226 2301.14 321.777 2293.59 308.66 cv
2286.04 295.544 2278.56 290.102 2272.25 293.417 cv
2260.36 299.662 2256.46 333.144 2256.46 333.144 cv
cp
f
2269.62 1126.41 mo
2269.62 1126.41 2270.17 1130.78 2275.09 1142.26 cv
2280.01 1153.74 2282.63 1132.86 2282.63 1132.86 cv
2269.62 1126.41 li
cp
.972549 .643137 .572549 rgb
f
3007.81 915.358 mo
3014.62 882.119 2998.96 849.166 2969.04 836.794 cv
2969.24 817.879 2963.12 793.919 2950.23 780.969 cv
2924.79 755.424 2876.26 746.472 2857.56 779.038 cv
2832.85 793.039 2813.42 823.359 2820.79 850.982 cv
2796.84 875.823 2805.94 920.769 2840.85 941.995 cv
2840.29 969.866 2855 997.567 2879.33 1009.48 cv
2885.17 1012.34 2894.31 1016.32 2895.47 1017.56 cv
2893.94 1016.12 2913.49 1070.63 2974.2 1045.68 cv
3036.15 1020.22 3048.19 948.559 3007.81 915.358 cv
cp
.207843 .32549 .537255 rgb
f
2716.1 1235.89 mo
2716.1 1235.89 2720.13 1231.56 2721.36 1230.02 cv
2722.8 1228.21 2726.69 1222.48 2726.69 1222.48 cv
2726.69 1222.48 2739.29 1201.89 2737.67 1201.11 cv
2736.05 1200.32 2731.89 1202.69 2730.66 1203.69 cv
2729.43 1204.69 2727.89 1205.76 2726.66 1206.76 cv
2725.43 1207.77 2723.66 1207.7 2722.29 1206.3 cv
2720.91 1204.89 2724.94 1199.84 2726.68 1198.37 cv
2732.11 1193.77 2749.13 1184.34 2750.89 1183.27 cv
2752.97 1182 2768.15 1142.38 2774.45 1129.2 cv
2774.44 1129.2 2774.44 1129.2 2774.44 1129.2 cv
2784.1 1107.33 2792.91 1084.39 2793.92 1082.07 cv
2806.08 980.85 li
2845.57 970.576 li
2845.57 970.576 2833.68 1083.08 2832.43 1088.65 cv
2831.83 1091.29 2805.47 1140.29 2805.44 1140.28 cv
2790.92 1163.61 2778.06 1184.14 2775.7 1188.15 cv
2775.7 1188.15 2771.92 1201.99 2770.05 1210.93 cv
2768.17 1219.88 2762.79 1227.4 2761.87 1229.83 cv
2761.73 1230.19 2759.03 1238.75 2752.03 1247.35 cv
2746 1254.77 2748.28 1244.98 2748.28 1244.98 cv
2748.28 1244.98 2756.95 1229.24 2755.57 1228.77 cv
2754.51 1228.41 2750.29 1237.28 2743.71 1245.56 cv
2742.01 1247.69 2740.33 1249.78 2738.77 1251.69 cv
2734.69 1256.71 2730.39 1255.64 2733.82 1249.71 cv
2735.04 1247.62 2737.13 1244.19 2738.98 1241.95 cv
2740.98 1239.54 2742.02 1236.69 2743.38 1234.4 cv
2746.08 1229.87 2748.11 1226.6 2747.86 1226.59 cv
2747.54 1226.58 2747.43 1225.3 2745.56 1227.5 cv
2743.32 1230.15 2739.81 1236.83 2736.2 1240.47 cv
2734.15 1242.53 2730.14 1247.1 2730.14 1247.1 cv
2730.14 1247.1 2722.81 1253.81 2722.33 1253.49 cv
2719.68 1251.79 2723.53 1245.5 2726.68 1243.06 cv
2727.88 1240.48 2732.24 1235.79 2732.24 1235.79 cv
2732.24 1235.79 2738.89 1224.34 2737.26 1223.37 cv
2735.92 1222.58 2714.62 1246.94 2712.09 1245.05 cv
2710.03 1243.5 2716.1 1235.89 2716.1 1235.89 cv
cp
.968627 .643137 .568627 rgb
f
2755.62 1200.07 mo
2755.62 1200.07 2744.02 1206.63 2737.85 1201.24 cv
2737.85 1201.24 2740.15 1205.61 2745.25 1205.67 cv
2750.35 1205.73 2755.62 1200.07 2755.62 1200.07 cv
cp
.956863 .454902 .345098 rgb
f
2882.71 1249.99 mo
2859.71 1458.03 li
2859.71 1458.03 2870.95 1502.02 2869.59 1514.52 cv
2868.24 1527.02 2844.59 1690.97 2844.59 1690.97 cv
2845.66 1699.98 li
2846.23 1726.66 li
2757.83 1727.33 li
2757.83 1727.33 2776.46 1718.88 2802.52 1702.19 cv
2804.45 1700.96 2808.89 1697.02 2809.97 1689.18 cv
2816.93 1638.64 2803.16 1470.08 2803.16 1470.08 cv
2792.32 1250.66 li
2882.71 1249.99 li
cp
.968627 .643137 .568627 rgb
f
2952.38 1288.3 mo
2957.34 1289.56 2964.97 1468.11 2969.07 1476.02 cv
2995.1 1526.19 3001.29 1678.72 3001.29 1678.72 cv
3012.02 1700.08 li
3009.56 1720.66 li
3009.56 1720.66 2990.14 1731.93 2976.51 1724.33 cv
2978.61 1703.72 li
2980.22 1676.19 li
2914.56 1486.16 li
2878.62 1292.33 li
2952.38 1288.3 li
cp
f
2784.12 1385.07 mo
2781 1261.87 li
2780.46 1227.06 2791.92 1193.66 2806 1161.95 cv
2835.8 1111.22 li
2845.4 1114.31 2850.69 1085.57 2860.78 1086.72 cv
2868.38 1087.58 2873.59 1089.36 2880.66 1089.78 cv
2893.97 1090.58 2902.06 1116.9 2916.31 1115.25 cv
2916.38 1116.09 2919.14 1122.8 2919.35 1123.39 cv
2926.17 1142.01 2949.68 1158.54 2958.97 1213.82 cv
2969.52 1276.57 2969.47 1384.42 2968.15 1391.79 cv
2867.31 1396.28 2843.27 1399.85 2784.12 1385.07 cv
cp
.0941176 .27451 .333333 rgb
f
2968.33 1399.71 mo
2968.32 1399.74 2968.31 1399.74 2968.3 1399.71 cv
2968.33 1399.71 li
cp
.956863 .454902 .345098 rgb
f
2846.65 1733.51 mo
2755.4 1733.51 li
2752.02 1733.2 2751.2 1730.41 2752.37 1728.69 cv
2754.78 1725.15 2765.43 1722.55 2777.39 1716.91 cv
2798.38 1719.15 2842.34 1704.89 2845.66 1699.96 cv
2847.57 1709.83 2848.53 1733.09 2846.65 1733.51 cv
cp
f
3011.97 1700.02 mo
3011.97 1700.02 3003.86 1723.32 2995.1 1722.65 cv
2986.34 1721.98 2978.67 1703.61 2978.67 1703.61 cv
2978.67 1703.61 2975.38 1719.06 2976.92 1727.58 cv
2978.45 1736.09 2990.94 1744.82 2999.48 1741.02 cv
3008.03 1737.21 3019.64 1717.5 3011.97 1700.02 cv
cp
f
2842.33 1031.5 mo
2842.33 1031.5 2829.62 1029.91 2817.44 1025.62 cv
2810.13 1023.04 2797.97 1017.4 2797.97 1017.4 cv
2797.97 1017.4 2804.8 959.357 2822 924.212 cv
2828.59 910.745 2836.08 903.339 2845.01 901.051 cv
2845.71 900.872 2842.33 1031.5 2842.33 1031.5 cv
cp
.235294 .560784 .486275 rgb
f
2820.24 965.826 mo
2822.82 956.411 2828.58 944.03 2831.86 935.492 cv
2837.44 920.996 2839.09 907.454 2844.01 901.65 cv
2846.67 898.528 2880.71 898.993 2884.89 898.58 cv
2886.62 898.398 2893.43 898.838 2900.02 899.242 cv
2900.01 899.225 li
2903.87 899.664 2942.24 902.691 2947.81 905.106 cv
2975.44 932.195 2988.81 968.668 3009.59 1008.52 cv
3009.59 1008.52 2994.02 1017.47 2981.61 1023.11 cv
2976.23 1025.56 2965.89 1029.49 2965.89 1029.49 cv
2965.89 1029.49 2952.8 1006.63 2945.39 996.65 cv
2941.94 989.144 li
2941.68 988.943 2940.44 987.611 2940.08 988.473 cv
2939.52 989.814 2916.2 1115.3 2916.2 1115.3 cv
2916.2 1115.3 2851.14 1121.36 2834.49 1113.37 cv
2834.49 1113.37 2831.42 1029.44 2825.29 1004.8 cv
2823.03 995.747 2816.09 980.993 2820.24 965.826 cv
cp
.313726 .74902 .647059 rgb
f
2904.69 860.655 mo
2904.69 860.655 2899.37 889.933 2900.43 901.482 cv
2901.5 913.031 2896.38 950.251 2873.42 950.374 cv
2850.46 950.497 2866.06 911.729 2868.23 900.412 cv
2870.39 889.095 2873.9 845.385 2873.9 845.385 cv
2904.69 860.655 li
cp
.968627 .643137 .568627 rgb
f
2872.48 861.959 mo
2872.84 852.375 2874.56 844.756 2874.56 844.756 cv
2904.69 860.655 li
2904.69 860.655 2903.6 866.642 2902.51 874.269 cv
2889.03 877.153 2878.32 870.84 2872.48 861.959 cv
cp
.956863 .454902 .345098 rgb
f
2905.34 775.603 mo
2905.34 775.603 2918.28 780.218 2925.32 794.309 cv
2932.36 808.399 2934.68 847.844 2906.3 862.997 cv
2877.92 878.149 2859.2 850.203 2860.97 825.16 cv
2862.73 800.118 2870.59 767.308 2905.34 775.603 cv
cp
.968627 .643137 .568627 rgb
f
2852.53 818.184 mo
2851.78 824.675 2854.08 830.213 2857.65 830.553 cv
2861.23 830.893 2864.73 825.906 2865.48 819.414 cv
2866.22 812.922 2863.93 807.384 2860.36 807.044 cv
2856.78 806.705 2853.28 811.692 2852.53 818.184 cv
cp
f
2922.82 829.111 mo
2920.32 835.396 2921.56 841.993 2925.59 843.846 cv
2929.62 845.7 2934.9 842.108 2937.4 835.823 cv
2939.89 829.539 2938.65 822.942 2934.62 821.088 cv
2930.6 819.235 2925.31 822.827 2922.82 829.111 cv
cp
f
2911.26 994.129 mo
2912.56 995.989 li
2911.99 1001.69 2915.06 1006.06 2920.6 1007.47 cv
2991.17 1108.31 li
2906.31 1167.7 li
2901.48 1171.08 2894.81 1169.9 2891.43 1165.07 cv
2823.33 1067.76 li
2820.19 1063.28 2821.28 1057.1 2825.77 1053.96 cv
2911.26 994.129 li
cp
.956863 .454902 .345098 rgb
f
2920.6 1007.47 mo
2920.6 1007.47 li
2839.45 1064.27 li
2834.73 1067.57 2829.11 1067.67 2826.89 1064.5 cv
2825.78 1062.91 2825.73 1060.81 2826.55 1058.69 cv
2827.37 1056.57 2829.05 1054.43 2831.41 1052.78 cv
2912.56 995.982 li
2912.56 995.989 li
2912.07 1001.63 2915.14 1006 2920.6 1007.47 cv
cp
.980392 .878431 .698039 rgb
f
3003.73 1011.82 mo
2998.05 1014.91 2989.24 1019.63 2981.61 1023.11 cv
2978.01 1024.74 2972.2 1027.04 2968.76 1028.38 cv
2977.09 1044.11 2984.98 1060.31 2983.95 1063.66 cv
2983.06 1066.6 2908.58 1122.19 2908.58 1122.19 cv
2893.7 1120.2 li
2893.7 1120.2 2867.46 1123.25 2866.86 1126.32 cv
2866.23 1129.36 2877.92 1128.56 2879.48 1129.03 cv
2880.34 1129.28 2882.08 1129.88 2883.55 1130.83 cv
2881.19 1131.94 2878.06 1133.4 2875.09 1134.53 cv
2883.83 1139.65 2889.95 1147.22 2893.08 1156.12 cv
2900.4 1154.33 2910.49 1150.23 2923.25 1140.94 cv
2940.6 1132.28 3027.81 1082.52 3029.09 1073.05 cv
3029.86 1067.46 3016.58 1038.26 3003.73 1011.82 cv
cp
.972549 .643137 .572549 rgb
f
2865.68 1128.29 mo
2865.68 1128.29 2862.34 1134.6 2863.44 1139.41 cv
2864.53 1144.22 2865.73 1145.54 2866.94 1149.91 cv
2868.14 1154.28 2868.25 1155.27 2872.62 1159.09 cv
2876.99 1162.92 2897.98 1154.72 2897.98 1154.72 cv
2883.55 1130.83 li
2875.24 1133.95 li
2875.24 1133.95 2870 1133.4 2868.57 1131.87 cv
2867.15 1130.34 2865.68 1128.29 2865.68 1128.29 cv
cp
f
2473.72 970.193 mo
2420.52 975.821 li
2403.76 1062.24 li
2400.91 1066.88 2298.48 1138.98 2298.48 1138.98 cv
2298.48 1138.98 2301.75 1154.45 2309.96 1159.31 cv
2322.9 1143.44 2448.16 1093.17 2450.21 1087.74 cv
2452.34 1082.1 2473.72 970.193 2473.72 970.193 cv
cp
f
2421.68 1246.66 mo
2262.53 1108.88 li
2357 996.047 li
2502.3 1145.77 li
2421.68 1246.66 li
cp
.980392 .878431 .698039 rgb
f
2436.99 1247.39 mo
2270.71 1108.16 li
2365.19 995.322 li
2531.47 1134.55 li
2436.99 1247.39 li
cp
f
2417.34 1250.5 mo
2251.06 1111.27 li
2345.53 998.437 li
2511.82 1137.66 li
2417.34 1250.5 li
cp
.27451 .431373 .713726 rgb
f
2682.53 1651.75 mo
2682.53 1651.75 2693.79 1662.88 2694.04 1666.97 cv
2694.3 1671.06 2695.04 1714.83 2690.44 1718.92 cv
2685.85 1723 2672.35 1725.9 2676.69 1730.5 cv
2679.97 1733.97 2705.2 1733.23 2721.93 1732.29 cv
2726.81 1732.02 2732.93 1692.54 2734.86 1686.74 cv
2737.67 1678.31 2747.79 1659.97 2745.23 1654.09 cv
2743.99 1651.23 2734.75 1644.71 2726.37 1639.22 cv
2717.55 1633.44 2709.11 1620.59 2709.11 1620.59 cv
2682.53 1651.75 li
cp
.968627 .643137 .568627 rgb
f
2531.94 1679.1 mo
2531.94 1679.1 2540.67 1704.08 2541.89 1707.61 cv
2541.98 1707.87 2545.73 1723.88 2545.73 1728.03 cv
2545.73 1743.64 2476.28 1714.79 2491.85 1707.87 cv
2493.26 1707.24 2497.67 1702.24 2498.14 1696.93 cv
2498.85 1688.75 2492.29 1678.48 2492.29 1678.48 cv
2531.94 1679.1 li
cp
f
2436.11 1131.44 mo
2410.97 1196.55 li
2410.97 1196.55 2394.57 1351.93 2404.12 1444.95 cv
2408.11 1483.85 2494.59 1692.09 2494.59 1692.09 cv
2537.54 1685.95 li
2480.01 1439.35 li
2501.18 1345.05 li
2531.14 1158.65 li
2436.11 1131.44 li
cp
.0941176 .27451 .333333 rgb
f
2554.54 1134.83 mo
2576.11 1207.33 li
2608.92 1426.15 li
2719.86 1630.85 li
2719.86 1630.85 2703.18 1656.46 2685.26 1660.49 cv
2527.8 1453.6 li
2442.47 1194.61 li
2445.46 1137.07 li
2554.54 1134.83 li
cp
.207843 .32549 .537255 rgb
f
2412.1 1006.57 mo
2473.32 1012.91 li
2473.32 1012.91 2476.13 962.035 2476.13 937.769 cv
2476.13 908.328 2470.75 871.493 2467.32 872.564 cv
2457.79 875.537 2447.04 879.023 2439.15 890.016 cv
2411.84 928.054 2412.1 1006.57 2412.1 1006.57 cv
cp
.717647 .341176 .258824 rgb
f
2638.49 1250.91 mo
2647.83 1235.6 2649.93 1237.77 2651.07 1235.78 cv
2652.43 1233.42 2650.93 1196.97 2650.93 1196.97 cv
2650.93 1196.97 2647.18 1089.51 2646.78 1083.71 cv
2598.95 984.503 li
2640.3 945.558 li
2640.3 945.558 2689.52 1054.94 2691.12 1061.14 cv
2692.72 1067.33 2681.33 1213.38 2680.73 1226.26 cv
2680.73 1226.26 2685.53 1241.85 2688.22 1251.74 cv
2690.92 1261.63 2689.19 1272.29 2689.53 1275.2 cv
2689.58 1275.63 2690.17 1285.39 2687.78 1297.64 cv
2685.72 1308.2 2682.99 1297.27 2682.99 1297.27 cv
2682.99 1297.27 2683.39 1277.03 2681.84 1277.29 cv
2680.64 1277.49 2681.05 1288.55 2678.89 1300.26 cv
2678.34 1303.27 2677.78 1306.23 2677.25 1308.96 cv
2675.85 1316.1 2671.19 1317.31 2671.5 1309.6 cv
2671.61 1306.88 2671.9 1302.36 2672.55 1299.16 cv
2673.25 1295.71 2672.82 1292.32 2672.98 1289.33 cv
2673.29 1283.39 2673.6 1279.07 2673.35 1279.19 cv
2673.03 1279.35 2672.29 1278.14 2671.6 1281.31 cv
2670.78 1285.13 2670.77 1293.63 2669.14 1299.15 cv
2668.21 1302.29 2666.66 1308.95 2666.66 1308.95 cv
2666.66 1308.95 2662.49 1318.59 2661.87 1318.54 cv
2658.47 1318.24 2659.52 1310.85 2661.32 1306.75 cv
2661.17 1303.56 2662.99 1296.59 2662.99 1296.59 cv
2662.99 1296.59 2663.61 1281.69 2661.57 1281.59 cv
2660.7 1281.55 2659.25 1290.65 2656.48 1299.36 cv
2653.9 1307.45 2650.01 1315.21 2648.39 1314.94 cv
2645.63 1314.49 2647.56 1305.21 2647.56 1305.21 cv
2647.56 1305.21 2649.26 1298.77 2649.66 1296.59 cv
2650.13 1294.04 2650.98 1286.28 2650.98 1286.28 cv
2650.98 1286.28 2652.72 1259.15 2650.77 1259.23 cv
2648.83 1259.3 2643.88 1261.55 2643.21 1263.2 cv
2642.54 1264.85 2642.84 1268.52 2642.16 1270.17 cv
2641.49 1271.81 2639.24 1273.39 2637.22 1272.71 cv
2635.2 1272.04 2635.5 1262.82 2635.5 1262.82 cv
2635.5 1262.82 2635.8 1255.33 2638.49 1250.91 cv
cp
.972549 .643137 .572549 rgb
f
2725.81 1638.85 mo
2725.81 1638.85 2702.11 1711.55 2691.95 1715.12 cv
2689.26 1716.07 2674.08 1719.92 2671.64 1725.72 cv
2671.58 1725.86 2671.53 1726.04 2671.49 1726.23 cv
2670.7 1729.91 2673.79 1733.3 2677.55 1733.3 cv
2725.72 1733.3 li
2725.72 1733.3 2732.56 1700.68 2735.26 1686.34 cv
2735.26 1686.34 2749.58 1651.32 2747.99 1648.14 cv
2746.4 1644.95 2725.81 1638.85 2725.81 1638.85 cv
cp
.0941176 .27451 .333333 rgb
f
2549.67 1733.18 mo
2541.89 1707.62 li
2541.89 1707.62 2525.02 1714.88 2516.67 1713.69 cv
2508.32 1712.49 2492.02 1707.72 2492.02 1707.72 cv
2458.69 1718.84 2431.38 1724.24 2436.35 1733.18 cv
2436.35 1733.18 li
2549.67 1733.18 li
cp
f
2546.76 869.004 mo
2546.76 869.004 2579.16 873.51 2587.69 879.773 cv
2597.3 886.828 2627.04 919.733 2627.04 919.733 cv
2627.04 919.733 2565.13 1097.09 2567.53 1128.64 cv
2569.92 1160.2 2576.71 1206.93 2576.71 1206.93 cv
2576.71 1206.93 2456.48 1214.52 2410.95 1196.55 cv
2410.95 1196.55 2425.32 1125.05 2425.32 1106.27 cv
2425.32 1087.5 2433.4 899.844 2439.15 890.016 cv
2444.9 880.188 2456.48 874.596 2478.45 869.803 cv
2500.42 865.009 2546.76 869.004 2546.76 869.004 cv
cp
.956863 .454902 .345098 rgb
f
2537.91 818.369 mo
2545.9 868.998 li
2545.9 868.998 2516.64 933.418 2499.15 927.996 cv
2484.48 923.445 2493.5 868.116 2493.5 868.116 cv
2493.5 868.116 2501.5 838.402 2499.1 823.533 cv
2496.7 808.664 2537.91 818.369 2537.91 818.369 cv
cp
.968627 .643137 .568627 rgb
f
2499.1 823.533 mo
2496.7 808.664 2537.91 818.369 2537.91 818.369 cv
2538.57 822.724 li
2537.37 825.638 2535.89 828.132 2534.1 830.044 cv
2524.9 839.883 2510.51 845.793 2498.07 846.241 cv
2499.32 838.223 2500.08 829.63 2499.1 823.533 cv
cp
.956863 .454902 .345098 rgb
f
2544.67 744.07 mo
2545.83 743.649 2554 803.884 2538.5 820.458 cv
2522.99 837.032 2492.79 842.456 2481.95 829.403 cv
2469.96 814.965 2470.57 750.227 2494.67 733.177 cv
2518.78 716.128 2544.67 744.07 2544.67 744.07 cv
cp
.968627 .643137 .568627 rgb
f
2538.98 720.862 mo
2547.44 721.854 2558.94 726.499 2570.82 746.029 cv
2585.42 770.042 2574.64 796.647 2557.64 809.701 cv
2540.64 822.754 2540.84 837.908 2540.84 837.908 cv
2538.19 830.034 li
2536.21 824.125 2535.4 817.86 2536.06 811.663 cv
2536.46 807.945 2537.26 803.924 2538.81 800.619 cv
2542.9 791.901 2530.03 786.109 2526.42 778.857 cv
2523.65 773.271 2523.51 760.496 2519.13 751.265 cv
2513.91 744.218 li
2513.91 744.218 2501.84 734.895 2490.05 737.525 cv
2478.25 740.156 2499.52 694.274 2538.98 720.862 cv
cp
.968627 .8 .498039 rgb
f
2527.22 789.576 mo
2527.09 796.925 2530.46 802.941 2534.73 803.013 cv
2539 803.086 2542.56 797.187 2542.69 789.838 cv
2542.81 782.489 2539.45 776.473 2535.17 776.401 cv
2530.9 776.328 2527.34 782.227 2527.22 789.576 cv
cp
.968627 .643137 .568627 rgb
f
2667.26 983.305 mo
2613.06 1025.59 li
2613.06 1025.59 2589.13 1002.64 2577.11 977.253 cv
2564.95 951.557 2573.45 875.489 2586.4 878.973 cv
2615.37 886.768 2667.26 983.305 2667.26 983.305 cv
cp
.717647 .341176 .258824 rgb
f
2315.92 1133.21 mo
2314.68 1132.74 2312.97 1133.56 2311.1 1135.05 cv
2316.08 1128.57 2320.1 1122.15 2317.52 1121.06 cv
2316.41 1120.59 2307.75 1127.68 2306.05 1128.65 cv
2308.48 1125.64 2315.99 1119.35 2312.94 1117 cv
2311.11 1115.6 2302.21 1122.65 2297.2 1126.84 cv
2300.08 1124.04 2303.12 1119.53 2301.69 1118.92 cv
2298.6 1117.59 2280.5 1134.93 2275.47 1133.29 cv
2270.5 1131.67 2273.91 1142.77 2279.9 1149.09 cv
2282.44 1152.95 2289.37 1154.16 2292.03 1155.87 cv
2298.68 1160.12 2304.08 1156.77 2304.41 1156.69 cv
2304.41 1156.69 2320.81 1135.08 2315.92 1133.21 cv
cp
.972549 .643137 .572549 rgb
f
1644.47 408.101 mo
1541.43 390.644 li
1542.65 383.418 li
1645.7 400.875 li
1658.05 402.967 1666.97 389.007 1659.63 378.674 cv
1657.44 375.584 1654.17 373.535 1650.44 372.901 cv
1626.73 368.886 li
1616.68 367.183 1609.89 357.619 1611.59 347.565 cv
1613.29 337.511 1622.87 330.72 1632.91 332.422 cv
1706.01 344.805 li
1704.78 352.031 li
1631.69 339.647 li
1625.62 338.62 1619.84 342.721 1618.82 348.79 cv
1617.79 354.858 1621.89 360.632 1627.96 361.66 cv
1651.66 365.676 li
1670.38 368.848 1676.21 393.291 1660.52 404.429 cv
1656.84 407.043 1650.22 409.077 1644.47 408.101 cv
cp
.52549 .694118 .94902 rgb
f
1564.77 374.075 mo
1570.27 398.769 1554.71 423.244 1530.02 428.743 cv
1505.32 434.243 1480.85 418.682 1475.35 393.989 cv
1469.85 369.296 1485.41 344.82 1510.1 339.321 cv
1534.8 333.822 1559.27 349.382 1564.77 374.075 cv
cp
f
1557.62 375.668 mo
1562.24 396.411 1549.17 416.97 1528.42 421.589 cv
1507.68 426.209 1487.12 413.139 1482.5 392.396 cv
1477.88 371.654 1490.95 351.094 1511.7 346.475 cv
1532.44 341.855 1553 354.926 1557.62 375.668 cv
cp
1 1 1 rgb
f
1529.68 427.253 mo
1528.7 427.473 1527.72 426.851 1527.5 425.863 cv
1524.47 412.25 li
1524.25 411.263 1524.87 410.284 1525.86 410.064 cv
1526.84 409.844 1527.82 410.466 1528.04 411.454 cv
1531.07 425.066 li
1531.29 426.054 1530.67 427.033 1529.68 427.253 cv
cp
.52549 .694118 .94902 rgb
f
1514.24 357.901 mo
1513.25 358.122 1512.27 357.499 1512.05 356.511 cv
1508.78 341.806 li
1508.56 340.818 1509.18 339.839 1510.17 339.619 cv
1511.16 339.399 1512.14 340.021 1512.36 341.009 cv
1515.63 355.715 li
1515.85 356.703 1515.23 357.682 1514.24 357.901 cv
cp
f
1560.23 376.18 mo
1548.01 378.902 li
1547.03 379.122 1546.05 378.499 1545.83 377.511 cv
1545.61 376.524 1546.23 375.544 1547.22 375.325 cv
1559.44 372.604 li
1560.43 372.384 1561.4 373.006 1561.62 373.994 cv
1561.84 374.981 1561.22 375.96 1560.23 376.18 cv
cp
f
1492.57 391.25 mo
1479.46 394.169 li
1478.47 394.39 1477.49 393.767 1477.27 392.779 cv
1477.05 391.792 1477.67 390.813 1478.66 390.592 cv
1491.77 387.672 li
1492.76 387.453 1493.74 388.075 1493.96 389.063 cv
1494.18 390.05 1493.56 391.029 1492.57 391.25 cv
cp
f
1495.98 421.147 mo
1495.51 421.253 1494.99 421.169 1494.55 420.872 cv
1493.72 420.301 1493.5 419.161 1494.07 418.326 cv
1502.25 406.337 li
1502.82 405.501 1503.96 405.287 1504.8 405.856 cv
1505.64 406.427 1505.85 407.567 1505.28 408.403 cv
1497.1 420.391 li
1496.83 420.792 1496.42 421.049 1495.98 421.147 cv
cp
f
1536.2 362.216 mo
1535.73 362.323 1535.21 362.239 1534.77 361.942 cv
1533.94 361.371 1533.72 360.231 1534.29 359.395 cv
1542.62 347.196 li
1543.19 346.36 1544.33 346.146 1545.16 346.715 cv
1546 347.286 1546.21 348.426 1545.64 349.262 cv
1537.32 361.461 li
1537.05 361.861 1536.64 362.119 1536.2 362.216 cv
cp
f
1554.14 408.523 mo
1553.66 408.629 1553.15 408.546 1552.71 408.249 cv
1542.71 401.424 li
1541.87 400.853 1541.66 399.713 1542.23 398.877 cv
1542.8 398.042 1543.94 397.827 1544.78 398.396 cv
1554.78 405.222 li
1555.61 405.792 1555.83 406.932 1555.26 407.768 cv
1554.98 408.168 1554.58 408.426 1554.14 408.523 cv
cp
f
1497.15 369.63 mo
1496.68 369.736 1496.16 369.652 1495.72 369.355 cv
1484.35 361.597 li
1483.52 361.027 1483.3 359.887 1483.88 359.051 cv
1484.44 358.215 1485.59 358 1486.42 358.57 cv
1497.79 366.328 li
1498.62 366.898 1498.84 368.039 1498.27 368.875 cv
1498 369.274 1497.59 369.532 1497.15 369.63 cv
cp
f
1509.7 337.533 mo
1515.4 336.264 1521.09 336.078 1526.56 336.836 cv
1526.06 328.132 li
1525.76 322.952 1521.31 318.994 1516.13 319.293 cv
1516.13 319.293 li
1510.95 319.591 1507 324.033 1507.29 329.214 cv
1507.8 337.998 li
1508.43 337.831 1509.06 337.675 1509.7 337.533 cv
cp
f
1483.3 353.764 mo
1487.26 348.939 1492.18 344.868 1497.86 341.878 cv
1493.98 336.956 li
1490.77 332.879 1484.86 332.176 1480.79 335.387 cv
1480.79 335.387 li
1476.71 338.597 1476.01 344.505 1479.22 348.582 cv
1483.3 353.764 li
cp
f
1524.4 382.44 mo
1524.95 384.91 1523.39 387.357 1520.92 387.907 cv
1518.45 388.457 1516.01 386.901 1515.46 384.432 cv
1514.91 381.962 1516.46 379.515 1518.93 378.965 cv
1521.4 378.415 1523.85 379.971 1524.4 382.44 cv
cp
f
1518.46 381.652 mo
1519.5 381.147 1520.75 381.579 1521.25 382.616 cv
1521.82 383.777 1521.21 385.2 1519.9 385.551 cv
1502.38 390.156 li
1502.22 390.199 1502.05 390.101 1502.01 389.938 cv
1501.88 389.47 1501.59 389.979 1518.46 381.652 cv
cp
f
1712.42 334.707 mo
1723.23 336.537 1730.85 344.762 1729.44 353.076 cv
1728.03 361.39 1718.13 366.646 1707.32 364.815 cv
1696.51 362.983 1688.89 354.759 1690.3 346.445 cv
1691.71 338.131 1701.61 332.875 1712.42 334.707 cv
cp
f
1690.37 339.952 mo
1693.14 340.422 1694.89 343.723 1694.28 347.326 cv
1693.67 350.929 1690.93 353.469 1688.16 353 cv
1685.39 352.53 1683.63 349.229 1684.24 345.625 cv
1684.85 342.023 1687.6 339.483 1690.37 339.952 cv
cp
f
1973.84 387.801 mo
1959.9 389.233 1957.84 370.506 1971.92 369.06 cv
1985.79 367.635 1987.73 386.374 1973.84 387.801 cv
cp
1962.96 364.629 mo
1960.81 360.396 1960.1 354.018 1962.21 348.896 cv
1965.77 340.25 1976.03 336.51 1975.04 326.832 cv
1974.79 324.395 1973.65 322.456 1972.02 321.23 cv
1967.73 318.005 1960.99 319.928 1956.21 322.366 cv
1953.16 323.925 1950.34 326.098 1947.76 328.887 cv
1946 311.793 li
1951.71 307.534 1958.68 305.211 1965.68 304.493 cv
1980.03 303.019 1991.25 308.143 1992.73 322.49 cv
1994.07 335.575 1985.35 341.594 1979.56 348.29 cv
1976.35 352.007 1975.67 354.827 1976.01 358.066 cv
1976.18 359.741 1976.86 361.798 1977.9 363.094 cv
1962.96 364.629 li
cp
.956863 .454902 .345098 rgb
f
2049.3 360.978 mo
2049.59 341.336 li
2055.49 341.423 li
2055.3 354.392 li
2068.16 353.001 li
2068.8 358.871 li
2049.3 360.978 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 16.0
%%AI8_CreatorVersion: 16.0.0
%%For: (\702\750\762\740\753\750\751 \702\750\752\762\756\760\756\742\750\767) ()
%%Title: (Senior professor lecturing students group in classroom.eps)
%%CreationDate: 4/3/2020 2:19 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6flHB!ehGb.-_fIK_9A)IO;JC<`aCJ;n2t(Z!b;LD!P<+8Ma*s9^?D&HmMG)CIYFtD3]c9hmsBdMDq(1(!Ko\jn*PN'+0)&?
%+K`kQCWJBpJAm]4B;7@Dl6c>A_?LNB;?dY,A%7*.WITQ<YWr+qZ(,l8G+o0LGk#/iKV1%Q)8I]R`:"/p=MR1T6=.f1LLB.!hjP#-
%dBk+e/Trm@nH3*bKFOpLbfEUi]&4$-\7Z$Kr_Gn%^pNs29d1ZmA@V`1jb4j62;j-(6Vh]rOdpEDp>p,CA;.7=$52P_fg*5W:I',s
%BD<?-V]5FTGZ81N;_W0@'N%fR-08V;:V?cQi"(D=;^"Ac#Jl1W5D0UQHSp\EIR>`Fe$L89-2`DuG2W3f$\PNT0M%9+n0&Xa6EgnN
%5(JUo(hc=qW"Fda6k^FZ$DW6&&cr<:+9au_BHRahC__Jq$^#+ETg]n=LEPLW$0\'3n:?,"rMWGP"Dr`%&Oe9T@'i.K6T?&pJLs<,
%YX&Q1"%:7EBLrOhk7f's,gegfSq%fU0`W:(aQNoSL[P`rk/+qX2P;CQb<YAYUYomNGmf*MLlii`$U7%3'D/R:BL+o+.6iZQn3]Hg
%K%eSU%HW@^r.3BV5ns_4:1/N&'H=mMPX?!Ar#h4LNq@/88sDDg>1$!kM7M,-8MpSq9a$QX"H`PSa8pi6DBKl7:d$#`7kB7O+Z5?:
%e:tgOHVl"A3*@IthMAj9/]%Gn$FZX*)]X\[.%_ub#QeB[3<J<\!f6guC(nHm)epN/oWS4ub'(>;<+)RC5C.LsNJ#$-LQ'TP/F?JG
%PMHTBV1s,93$'bP(7@;?NsEJ1!0d_s%)S<GT$<`+o-H<4YQ1&?(iAbqK&BQ--ObN+dRsaoi&uPE&#LcsOI@b\-2W[3rsTjl=f0FN
%P"eUUdi.t5Kk'X_R.sa/<LjS$iHiF:!Kj*R%#IHY`4+D#BX-nJ4(+.%7/u8i^Cir*&\@<C(jpcdK5:r8JdX-Fn.qG\/@=<EKVU_B
%7s4e8%G!npR)iQ((1\[)4.t19*(:,<8jOVB5_FWM=c<>frfuug:19K1A2KNk"dnkd^id1b(^K'<Lk'$sErss"g3A#80BsY31!t"G
%0K_`h4bVs^P#S$-0-s3j?`$bF1a`_lRoDuA3\YKO#)A<Y[8Zu7$>BRV-@s0rJ3Oq@?0UbI$[N&hR#NE'd"B=a%iTC3f^U'`\.mg(
%)jS5J]Z^][Cn)Sipcnad:UKpECUdeW;dKH5D]?jD2t4dpYWn6QnO-:-'Boc%;7QC.!#(t...A4h%hS6D6%%XhV&/p4Tc\^oJEHqF
%L8I8o$[c98)`tJ:%e*/"%H:U=(4?Adn%ethBqK!!^rJ)iGTnk/*"O#*N@i0T9F1FRQ\YYAVb$:pr($Vn@UGPN2g2ut+o_:-"#F[2
%DAclaB.T;K1L^IhHLZn\0nI>pcSR'W7j]bu(PoqY?XP*(S;"=D!-=;"#"HK1%FI%L0LNiFAuH;n=cfj&5k[ed.V@B:5oMh":O\j#
%3%[$VN.M!>bi'@#&5h[0=mc*jaUbo'&<.'a`ZjS/)M3I<mh?p>*c*QCYq,;U9bi:sT&AVT:n%H4JK'nR%eWGM&<KGtoIPND_(5ef
%PJ:$s(mRT8UP7BsB;kG"i7FAkO@ot3\03<ZS-qk<T`t_*-/3)Y$/dPV!W@@AYQ4[PdGpDOV$T]q$#tKo_rKsWdANAJJEmQd\Au!@
%QN0?aDs'$FP^-*?2"nIS_WUW;,B4X^eRbsgBVq`-`9/$kZWu]U/Q*!?MFd9mi:uL/8n*Y<qrtY2,"+%K;m_/I9+=iU4bcY""7_;(
%/)1D/qidGVHA3Wq'GuC2[l>G-e/`E0U2r\=`_BSj/Am`hn^!c<`"LIEpgk?lBd$$+k2aF?Za,UX_[&(aGUX.F4eAd,-'!g8CH&dT
%2jhHe_RK;V#_R&>V;`dl'%#euf7G_A,CJD>.UoX^2&qRj9+Ts[^bob'('FeY!14<#7Ldi3EJ(^8NXu>%nE!0hj\,A]qAfcXi2%G>
%9GWE"<s,"R\k8W6b[;b`rQ2IF4UnV-1DHOu!$jPu?5(dt\Sc>cK:4gYY/j2q)i;D@a#*;Q6ud&a"@8\d&]:A[8ljNu:/_DB)O+k"
%+AMsN.k:5UT,-O/@fG)"'#*ZSiVS4mD<'D1RlHrFbo'',>3pE-Lon*@A't*i7-__mgIZ*7'/hAFmk[5>*W`>"G=<LVS[-XZ=Dgj$
%Dlb!A+pZs>9d@A1jZmppS[8]TKCr#'ZmhYl73%h(gBePGa_[Wj9@!W])B5e5j."'$h,U`QD+6lNk09FRM,7SCE#Xr;Qk^GLam0M\
%&p.2Y<o[gZMp7+CU5o"?Mge+m1tq\,_i;%IToompkOU"=&'+SNATBi/bAS:&$5p;`^mAXpL<)*7gH/jS09u,N;n6Bf[ne8sm8U55
%0HcZ'>k6\2lQgO4b!?9$bNZ6ka'A&"b8kZ7@kMuLjc6n,(XD.??R_>j7Ecq:E_5sD4/hh>2ZMs,=Ieso?Qe+N8&X$)G=55`8e#.C
%:[1IU-I[.,rPkN_kdl@X3V]c@C(=iZT'Cj$jr?1H9K6XKe>@,uj(9=sf%+=pgA@F,\+SDDp'qPB^?Moser0!=-L>ilCcL@`?:M:B
%j=DCgkRm7FCSC?UJ+g8@(58CV51!4IPi-_]F#paT9P-VHBsG&]UQ6N$psCAb&fL367sUshDgp(TltDqbLW0@pB*1WEr&*V,lpqXi
%X%db,TRQ`8r+Iis5"+;6aakcY+R&t-D!01V*DH:6_qZu>Mi)r/J8p"SptQkaGJtC6Sf:C^qMIW-h`$L_1f]H3gi/?@c^.iKd-XF!
%4sp&4alXg`!rFR;6d'a=[`Yjn(-mXZk\J-uEa_5+?)a,2)RKho$6&hh*DcB#4Z&8t9nOKKe_d'g@K^T&)mWC*$d&_9)8Fm7q$0%\
%hYY:n2aoZ"*1c+C0n8).lUNG<+.7&Z'PN=<\h)q'5t3s4-ed1:a)<!;EL5!a`DQDMQ]Dn>Ha([@`Ue_X^p61HX:O^s(8$);6Q;VI
%%NX@!.^#q2oX4EJiEdPF\cntUc1Iss*,nslD0,2Qb:f8rI[.$I3bUL?2-E*5pjg!1C"1<6iuYkk;hqp<__gFf`qJ8JI0J[(RuUnD
%.kO9Ooe21i^VG;#?0A<_I<t3]D`O?`rQ456FudALGSf]_4;b7pZhAgM@sT?="$PJD@rq52FMC5u?C^G%lH*?B`pr78k"m&DJR;6H
%[D,-o>P&t4f^ZM*YMaJDc&DVY>g_&p<ek1eF:beQCJG0Vb8@3"1E*NN)EU4!KVN0[A#7;Mkc<uNC\g#=X%dd(D:73M4CD>Dr"Z(A
%1Hn?r1Lrap3n?D(,1F@:o7%3"+*#9?m0'2FH6Ucti*KX+]m$kFC2/OaUH\K/b?`g]n^mXr)2\=#Dn9Jan$>C-=j)H1mmBV,j)AVD
%%UqVKf'h@0lfd+=f&6f8I9WTR4,bMn]YD,=aED]/%gd,TV!,#m185Q*0+e@lM,V7ZMT?Aod\1t\X#1jA2D!K2.$F]#MQD=<2/MTh
%=\+5"'c@(2E[;_-C:?4u;kSHTZN/fkceK--TcREn^ilSc3\is,:]AE'NWs+b-hCWaA-%7uPS&"l'I)V@8/cFlQI0\sVSrsIn0bYe
%d'Nr3BkG2?\=kMom/C98p];8<H%O)-.!q)L[D('a'KsAS9)7JV'4mg$Zaqu/hrjj&rm<tof9RHOU.DZY`Ene[=5&S,LR:GK4U8\;
%77V$:+F?u"K\+U/1\Q;O9'\"p7F=KHEA,IS0?V&HgDos^lrgKtAHU*,gl%oM,4<.FrCVE6oFQ'l&bVjd7F<E>I@hNeFY?AQ/+#dQ
%6d27JqTiEC3Q+'<\n(U;X0G<#*qn]@\or<=-#n0r;]Lf?Id8D*3J&o,IpjPY8>A7T)P:7X3^j"EVrDp5l"B/qQMm,-Z$0qb5Bb5o
%dB7o9Y#.^$VLo%B]6:Ps8%WpUFtFqh-c^2nCP?OT'^F)G*Ne&1[oGKoCL8Pn4'K%e<Vs86C@W+5`X^S/pPgI[=R`@aZ3Rc;Gaq5F
%T18Hm)X1YGE>fjqO[<[^Qm&,4".r,+<S&9U)=4N#0jktNggBE@117gT55@%n:'g]_s2`Y4g-:-/ns\/_*89L+go/J@\<6IqD^r2<
%NEKk^eocb&%!G^JIA)"%[b8X[V)7KdgOi.5E'6g<]Tm)!<.2TP:aT[s(WpoaIeG+Qh97&F*[*3>*WU[E"8FMN5(il*^^J'K3>Sp4
%%-/Wl^?f';oX0.smpD1?mUgsOXreQHQqdMTaSC&8`kS:-iesqLkgZea[q6^g3njU$o)*IN:I+2KSnZlW?aOIX1^'d<FU)UaF;4WK
%=qrj(0He`f$4&\+crs@Gd,<eikcBC@XfY8()T_lS6'&;9n'G)i!]TKUfr6%AHViSh@n-5Y]VOs(k+I+_Dn:>d9/t$\>_r0JC_(,6
%d.*phEW,Y$epfp[9"s?^n%P7Hj8/4arV*i$HX-S6Y5bYgcuK$Y9E,XEm\34]!_cu6SWVuQc$)r6-@9)!3Ni0!f6iWp^)mi+F9FU/
%V_agH.=MC^j@G>lXgH`GZ@-?j"9-X6,S%>%D[HJ,/U.;o%LU_qFr$q>[1"p`2q]^SG8<("0]b*a"2\6TA1>@hh"L-IVj4.R(NN-Z
%.Ji<W`/YS<@tj8VT(hO>]uMn]^6Zm$5Mg`<P9%hWT9?*?\cU'8+s9Kg,J\MC>s@h=is4p-,-^G?0/+WqFmW];C_p1@kbr+!"7T#t
%]h&F?1NOVe5nijB)pY<a5;oIEJ9/dPQYFkf.RXtZW3Ogb.;:Na-qZ5?6)m(%7UN^#E\'E@Fn&lqAm6D?'n4oZJc4+[M=Skt@us@I
%.`AJJfbo?%r5sDo+/h$"2E;OZNeNg0iT40d3>Pq]KpQ<.j]Hc\lD\0Z74c)B<>\\b3>Prp3!2;Z?9V83fj/ReFnYXt9`_4?,s2E<
%62GU<9milfZ1fQ1YBH*&\!N%sBpfJ.Z3`Z1"<9(afFJnorNZ_m1`S0<fVq[B/O+`ik;rnBh`hU\BnbM&lg74*\Ang@kT'=A8D/4M
%GeAlIO.E%p"2+AWnUm8!_>)%1%8:-p#,VpPom$A^nb/ebWG*R6W:cN9s6&oBCAqKk.Jd5Gno``iFZbr(2^-#R+(s3q6]l4+^Jp)@
%G,8AgB[F&T$6&otpZ\sWer0!=-L;Gl#(^XW1s(M2kKA\$J&`PeB;GD^PC\.GbZFbJlskeDjYA[JO'/o,kau*af=igCDHHfI-hS&"
%A+a\k=oduJS7VDA]]/Z5ZKIcTl+mH_<)?Bg]>O,>*t`f3Omg=O`a30We?P$R5WR**f.hkaTT5_$L1;66D_p3:S+FZ]`j(Q/Dj!-3
%0ogC8"0#eG>^=KUg08^DPeY'rF%9VA;eC!jF*b8LMs[r.B$pQP88<SDDP#\NR.]aS$`;$>fW;m&ce))f:EH0\h\C!SDLi\ML1R$F
%hfKm8Q36T5W"EC+Emp=TGumidJ8fXKTSk]3oZj=uNlpV&gp3`2R,\Y%$\ru>BP<aI?*D/_+"ue[8(eqgc?$Xf7pA);^RI_pJCP8,
%TcWf\^ii5)NZUEQnp9;=IWna2mn2"aD\RCAmB66UO_]Su=5g&@':Q6.n;E')'`<!\TBHW_pH@pCNL-7'Z;g_+6XIf"WLb$J=5*/?
%MjQlcn?m?J%BVG>a&;WFD>M\UKR:Gp9+M>9Hc+HW>?H&^b6aOPqmrVK*P6BQQ$A.o]r8lel1O^mm2U2XrQ=6oC"Y51gWaOpAol"/
%mb]mkdh.HXZajR(GKf30gVYl>3?;0O*,%C2K<euJG>.1[l.e"a4/R)>FRI>LF+LNZcKQP8OOC[DSo8fV7ZWs#k&Pg2bB`S1ONm#7
%ibR^u?gS(8F<iuh$Q4,;j?i#1q?-O2\:_Oticm]MnQq%S]N8Qt`-iZdof3h!m%tU_!/Z@'46>G`J8+[$#4W9iAm4!^HWX?`G;B+\
%cr6d,i-(r@3e*1g@-3SHH4FL)AYJ*(j=L.JeP3`GobH<H!W7,dQ];P&k[Mrhf<T7KrHifNDZ>fI[P>a^d-l8GaV*)TG,9/-p2h<r
%+%SU)mb)+jjTMS&m#"!_^T^^R0tP4]"n\srd]mS%1(u]BMq(Id')\-4rXp*[J&_.hr0%%$VZ#KjSPVB8)I`s0S'LT/%!H81P13o8
%Qlk+&VJCHu!P'_,OR(T9SNOY;HqJH.7O[P+OELTKJKQ16P[+)O7WVp"hDn%0HQ<uOk_Esb-9BLp!T0F<b[4k/`9KsX<h&Gq(,6ot
%#ElmQ-HDeC(_lqgT]d4+IJQ3DdMtI7T]jRan3?\pnTu<6r5O0-q_+L-40.l4Mqre5(qD=Cd&tkk7kiBC>1Zj&i88GkZn<P#cp7"X
%%=2hjItsnY&\)OnaQiU&K7i`V?Z"i+rW;clqo8^rXY?8W$@-`RHYh&hc>c(#P^Rb9H>#9!a1XFIHg_b8QjFj_j5KmT6`_CPIr'(2
%K:^t1$P,`K^NC4qW=`M,%\KrtX5[L^K%]1&]cGgl6sD>53T-:l^b7#Q18$]L2bY3E%EApFo^B@eM^R8Y73D1rY;tMabcJL%=ujrU
%Z=-D[!F#kPS>W`.Y3i]dpfc(m=2!VRpRd8rjW$>V4#/oZ@e.4I,fB3gDTV[%<Ml=K;uRT(LY_(Y5N#0]^>.SV%g6WSEpap_+phLH
%J4.r&jDD\f]ntZWZJ#*mK^8Hej+E;gjatp#Rde[9dD6(;?c`gE?+]F,6C&:.=T@#4#u?td*pF_6FcnHB=L^U!hrlXV.\M!%9sV*&
%X*Tk>j=;[IQSr6+YHDKJURLRRc1%oTb`Y'D*.h'.GiZCf0V_30cS$a6U!A.ud`9DF[(VM]5C<[r+:927<P+6dO/7n[dQq*o&qe"T
%_tdG`4`7P&4^0Iedg//4,=n+g*lf1e;1%hC8Ea1V5&+?nUC-2gh(duQSgW2D2j1rOiuaUtoI_Q+WsiUuD]/MN$lDg8br8cm;OC1)
%L(Z:O\u]9f$Z.T;D(c@XgCuF\E*^k"8>(*s+8EY/=f]$o[Ei:N8co,_.#7C58CJCtUd/^K%Vb5?iA][3LAli*'&nA6cQ@U,I$YDA
%20^;>"AHjo&c_#"I=lUhrWq#)!ESS*B[.pN&i=08gi,A`(I4@]%0+Oq3Pg46)#0m6rcmZ-7KAmi'HNp",l3$'"<bf*_JmXN27lMs
%#4jEEGMhAg!r2BlT)As4@43!7T.r_1&+Hk3k5rHH#"(]2_4eRqJ%\KL_;G:Ehu@9_kPt,Is7c8;rV\t[q7lq-++O=RhuE.0s7aF)
%#RLhD=!jg3nuaYKFuj2'1+H#sj0h0Q62Sc'5UC?a,tPu1&'.?(Ma.2<Bs$EYr>&[S-GA!R/I!e]1TgYN+\%QhT)rtV-mU\Vcp<.8
%!9(Va08cF=LEQB<*suIfaC)2@#sW:J71%1V84ITNQ3Q4OIBUASisCH2M?^b?BbJJ5#6H.J!SBCJ!<:L2#s\q):D*\X#S)QaM*M'8
%%$7,`5T&^L<$G;URA9A;_2o`oKE.QtJg10MJCH4UhVjQnO?\C1Y^`28K5PXs#5o*^6@hH$DN9>XL$/Mj3[Q8F_Jg)W0M%:e^0gqn
%LqU1j!-T'l+E)5K&V_fuW89,emL9:#3/.Q$d!em2(CC/a5Y_Io!D;=DdJC,U_GS%:;aTCf:-lnH'M]d=cp<VbODodp*6ElRC!$sY
%OFVO3e//7Ml:6L2OV$I'.8!0tim!W7TVP!&%mL%_o`paMq<(_>I`0.caDhQ/'F_,hCAqt)_bYq>KEGm"kZOn4Pb/*T!]_Ym=f<sC
%/V#q^^`'Ue^0=8QS-hM=_f5aQd#\PV$&K]O')4!`eJc]XV3FAf'<"-!7?Hfj-VdYDZ"^K^5#8XfLfWEY&Q+",O@$,%lhAjR7\Yr?
%2?Y:jQ8AW@*Yq!T"^t2O#_tdEPX89]>1c:o5U.!jr"Ol_,2_TL82NJY)OVX%5_T&+*M=!rUOi>2Uf"'p5;FrY-q_W_?I#g1E%DPc
%6cXao:lccY,a!?[LiUGrAdD(HUdZR*8!FtVQA4uFaB'rM`N'/+?sjR10QR=Um%+V`P_]jf#UD#r_F*5^1a0Y*d$0.q$@uN7X\D8P
%.`3N]Yu$L3+)*f3!Qdsjf1XB52a*eS+_WWM;*=tO2C,T%+dI'rhgLXs=0(9%gY^tY<(PR.(+Mn2#Z@2/,Xk=fk<]W>BbG88RKfE0
%)Q=U7%!PNBg<*&#9dR=Y@2=F:a(!RCLdX-jGDb=$22Dn"s('mn1*cFsp3kTS#I(9/8Y.Z9Sn_\q-qa*5foR4Ke'&L/6'd7DrW#E^
%n>dc5#7k@aJMjX=;f)NI8@JOuh0]hNXdn%lfN?V,2!if@V"'EV-BYD6%0-fDCgA/cN+Sg^HLS!SnY>J_*rn7X>CC\\h2H"mF&;U;
%&D6&5n:thh+1hQX5\FiuoFb#rK2=T'B.Cm(1M((LaO8GU$4a4pl'`K9,e\7fppa0,J(&<O+RFP*4J];@RnWY:*gj_"WhSGY""Q@X
%LOsfM?W6t>o;8sE\+m^a4C;kR:HF!nJUS\k-(bUUf%2Y:A,l^W&;C>s^+.;72UMCMfA:s42B%DT\JOBI%u!=mGn+\hYK,q=HQ!?)
%%_<GjH:TgL`Ijl2<XQ=-it=ke06H/0#"oOf[?[tuVsMba^@)A:^]Ys/IM4k=IL<rO,28NO"g5IcN>N+:[F*i!(<C$DbMl*B2JV\N
%BE:6P?ArC8:74"r\NXFUTjJk"\LeOkFQo;()Ekt";`-RCflio.hoPXp^8sX7.Y#.9d('27A-Q%W4<$uV#=d4FTpi%Y7YIZBI[gsO
%-3<9$2g11LY=s/_n&Gko/1[Lp.m,bZ,$rs'ZN2R)k0b5BR[]6@bkD_po]LW!qu?Tk^]+5YJ,]2Ws5WSJkO8HKq`k)UIi,tRs829b
%!C$M/s8;?cr8.qP!mBmAf)eX91KKh,icFZ?M<`kRj-8F?`.;])RmJsQ.QaU#<H3EGJ1GRd&YKTH-<0CV?m'tIV#3Nnr]Y;/`QCsh
%_R.E@6<gGs?ER5P3=KBo>R"rWP7+]\B%lVuK1/0qB$sa*T8`TF)NG\SF(7\cc#.mPH)5/&ku!?\#YV9oj:-t!PW)R0acmOM+0<'*
%6lsAXF4E2@7sqA`c_cH"^sC#i@CZ\/@&C"+A-f,-Z3hU-N0uCN(ae$W2HZQ,=rJ"Z_FPY'/:W%^kuJqB'Q,-91BP5$$&jdXKDlX.
%":.4(eEkFFJC2V`_fc3,@:$AD$]@%\'aTm%D,=J$L97]N0l.#"NWH'!+LqKC=+jMrkSl=W/_Ph.6s1,S#qLC5%<_BJW?KaQVG*0m
%E7=8*)h<GT<G%=&cGkS_1[<8Q/o.ETj+X?]mHD,.=eGjqFp&K\+eBT_1MU@h+Isg%dT^B9dMkQ="kkl(Y-F+n6$Y@/"/Xi%"SW/a
%N>=Bn0N3CV#oH@9#7+clB>Y,N]1NA[X8m/_KiU):e?;_VH5UI7LR3O^^bC;aMTa9HM\3#e46OGIq9c`8dO$iF;s[m7QY9b??j_Q0
%.h52]#_0QoR%I7mQ!Y1?`EZoM[8[d;U`,2D^t"-r#(iNk^&^""S0\;,i;O1Y3S>Z$ZpauVWfX/;>p9dnKTQC3d2IX&i(MM,K$%cu
%#D0;uD$X0;gq&;I5puSU0`dh05h&Pp[*#:-B':f.hKV6Kq/<>gL+>r]e`e])+J;m!q$+hFN"-+p(j'K@MJJ<_BaqR,YYq^Dp(sr2
%>sQ7p#Hpss,c;a="ING4<nG42e50'K&>2o+r0jr"!G@f9Ri$8QlrJ)([;+nJN5U<%-<#\0lIN?lZNsOmW.LI[gi2VP^^,i_1Y#Zt
%IN<YK^QYV@H4\[[b_5[,+MF2XVHVr!&g_LSOBB+J`+h_REo!T%[FlBHou)A=Or;D`]iG;+cr!=d#eHt8)$=08Tu_[m#@#[q6pq,p
%`#9t$JaY6jb*<$p1<6K$K6(W3VCOpX$Mj<^&L;,,(3q#)kSP&]EelcHm1AqQ*lf]_k*7$'l6l/UfjHKm'K:Q7@$om>)DW`ZRET?e
%)$!a*M,&LnJX'Lu*^lb-_H69e0YY6IG.;N?81NWqoid14>lePlKe?'$7G;f&27_ZmS/B2[8Y_YfF@aGO>P81t3r+HX5?jI[Lha*V
%Kq^jdlVasp^"b:dDUJVRQ1mS"!]i=JBAj(5\P*.tUGi!NNG\3\p'2OJ3FT3&&TW"5,c9+06.2qDHI:,9bB_LQWgIK=f-t;d]3cdo
%bhre8fQK,\@:o1l7JpEFdAiU45Hr%2A!ikqdJtL=[j9-"_[cDp;J8u]KTa0m1DU62#a&R\$7K$e"H44DH$PgNPI1O5RfNIg0Bm5E
%P)uNBUCf0U]ZEm->W`88B^nEYD6KYWi4J'Jb4kM;Zj7kCH(pm+c\M@!@b][S.*E9q*JsuS0S&M89@>#jUG15Q"uH>ikV=6Gq^U**
%$H>Oa.5n1U@\X[jZ=IWa$HId5J^p+\Qk%1G15$7',N"It`[)@.*3OlFX$aelbeagW9'l`9K$`9)-2+=%?R"u_L+2(<3$n^kA=:rB
%RV0.C&2N73n[<ufU"EI.%&Za`Qb<#D9A@0>^?HZU__*We<=NaJ%\dP>"-n:7K2)3t\-WH.Dh/QefHa-m*Z_Q>%,0\GK;F:QVIX#i
%p]rbK2R:;'WO)[D?/V4J;27*OU8;^c<h*Q#2c<0UMn2`N1foDlR1?lHYqIrf"eXB?$c+,K=lFW.m'o1]dFDX#Ih^r:em?>O+%s[t
%1'Q(6"LeCb"Hr9",Q(BR]1CN'T^m6TTHEo+5qPXHJg@MP+ZBPq_E.bS<@@!pT3&9!5uN'&,-W1/6]_Rj(p4,t/m-AX.F9bVHeO5:
%G=,O6^0Ar\2;!AbVFIFZ7lC%JTbO$Ocl"Ji"`<Hu%C`&6#Rlu:[oeGE45maqH%hX<2"-p^_V3!n&L?8m<YF-ZVI\-9VF+t'OK!t8
%b%$^tJ`%P$P9):e&6&b::LTZ@'-.X+iAR.g[$/ELH7cYRp@87iU3oF5.:!>7!IhGs$U<cWY5pPI<_547"%(f9DUq)[BYN41a#(WZ
%eQ@ad[K:p46Kt:'*jiY"0NKAoCUB84W.CfgiK16bBM]"'2IONcfHC95,%01Hp:]eu-N+mC1'F)^Sa%.o(kIO`>;e>s^]L(!Ems+q
%ne-M]V@LHEHOk`YPr2`0e0Z^KD$+MZr-0.hN.3hFjL;r3ZGVK&n\X!KP7].2"Lo]Z(dbd2d/cCqe$TWemVF:Gn0'%K-`W<mJ6n7(
%#I&S$lfM&W2"e9^>O7sf1_r.MC?\k12jlN>F-9cUXU-+o=he/[LePHU%Yf>"KKepdfIeCQ8(W9C@66"tDUBU5#b94S95anPp;\`9
%I+Bgc`&m3<+O"FVE=5+<;cob5Jak>fZ*lk3(qn5gs#'L"C].pklbEX3AYguO!SUf[eGtgRUo_AA::<e\Yqiop'KEbM=CD5p;<FVl
%OSlVral4G!aX6O&M"XMLI][@p,mFAfe3o)45[^/9W3o3"6m*qZ?RX.pOWdg2<c5?uD9X/+6[9Y_T2]l'6U$]c7h@*[iPi41ZQY.f
%jAFgG5S=(54Gt.qdOit4\5_#tIc$A"b96Up:S&&7Zg<RV5_o;<^ooV=MXG*j2U/_XK$1T9=c@f2Au@DT:<_J6'5Df0-*UYFYAeur
%K*j,Nf[cK;!e&f0nE!j0]J>`cQo5@l%Etb&m1W<W=_:.dXbs@4P7YZ5BX>VAjo>Q;Z)$u"A7@>Xf]GlnZeoQXmMH]lfd+RIQ4_\"
%Yc]P-p%Ubt\MgMVYVot1[lpDaBn?)$9j)?'^;PL'Y8b:UoN!GB$Qur%W2#O_gP)q<;f3haN@M3H)Nu6OAghKU"iFtQAtYqLl"jkD
%s$_YEDLqm0VjOa!'o$3W3lqm`Q*5D(o:_ED&`;j[r".*)5=a_lP]^09Xoe`K+Dua].ug<<7C7T,$Pe-+D+oB?m;#XnXc1W`AA%&W
%?#30hgohg:c4/,)q_K<\?!r3ZDh1:Y5\l;"AUM3`aQhmF9s>gMgrA@:*&\18IEOP-@f+qPeU'QR%#ht?J/^15eLq"1bFhI%%"J!'
%O^Z,B)$<Qb!G\/mFDd7j6_PBb$%+1.#mB`Kp=jj%f+ZXgpcB)B.6@IRcO=<VE!Cc%?puY:_[nos1>KsdNPouERDQQF!:ce9&YS#8
%j^CY2f"dtW2.IIW@_;)JB-<9J:apCBeHB2O"9tA<V,7D/fpRY!_?]]=\0;%4=Up7W(hTO,]QqPu0q7?0!IAVigj!$066X52Q98`X
%7q+FgN3s.P=4o4]#.lT=<"(!#GLtTclPl&DL!]s.1;>j,SV,JsDC?Us\dV3V$6W<erkD1/K/]/N:"9EV=<tmFg:8+mkh'SbA4KXu
%6Lu<O5]&djIg<9VfY4A"7_giHiC[BUX3mN\UA_7<p6k2S!4;O:D:a-@@<9A+K/o:-Ocio1O>=7Y$ujtpN"*K1/L<[Pf+mI'2#2lb
%C'pe9'=?F`juM#4V@*cilG-Q\]YHZ+P8F'Nf<BO<9,C!E^YH9U+Ys><YVH!%]XifKU<RpND[MlZ<n';jMI5ZEFt55Qqq'uIEkfAZ
%7X;LGOD+4BoL(?'?L+Ls5f;7<gKOK*A5kF?i6DG3mOJsrVWf5&gq*<c^4``IqWJBQFRE!'OD<k2^c-<TDNXX@CoZ^n<(]nW]@Z3=
%PL'S1f.^u/a8ENc;@P)>LoqCCJT!<m,4h??-9oJFV.8:SW+nf':o[$i.hT,u)^@Z37kG9QW==gs?!P.X:db8lm).TE8eHhX^@Yp@
%88]qDBXg+"_J5;r5HpLSK=R4abG*FY'uU]GMPmeTPtN\Ac?VI?jQ<FXU6`sbK7Pie%mcnurj/p'd<0aS[7-HEGCd,e4it3q)tq/)
%Og1!*]'Zp?a*8sZeFe*A15FoA\QHt'(+qf(8o\:jU9b`3'XZeI^DXp9l*kcdNLe!404&;he30DA-PqFHTSZ0r7UZd,QmTH.=2js6
%T<4s"BWRKmH>VIQ>fHD"5Y.fZQ8&9!S#5)7PPtfJ4#,fSP=3,CmC?\jH'V2%:MuA7"5>CmPO;h4k1\ZekYR&K\U&Wqe5P3CD6.cf
%n8nN7T7)`T-f1OImC(6Ep0>33clddK?btesGFia;j<-Xr$[7cIBrXZfi!PLW>15(9p`;X_Ze^KZJO*(00AREcI'UJaoBj1Fkm>(p
%,\eCl80#Pge"-RsTf9TaQ"^E)m&?Sk&NNQf8?47dl$dco;mu".MOcb;2[+7UdV:Lbpka''3lR\H)TR46/T<)@@IBu=:(Agf2NQdB
%RO*hKlT6B-&W[WP,X=^cDP#mF;9Lk>78"474a`--2!pcSaFqp_j0!hJ?Zasn(FD(kF0pq'Db7#Nk#+AI#T59am2e3U*70tE8Afl'
%&l7Ubc*nR7-ibpt9]mKHF,Wla0<Wcnp1'J'R\*HlZ&o3O'Vh11.$dBgQF[u#<lL5M#N_'^oVPp4n7Qekm:/nn=ek:KJ7pA+iW]",
%5QD_(C!->#(KW/7.Xa@kc!6(o.<joSm#AM&nj%ir0NTfkE>.TCDH,ob2L69U^KnPrBeDj`qC<oqF#3kH=]c*kGrZ#_*j%aWerQC+
%N6-/DYoCW/B7B,sH>=hlkr2\Tj1BQ^0T>BE8N!]T:=%CK=JFYf9bWeU<[gln8>lRrqYAtV)RUYBGHYYc"d_X=<G:\kJ(\%Fi"aQ#
%6G)F0SQ_nM=:4n9*3PYhE[s`gp'f;Y)S#)[l+\`Zj+>Xip4l;MB1PY2!%1T.Jkid*abO3Pgf0FhBDn?#U2XOB!):BHS_:@6!M74:
%JM?k__`4or(tI^-Oo!RlW#)>;<Gnh4.:`<]qKIN'5-%&?p?q#TC0&TZ+Z=,FNZG)?<IMqFYu>;('a-J8<hb_q848IhfMTj=)?h,F
%go9Ho$`E?F2k>Gn)9E5A;@V46LDPg<9<sdVFUCDC^M('^WV5g&=jf0Ja<_'joQJnJ2(_9>P36t/<&Fr3#)n0dVfR7o$ZKCB6=WAl
%Sa\5G3aO[K$[ctjF(8-)'QQY?QR\Rpne8a$i[,Y!9W.'Y69*3bo-IZS2JaCc3F-bm,qHO#KnmMbC\J.f1_RI/'V2dKUHM<#?41Hh
%(U[np%Q_%>.T%khh=s]-cX\iJX#kjoe:hJ*(*"3)h#&I\[8PsF+S](fe*=\Pk8;Q6)).eQ[Q`E&^fEpAM<\L8Pf$c]kJ.ecr,f@0
%oHl3YC[`IKbbEDa)Y#k*/Z4KpF^3llSCVd0@=(k]KPEF"E#<qX&7C#Y/=9UlVX!PR"X$';iH\tYS\VAipl)iAM?67Rh1@))GN+KK
%.2'<geD0RkMW:knO>nHfWM_C%c99k09Yc59,&4^7OU,;I`@]1t!V8X'4YA*3*B`APrqK4:7p!u/<P8-JSKP&SP76D0GtHu*<&"kI
%`IOiG;2f@HcZ$?VFgcN1")*pY6r<LaISE-:R6iLQ=/o:HY2J%_C;.KFK$TTh=,BjOQ4A/f<MK";c9RIiBV?S3I$.go8j]K"AOdp_
%LeubpHnkQOU.#39^u88>R*Zru25$^t3#G2c82D5$A5F:1MkJpmBM]dc0#9iW_hu1RR0L:).2e!]7GqB<aOu`G+tt"-aN.4;Ej]:A
%%C(#+k#>+#;M)05o$o<#Pp?>JPq^-GOC-2V&Kus18rc:O?-BFMWs.eDEY&51;P::;MRQG6ih4\s"^N>'j]>%&euFK8h13;["^OcL
%;/<=&N@)E7,->M_brHDB;@S3#lhIKKZ2i.$NDUFe$at_RI@MaAP?PC`DcKp&Z<9pfRGK>[)d=dF!f"oiXI1i+`=OO-1Erj!6qnHe
%'(r;lh6K=_<#W\tVui'IMp>huX<Ad*0h4I*N(>9.dnU\rcmYqo&9jAd-W(!S>&!9AgB$I7NKbDk-o"=n45C8UE*eK'rZb:T\JSo<
%38OmREgBr4YU*\TA.d#Ob&Wqf9^BuK"KNAFR@Ch[\Sq)0aC5Q\UnCJXjD[qh@GW+228C`SAB>c3!X[+?P-TY+d.+'&DUFT%@Q$OG
%:C8LC:m0m+klX0aj9lfqn[L[[oYoLq?]HJd?k_'fm5e+6k(agUd:ZOp*G"1RbBTV"<#s0S9Z3$BXM6.*WFQ0$2H&$^<:C*fWA$A3
%dOL/?kXb$NR\68[eT=)r^96cE&NG9c-SB;??jnWHmFp"7:!0O[`IpZ0$!d:iGEH'R2l@F\o*Q1PbYno%)bj[(ZPVlOeYM?f.ZY^J
%cFg'n@%8K9O.3I%bu>"BO_7<[7>8[:M>1ANS5$cS2H&<Ljbn58Q7`GkSN("Mm$4HKD'"__ZOE>!#e)^:??QJe>3bKj,p&:l;)jB.
%],o"\LuF5M]n-6eCeOG+pF.1#MhWO'.9WK<<VeuX^"Hu*$uMG<%[D)\!e?Om_^\#Ne9snYAL#UF3NOr4h3[`+E^##1a"feSjp&,b
%LAL7*$BWb\AR?C]:c`erG<j`N+YY,'0<+i^1-2"+3K0bJR5s9YX*!OYPlk&KRjK-BN&VPL3X]4[82Od/Vq/T5r1^MNcVAO>1Rbui
%QI%<F=+O<EM=3/i[u,n#<@&-R\K>-MKn.ji-#n'1]?-ojmJ2[:cLY(qma%=:XE`,40/I<bEIrH!6eS8]:WBUhQ>8>>qXs1Y@e<tP
%q^!$ar%"?"j:0#,bY,6;7#fA+Mh1sFD@ZshoI6,gi=F,C#YYTW@/k&m;?1hgT>Y7.Q0[dkH(STFe+(Mu]a:L%4eo=SEh\k8^B*"U
%"X8D4$m@VR+[k]RJq]*65qem*46oUQ8CF1^?t'/*(C'M/T4AjM]GZc8gUshd)A*gR,+Vlu/Q'8pmK&(3!6[RF8MHZUcb`_`9-(7.
%2TYG0/\St:T_8+;QM77t)O$%&jQ;kh&QHW9DYi&?enHZS$(T"@W6e[;AIut\!tU&8G5po6m8?G35h9jN2N<p>7Lua<asKRmAnc1k
%m>6TOhtd_Q<MrOD;+di8!Yt?dhg$jA]8OVj/@Das*rGL8=ZV[7QV0gpF*\c75gN4OLZK@pCPm)ld[r):a9TNKl6PD1;B;/5>A>6Z
%.-ebK*fPkmhml;@]\/:"n$;Me7/JR5pn9%96UNMUlFs1A;<K]a/qIJTONpX+5_]f31cm<+;2df/MgdI07\h^&-.<JkI5<;&J`f*V
%aY^6LF1P:G_ZFhtc'N%!5WnS(BiP?I<>6`Z1V8r:Yc],_4n2h7,jN?.S<"i>lL7U:EPW<W,q;pPF-q:\G(A(\SPV5MW(6JU;'4/S
%U(`23:Y48hUutZd-"?=1+R-$`rdNF-QS5#EAr0o:h"B[i2f@jt&2T9ol6l%lXITk^<:B<g0i'@t=L_TqkY"]l0Z6";C&/?>/6ooM
%8&c^"PrK'[aTd:D_(4BA$&(X]m<8)L($*2p`^13ECl5(cM0bW,PCoMgL_9'!/flWP%?Srt`b%Z+d-=*-FnZ.g:V)dhf&Q5"$=]U&
%\7fRh%qdI&F[k3K;O=APZUNM;c2A*"b-`;>q,Xndo\U;1($WK#NPLri='9n/X;F!Jb"ec5=V@MHW7qIj\N!0&dTuINT+6pq.1dbE
%c=L'd3!alsYWUFKa&C$8V#ckZ1t2([N0Rh^34<5NH;_pEbgm]*d.NWKH(26=flE@S\S7q/FP6baE61O4-L,`S;5#aXq*i%eWMh--
%7Su"ao<1q.>&nN+V@q2tG)YTmFYK;.f)ppdUH%+,5EVomkYSZ+o"QN,JBT:9#m1&,"*5oHBB63K_D[LReSib0n^H,-/e]N9,L!`r
%%lW+M9aaPm^$5AUqW,-MU/d*N'YW/4:C'ZZIgOPe$nn6'<1JaCYlG0-JD^EA"rY?HB\>lm%iR+-Nr-sUEH.&KAQY]DQgJmA(ih--
%4M]V9_!%-^h5)tE9eub&$co43@dQN>^TL6//_p^J#3i"KZ\44>_J(n_(n"20<M_NK"lOu?pbLrX8mbhnqSX52\>jh[)8'J*L(dS9
%>cP8Vi!AU3.[j)MP*BMt8EZClA]5>m.Ls7bk:/<ihXj7n":JM8R<7_c<UR25Ct\l@+#UAoV],kdmPSep,/=U2?bq+P$d/;lST]dU
%JC8T:A\S'W\#>V^,X+W%pA?TVl9/FAZft)]QF2\M^s:`@h)LgMn1Q/c'HMa#bI@p3"=E?$3L'UES]=Mh?H7@K&B^Go7HPrtPp'3V
%S%50\gQU5,qkX#rD$mH.(H-7t+<c7Qm((_;;_'1$8#O)0&):3!_o2Bq_=u)IH"sa$as-4[,_[0b^nP`HLfP([]SJCCb<=r<\`Y)3
%Rf5tb4=t0;JI9=k:jdk\3`-;[`Cjo`\T]N%hAGA:ZVH:F!n!.f!]#c1!3KBnfMLm'>0!BFf5b'V[>Haa)f_@5H2ah@a^+_Ph9"A(
%EZquhOigunRGj&iU=L<.`.X;H9\ndV'RZ)J;"=/IqdOk(r=))79:dn\jJlHVe7R=NWe1T`l26X4!'cbhJftW&lta]UdZ+[WiDWkB
%8sS+!o6QhN"-$]EpU)bNrnOg`Y&:q$c7lGI;f_*-b'`nLdpt2Tg#X4c2^d>bT^#60!EWrg%]7\TJin7kK5`r&\T$!<R(`m8]<$-5
%As<3s&u7i:+d]%n#\7TZ!d!YO%$GOIQ$>@I^7(o,G'b"-Vrks`Vo4*'U516S[H<Hie-3@p\gFR3Xp]-D#Zi^hU%Z#1=3_$>RB7Vb
%2pR-1'[&`':0#bP:(7J5>4qCH966DII3F>Ae&]M^r.A7JU23`i%H*0]3FTc#O2+iPg!^u-fM#!mVU93ii:SPHE%gW3ON>@3LL4:D
%\>&%^bD(+t8.['AR=sI0j$WV/KeF%^9r;kO!XSGhb[#VU\20s7$IA0Tp@Q>2'UkC$]_[36mYl]CH1FhkB%a2n3G]W9g"6%F[P<4(
%AE,SVY$BALd!Ut7brfpC!,inPoR[(:4-t:"et4_BHK$j=%9PWU-!M4k\c#\kDUDud@`]a4^tfN?.5TM$4FPO&.e.Mg1n!mVC*H*[
%j.U5!Q"'T(-g,9mVdtP,4EU.^77e/DeA0kCAYH;:&j_T1"KNk0AAL[2<?CB#la\[<SgDbSjqS.hCn>`lPUHQn>'D7hO].;T[]$e(
%!b5<$e_A9l+JNG33k[9p"-+qfB9R%bdp8C+PQ9u\M:3+7XqOgLpe&N^*IW3B%G@8YSJF$LkG/]s-&0U+0&d]:`_RRb>3t'J82p"i
%.[YCaoA"b(r/(pF@N&s"Ij#r6Z5<c-gljTo_U\H"#`-cV_7k.iU+n5lWl10N$FT/`\urDg@*2ffZPM=+ZKnQk4'aO`0KBRdn//'@
%hE)&)+gRCX*EI<s!/?r.[6A\&kmma[6A;;EKl>*(-\JY'>gL[-j-R^'K-Rm*!P"uAQ>+T;0>[3>=V$Y_66t<)hh9P0/39eDGa0d\
%G4_6gp9HTdL)s;&HI9QrasHiWM%=JA.ArfKHa@2GHYEi("m2\hA:YrX^&kQZ.;R+0ZKK+oh?5U4gCnM:i%bPuW!Ce89WRDqUMU=H
%`0p7BBX0th2ddbPWi2%Ee+(M;B9oKokQ]+%gE7+&H'e`,@'e&(M7o#E6mNh!^/!+OHlZ!IGFo1D(T7f&^3OY4FB$t%,''T3AjqrQ
%a]`c)nT([of4YWL:fN#3;K^=a"-G<aP.oeOc('Hu[fRE53P=o;M5N>nUCGKfQa?@V`_JW@jRNDmPS49N_pAOLJa6nXQ<Pq#q;5Y2
%/<1ebn/`Z=)'&aG(t.XEGia4XQ,@U:`D%C1*Kjc(W9?j^$.?OME$Of<K,5X!,+SL10R4IMG)4"0N2k?d@qN)-UV?-:gUbXdgo*H)
%9YE%2D8,V*RJB_;!.R%+j%*dAq8S_4K./`#YR/ic8ba(*`*cDOi<I?a4h!\)jNLjMm1X]ZauR%Q0;R!/bfiD=6F(%4O2]2IYC%CK
%A/U:::"D?OF-2Dd)NDTcB!hE\X7:-h4q2MbdaO7bq0pm^$M`Z%&#7PBRPl(T2NuO%0:6/C,Z)^LIk:U#BT,>a\B<ji_heB.K&lU8
%3rg?R=5],gQqPHPS2_^.%fumn2p^q&nA/^(?SemfHi\\UTW^pB(cd4Ub9Cp(TbW;h>NfiHGX[Y/#J1:cI[UOChE'SY,7;1P+.0B[
%'5m<Y$)($mT^J-lpuK/BbqgK"X8CgV1t2LZ^n(l-i5*fF&>om(nEVt0lH-]YhX0e7"9*rT8YXfNcrZ?u&/Z?$(bPhS)"\gH!SlYD
%#@'<%b+8\/kTu.":,;)*<"eluM'\W_3XNT?qfAW[&q36*F8B?8^*'R%IZhd2!suIMAn-lmkK+@!5'[QHY;^_!`t.M27#8%6K42t]
%QO.=8s+^^d7<mXN7-Nu%L_"'8:B\HRZO-3VeNaXRF7?gB8@;a9JEM>u%VuJ>&X=<n9tn1Y0TD;DGuZp6P#%EN4I<^1W$\P31M\c+
%1],RUm,%1-M^oh67l+3FcC%<h;6S)j\F#<khfDAW7P25(6[aSMb?3-"p0kM543O4-o4<fjBYjYNk@%Gh<5`2_OEP2mfh72bRC.MA
%nF[/*_"UV.H>YPI@;2'+[gfNfUk_`#021eI&-HL-.!kSmFBj9@pkW:X``%cU-g,(!dG-NcYg"12cSnqR'=rLC)ddH\8.m#+a[*_j
%<9uUS4i<+c\gd^8732Rr^rn&\6mn>:"V9Dgg762c:LlLh.`KnhPpH2..J"(Ffn"L/Am]=e1ptZeN5kLl+"4=S1)eIG;`I[=,VY#F
%fjo20hRsl!iK+^%]-pqb,0aHk1].HI0H\5^:q*$I$cK[5+FN:%8oD!S:"JL3dHjV8)G^W?dqGGk/@J$kYgRBqKs@/qIPuF-3\iSL
%ke)^rN@kdZ);R5)2b)+lk0<+,H5oC]Q\uce@HGXf:MA<MR\qN&Ect.p"4kqQO`HpuN&9B&N59aq1kr=8F(>"!pgT2h>#7o4W:cH7
%`aXY-na%UV29&.rbEr]"e&Kn4\RE]aKbIt)nfB`]>K0IYI!KNd?3!K4/2ENGnaaoc0NP8ShK[REE5l(qj>UCTGLsj(fpg*.a1F.I
%LIN!?K>sh$CYJQ(20^mjecTf"o;5\I[dV3``_JTr2"l0+C@#00F5ns%s)-o@hOO,LFo-'H\qtKl1!e';k&I\;Z6mgsPJ)0aD/uJu
%0U$-YGr9"V-=S1hdL`'+"l@*";t/4I2atTY-WA7/S=8HSrOXN/X4BttQOCPWs-t0uMGNDH;n63)S#V+AOm.1<;`ENBTVJF'^gq30
%N"&^,#Z,^hH,@L*K+<XunZuq7$,Qb!Bkk8WbbghJ@^c-ZH=dE6]JY%Ne@?GEmt9bQQ#rFH6Y9dkI>r?mn`nk]3IP$YS'PkPem,lT
%8'R<s/&/Xo(A4'`bmp6=3A`X^R0k1+fktY?INpK%!#kI-Rd-:gejT8N<'KW<f\EIoM<cJ>42E*WD^PSGp$a7!e9F37?&XajWAJKS
%3@>K3PEP5iE)LgSU*mG,E:2f/G>gM1_WJn&:?eKsdXRh3:<(bQf4']_i.`D5p$T,!EQr;B(r'TN(2B:W=\^WP0hW/Fe1A/e<R4RS
%LcR(Eg)INVS#1CqQU1Z-dXL4)b?O#7@MsAn6`[K:poUuRqo\33%`_U7D2MH5(&ZGtk7Y"(A'Ik0(Y7#?Iq5Zch,3LU<N^%I0[=V(
%Z@PO3."1Ehc9.+kRrrc;Z$BI/S]uZUm'T9b,#>Z."n/q^bI+d\ne=0lh/`4om:Fj!ffIWrb;Lp6)n'HFIKlpJ/J^4t]q*N@SI/5&
%Hh8mL[:ce-4*q:d8:,baZeD%CR$PEk(`2Rl,Y$IbaU=<MQ=O20?clAgd)BJ<EV;0X3ca]RM50(t[iK[He?.br2dSJR=<4,U]FTSp
%V^;<0EdFjKAgd8AIWqBSqtnZ[nq;-l=aA#4ca,:Mk(%_tp:9?VkEKmI\f?auZ\o+[%9MWGe9%NoZ&\.uSK>:Y96YuG0hj4%[o1T=
%R[U655i]:3bXjaUc!S%X4oD':1Wa\*Ebf--h`k15GO(O<\;/?.XiE8upH9QjbiPP9SqJJ2q0qY?(j(#K:#Lm#]KY/;4FM.UkF$H7
%0X!#&=RoA@k.hr)N?K5/`JsiIHW*$inM1p4kMAL52"6n?jJgI(XYtUD[Q38=c-B[Djm\N,4^8e0HpA\S^A#cC'=6F,V\j\rmUKl1
%-ArV9'f1$^:#BF).l)X7!+O`H\&4@/NaFhpGdQVsiHYVXiR^1di(Z>Qj.l4g%:OPF&d/fS\VM)p)%[U`Q[@`;l-0fW[RLr!7C.tq
%Uh_3<niL1"<8dG<XO,&jq&DGPPAeEXcu6KI_rYRHDjk_BUSkKL?at<Jr--GMWLpjgRJ8/jaX#g04/[YV/StjU;CP8sg/iG#>+R>^
%G]u5`b3;Tk;*k-QSB<1,26'ub25oZQ5+pb"pK$#DjJV4'UQ'FEk$B\.kaNF:VqV:AUaL$CCeEgDi9C(53-^QXqL]<`aCUIFLqeYf
%jZ!hrfS`?MBtYC>Xtm]>cmsGEAq'7!*HlJt=5e,LA-D&\//Q$5HQYt\8(2F,`Q?)LO8)YaCa>R[9d99&F"u+W/_D7G#.m%;m,l)t
%4S?^b<dLnG.2.)LSA'1g?DF*uqc#E7CceAX9Wo1JgmhV;a+XL2F6>0/=>\i]Na5sNo<H;&$*$7,b`/`;*`&ec(:t9PccY9Wjc%<m
%dq?Ob$,q>SS1gJ,8R&i>[i"/m@=Oe$^-)-',kK)'1@=sVijO3g8\E`D?IF#NInPO!B#E]K(_`&cadb@O(0W>XG'Yg4A1BkZA#\1(
%>"Ee)\XW65h5m0EbEnE7U$VHLT5T(5o_>gnbP8.n/s?])*LZ4@@j8fNL\Fs+mFrm*nb#6%9=B>@D3h)`S2'AdjoV.49.o\CKP5DP
%Q<#I/mW&Tr=QgrOSur@to=J<UG!:!X\p8Mu,*l"a*,kZ=a&X\i(<Qpea,IMZ`)s@H:oj>^$b[K;G%!$g:+i7O0/j\IQ3dTPa\@]e
%TQ"7s2@-ghZWOO[SAj@0j'0WV)fJ>'/t"3>Y;r?LQAcY6?$*Q"R@l<rQa["ejlQ"(.:)Y5ZB92("XD0NVO>'oT'=uZ7#s'(nn1b)
%8n7]Q]eVcqAllf"Dn7ERlkY-6WoKfn<P,Gd<R8`F\p>%^SQ1H3f7fZS[9hI*^1t"J;Ke#b7amR%*iu!)egk0U\_`m#Rb,j9NVPX2
%GS.Z=W5YsCKmKPE'6oAn2l0i^FORL,hJO@URNJ359lrJK[gtc_kuR#d13_7Do@mR(AWPVhqk_lWlh,qF:Hr2Fn"1\Yi.I0N3Y11U
%na)t;%eC4KN2-0(G:(VU$aT[#fR@PSSfH.DnL8&.*hJslj4L^.faG7u5"@6Cc0+Dn>4J#a&*Ofo6^_<(`eVhI7m!mnhWsK$,B(We
%7dI5?H?K#SZe*\4n%ZS!:0Yq6^A5^;`G]X^LNoZ8bjq%"Au&V01iM),Q)<JU<a3D`.GU9>W_N!'(4VHZg6B5Hf"Pm-6@3tKk[=>m
%/AP;\%nUr+MGu[uq0T/@^:g"YqOKV!,mc?a/_@(`DL]MBHfW^*d]<.t2n_La&30]R,Jm_lLEF(SAJ#-DDcEQuJ#b`CL2Z*i52$NM
%#OVLb3^NKfDe!BuR^ib8mUnL@1u/UN_t[q_3.)mTKosV$ZAgUtr+X[O@8YlUH`)8MS@ms1c.M9J^rkeZV:Kl3o.FMRTQq'^`WGV<
%H,_*H8M;U4^!AW(_b'#<%SJ1FX>m:l[^*2+A51VrJH_9cW0%t*(Ve8t>+hcQhFOqXD?R-ER_Sd\+6^Y:r6b@7fbFn-d]TpGV@W:/
%8flSeDb@lBK`CZo9J0XV/O#jE&b<"e9r:"G>lWSaNAB`.Frsr$-!\hIeMB8-o;L'sZb\L.OGEI(5qr9L1:hfPGk]nmU%0a>1V-5'
%Bqkn`&XY4tDb'R)`g#N+59V@"0Y2A`Io_#XOi\^`"Nfcp!?L&`Ro,MjZ1A/-QQ-0:24FpHpp(IG#YedEo@$o^Q@JD]A;$ic/H([D
%Y@jVeBFB#2k`LOQ4S]h6OD,neK&DEHIbs8pH@eUfb?KU@"lZeHdG8I@N"3!T0KQ(&%MIrd'BaR@0qZ3]?(_s)Q`,2;$ih1O3gM$(
%^%[Gd:%FK@nWVJ.3!&&1!t9C%=q(PR.6K>GIZT<iB<G@^BO12Zl^J#cBnD`.^G`olg]/UepM"ofOia0`lq!K$:_a'8lirGT%t50(
%G(O<ciau>Jp%b%K0<mj1Y='A?,5Zs-elUi+I<r#H2:\M&N/(Mj'ro%pG`-@"HgVDI')hK*:JKDsm=ZRb_^`l:]dNO98bEBuQ"2+,
%N+K9#;[ogmq'6gAK[sZ+h`kQ&HLbek<e+dkb)XB*10:KY,8\Okq4]3:>G:76BlWoOG\RfoLt*ZOCoWk=\g8qZW=?6,o.-OET>W"V
%'q7oD=+?dd%1lPoadSVD<\uraP@rkMVMTEPZ&1Eo#[FjN^9q'M4S;?AXL,00ZQZD(L/fE%U'5U\&p@"#A$#b2G1S7Uf3t6&@e]XY
%X=tjm9`dJFPiUDX$UoE'AOG,3>-+T;QThAYM=N^/=SDPNMm+B5XX9Ai>Pb*m8dd/%jkR$ul`oTVKT3CgpF<7cRjLhRmPB^TH]MGi
%H-S&@d3fNAk,FtQ@!t#RMR3VD=IgsEcWM;`=h#!MD5G9fEf5thN!<>*9_[;p(G2_&XQ4a=WN\]G,3&NI3;t70<nCf_7;SbHedJoU
%@N&>j4]niFJ-Fp)jBe@_Q]DXeqc^'[[S^*>CTVe,RGoMnKLS:u_eq*HVsCT'8]u67IMuLQF^-V7@_HL:9N*Y]=A*NL]03bsYK'h(
%AK!4'cd-C35*u.l'ikp+K_Xpud*?B6I0sH0PC[@0f#tPmYT+"5CU#eg*b_6)aV??aQVdkNrABo"L5!$;K9mXC1&gO]!3G.'KGD)+
%V1k?qk_=bu8NKh7a72u:S-UWRMqQFAZkfoJB/fps\lV!ij6[kQB(/-^%M2,6[9]<leu47EHKJ,QC';i>+_"1&j*@IuF:4;uQk<g#
%,-69e9-ff=.drdhS!p@]_U8]9@QhU^4:80@SpTh=Hpq/ZPAoeRM=h!3!i@u0LbUct6A"=^C0WHmX`<8NS<U74YIl=pRs=Y70)@Yq
%Bi+)V,B/*KIGr(:!7fj$.suT:osP*8ZIuguF%63=ES@G?*6>t]8m.t!D_/#:9*Ok*I,pK?;#PRe1Yp<Rk;iUSOq0ck^'t_#lDsX5
%*qNiF^/ZtK1+*@n6VFb2d5<s0[,3dbS]JCO,1@r]g!jc.CGZQn>L-*K-fWm@m6.91r7]+YhP@Wj.BJ!Q/>2%`RK,9\f0'%;oCgb`
%oGP'o5,H0EjkEe4]inb+'@#ZXe&qGjo54M^87&EF4(m9OT8gNt2$X7k708or$\U`fVtmbYC=\7]QtA3Zo1r-+\!]X`a_JOA&8*>;
%"4IlPikuG[BHB.R1/[5)lEEFGHL%S<:!TQD.IZNDoK9=lk+%9N!,1pa:X8*ro");C&+Qt'/P+`/a^`KR9VKPIp6]%GDt;s@gB_Ud
%hMCD&9TN+A:Eafjdc7etr8WLWZ:9&LRY$$,J_:F%TMSod(e%pZ+_7Up\IfQMKIpBt8Bq7Fa;mao9Z"nX(lHEH8D[m`b#\q1C`q3>
%Rir.Knf`OiF1OVMp2SKW"5#V4#3J8oL$=n5Fe'0$.h/SEfmGq(4=Xfk-"?(h+#L5(Qh6#J@`>XDbM#"Yo6CFDBPSX!&8PL1eR(D#
%@1?NiCGMu.X4=l$3\gB]W]V%><D8FdT*uh)=E=QJ<l_m#<l!ZBYn$(^<(Eq,Jm;3mA=-Q5BOJN'eu$u^SbSJTJ<F0%>%hB!WC:_g
%el/>f*EFn!6\pXY9dZVp72%0[;X+V"ZCs:-oP(H0+:(V'["k,:7C\];E3p@?1;CS7m`GlHUB):s8_PP[N[1:o.H-F)Ya.*?eNQru
%L4D5(c3.Zj!+Td6\V4@uoPs#tHhf$I[^YR#8H>$b!+05Ga6?],D1WeH6K]_7BFqFFmP,/%(mBNLa[K)U)aZ)cOoDj`]S$:hf5hAD
%i;hl3@hD++=[NBIl0GTgbMl;tQ$>hGZLS&\%FO7t"MY_tk(CCNJ?N"@m`h8C#)O4KWj6gpB$s]t)cb\6$3?%grILD_]5:7?:k%5f
%i%g9OXN&Hg1q;TnChHk!=l*!j2\G),k?7@banYO6LOZ,)qg#.BV'Zi+$B."o7";YfY\$4[:><^#?;Tk8U_(Paf:"H_$+iAU65f>D
%7GZ*>W@J['XS.B1PAf,k^$3r?Lh@S5r3Ce5T&)E4*Z?!2g]nG?_b\Q#Pna;s,*EJ1_GB_qBn[O".l<:j^kc;P9)4W7/!8%S?BFai
%oX@BD'cLmWL.HrF0:<!!22:/:\A^ZFq\B@p<TUpg.&WuuLp*GBW;*if\9mo@>Y*p#`0"[kp!RGY,MD-1XDm6#NPVDrHK\fg?E9k'
%.ls:7dG46+9G5Pbmpq&Q9Lb;PH$*6*!:S>SU2l<7k/;GW9b0)uK@!0%_)-Gtlg_.A>_<e!NN,M7fo2uC>1RN^oqn70cIFV!af_+]
%@M/1+'9Fs)br/2CN4Z952uN8,Vaajj=A]T:-LI3/9rZE,$NC*g0!!m1$GsTL+_m2hn#^uF(m\uSJ=:1imD*2Ak%#L#:n[nT*+Pnu
%^6RnuK32BZ@VP!^SK=4Y)MVq=CA3>obof;.P[&N1KoeTZo/PRiWRO8cP&Lp%jBNGTW]ZR7TW4P]>&C[:6>1lR07EAF@85&T)Ik6u
%V;Z*H8Q"R\LSZ$W/]=P[L7o9'7^*MBCsE;#1)t-@oL'S6Ce]s-F-Y^fBS>/4_qo.'cdFJ#GEH^q0D'G&3Q_(>e$]C,+(SPBpb\ki
%XkV/UD62CD5RT*qm51]K7gca!Oi[@r,M?O+bGHTSH:GT)chcld4YqNCoM",TTBJhDV2V)4Ot@*G@F,m@;:Nd^Fi/c77[!KmlRt"A
%2Hb9>D%"#c1tDnkkM+8!QB<:H?nhG`5ja\MYQp>-oWUb%Fae-P;TNjlh#OC:8!erPm@M4apS1>fAD,\Jr)$]>?'`O3b:\Y78^f2j
%K7csFW;)e*`=t06EV%$Sq`ot9Vu.\o,B/sm2o$gFRRc>X#I7t/0q#N%"a$5ckG`#c8OfjsRnZ3J,Gm_#Ts?9NLpVT#na!`gL`Y.E
%)jTu/7J^qJ\?'qUK0i,R2DM),Gij:7dpMoQ:#4u(+d`Ero$dBA1=OiV3HXe,c",GU#Z791r)-:5ng)`Z.49I.4k\GaEJdqa<\Xb+
%YN],H%Y\I;=17+^*0KZZ@ouP3pY*S#74hT!38:VJ-TQb[gaH%RRPf"5KUh"TRF5#t.dspU(4l`"Pi82.8Wr-A?!)*R5>`[E(>p,&
%]o"Q1gtGfcCo\&GMulQI253je+A)lkA4Aj^P#-ndnX6aK9ce!NA^FA*g`C'7/Al;KH)$"?i@E+6i@OreU=Q=*)Tf=$g9t9=[eN:*
%hH[!bj%g9Mcm0+D7\>CG=@oDTT^FRh*abjoiD5SH<;JlIlJP-1E-?()I,#Da[p;Y>BrF]&58E;^mOUKXAqeePk/-dDRs[^3U^K;+
%W0>)jSU`.C*3Yr3q'%7m:\\3i]p/>6mS=8A6#WAqV1i3W:;IHFBK19Z/9.W\<OF-%/j)ieW)rLd0?[%1Z";uD4'FETfC^<k[i7C)
%KlrDe0<d(u@:,tdRrXck464brc2l6G\F%F01kg,%C<iLJnuBtr=UOPZrOD`-T6nH3#k&""$8oBi`]?uA7Y@BQMrkt\gSF:?Z#5c>
%99r'G;L"<*]SXCAPKieTn*^$RXIHeG%sn+0lZTtKDSH`J_1K+%laGIR!9&?XFV@b?=\ASEN](+NV%qY>d3l$TU5h.5.(PQ8`BoZ)
%m0ll"9pK@LCXTM"-.rXdqUe6j7lK8j#Vr->W]GO)>g!$@*F3VU?'d^+&K;)-f13.r0]U?Gc(o68$T0O-FCY71R"%<(Hdd^L>b-`5
%h9A`-ga^uBiMlNErJZ#P]dTV(71o*#*GsS3U$>'f!t=I.2=pg8iIpS/RhpuA`p;pH2V#LlmSDTu*s%'J[=8>*4I^!14=Se?*uS""
%m@Jrk-&$QPT+h0]>q)>>[\i<ZO10EKE7%!f.a$6;a.rYLgBSu_8+XnED0Cq#h&>QLBCrsdXeCc(3VnNEXE0EF]"lAaj4!n&q7,E(
%V*`d's4CFZFb\4+ZI'6*7ajSVm5fH:/[oo)VdJ3`f+9ir7F"Vepcq$0mab*Q<@4htT&4rE#aT"r3R@/9c1A&,I*OQSPC7cZ$Dcol
%2r-@#_.c;!J>G1gI;5IN5`CGo;_?Qr18UI,gYbt9c\eVmH*mnUTeqd#hP&iAf()dd[`0a$VS.S3P/7aR1UOFK'=[\PhR5*;kZRe6
%>lceC8`ZW@$+cYtde`7U=pk^1JN!/]!Ff-aRIpHtS\>H=co!.:]u'cb9t'$i?95SuTJTiAGV#rs3k@97)EjjrL3Vg<-UGJ^6[Tcb
%a8$Jp?$hkJ3U+jLcF<U#+$fEXa8&c?.aITVVXrE#o5-\7#H@N`j*]jVdlPZ2:HX+%38`l)I"+[W(Ou6?hcd+>Z[@8(41b2Ca8%Wc
%jniP:bK-k.kM(BMmuQQZ]O*bG\+qQsZ>#qNS54"(PT-haeic6HS8Zrea`ft-`>#Gl8/5?P>FmFmlEj>2+Z,ZId3saW@8*.KB8NK!
%"HC"<D.P(6G>r8mUfJ6Ve*>S1/$$#Yj2^f?r@`=Yr$8=B"f^$8ocg#oR^V12Ro?#iC\G#%S+b)Sd_qD;GU2d<^%iYM>.;[j-,7j,
%$k^g@.$UpmX<+uP(:pji^O8d>otnkt0O>[Hej@uc@;2=jS+j2dn=HRmg\!J"hT>`T3h_qF];KtaQu(VdU028<.1ken2eP=g^Z:G5
%VcW=Mk$L;q[r0+FcQ0XpaSlgs1^Y;9qh<2Dih2f[;b$6WhIu@2O_#t6L"8do17AHeFQP\qe[C-4I!*i78\At?GF]M<aaQ?4?8'_R
%\TXV-U'URgF0CP%Ucnmk\^2\'J6!*Zn8#qY\;io1][40-d]n7?XK&4Lk1?5I*9Rk&69qYlCtj4leR:;Z=A3o56MHnbfesB6OY_^9
%c0'#hMAhiT)*-0CSbG0_bts@uB@[u">^k*of;Yc%47>D>/YS_6<^#'QM7R7H/?>Ar;<J11gQmG%`&ieJosX7DcDH/lQ<.L5g[YpS
%A1hZ'T>@nZ#?O.4Zu*90Ch&q!peLDJhP8jrFfp";7rOd,3#)Ip`B'pq>/.iJgtj-2$T#6`d5Pn[`%1A0_`t?j-FnN-qY@&NKACT[
%3I'rY4H"S`Z]AsX@\j17Z0@iu^</ksmLL;j></so>tPQ"DapO:"lNfN^"!B?QEEmO1ilH0Nbge[]5C>U>t+fbg,e7/<J(`N#f>fB
%jJnAWn/TqJ;Glhf7Olu-<9Po(TJdnA;])/l(,m_H4'ae5CAR]9`G'TcbpUd7\%HJDYDq$'YtAX\8/6f]mY?NEfR0<d#Ksc"YnL$u
%Yh"bicnQmC7cd?7iBC5SfmMGus%0<GIMR.VYa!ZWmqVN-=O=/+BPEo)oqq5BeJjdY_(SPIVg:_%KY:Dl<=U&"S&2(>:',jr5N2NL
%Xtne:_QNo$h"L#m\.*?1H+74ahOp_6d(B<6GdH@NclXbcni(E[JHlCEF&1sgQ%bE&*K<4_s8VH!Bij(\ZShTmfA]#F8#@c#WD'/:
%'/RWdSjtnQTP_.mfRWk3rT4%P)`o7?P,_J]Wkn)2+$[H!%g5c[a2f*AS47'UqGtA\fNs1%6kM*t?@4kZG/PEkj]7ZBV_%nGVH-'N
%:9A'Xh#,XeP,?'$RN?`n/.!-'^^qG"Bl)UB;6;##1]:5L7YX)'Ef7h\#)L[o[T$2=!s7eB-t7'`8S0QR;7CjT:Aa2L[Dr@*.l_'D
%)]If:Y)=GZo/cN5)Nj)JAEJ%/7ZB8]O$>F8IVf&.]Xg*E,A-)GE]ct9GsgbtFNMb-MB2'@d(losSYE]kdu?@DY6O;47qQ(#*#q.<
%UdetQ6uC/4OYZO.f&j17fl:Ze9pEKXZh1)VrB_[$D@DC%\F8^/QO9naDIuYN2JVGei?EMe<%IUH?fG3n2;o9FY?ms>C1kc0E2iE`
%d/9gdokI]]6sKZ8J.7JcTa]ll?+'!Ln5WUd6_7Y/"59Ckee#o7gC@_Te+tUbc1C_+X.DIO#1)S(:c5&X\&nu5f#AF3^&<Wqj+sEj
%-G5@*fhYRS*=LA:86oKdP7L^W(f;g>O&7@;]731jK)YY@o;qZ*4!#g&]FF<h1NX)S>1oQ31Z)p;64-shm4LDW#E%#_`N]%Up>foi
%""3h:P2/.iVD>K#La:ZE1[ce&$QUru]iCQ"@nMo4q/mZKZ=mf#8[?EA)bZ>F)B(b1(9M[(a`[ctm[luBZpP3SKg7?Xll3f@5*(\\
%oD#Dr)/OiMhGKI,.^-8M-foJXS$==%9scVClR;PG-KTB<ZuIJTe^ZfQ9Zik"UNX+98]p?-Z5>>GYIDGPE"aDlWk3=a0_G7m[[;s_
%a3*<hI[,4XS&^9d0)I\Xcrr#kZ#4Q:-*'(1)p+mYS?roXEY!(fJ'S8\da^X>4.H%/]3H0@:3u_dlJE>NG]:,uG/`sM'CK$\(O_B+
%HLkDd;o1S7"jq+05?pEtZL_\qm,#5E%=`9[ou<bBpXYZH:+rbf4Bcj]>R,`Fq>0X0nn.IVk3>Q[GBJ%>i>0Qg4T(@J:?N-K/@WG`
%<DEneOT9T:l:(GVG3SrupY(Rfjg;YC]6A00mFHupg(1OQY=osZ9=oQ%/(sCPbf8L+nY!7ch*"s+T'V5)j?)23qR1URht;^WI'pZ'
%gSMHEr2]4!GGrfX(ORdrThS(K_WbB@GH0?hX)h>pJ*rWhQ^g592>QsOHa;Q&Md?^/T6hm]*Be^Jp!no#:>se'LV7TIIf$ek)t-#W
%rmg['0<Q,![J!0UG8O\9e*X414#ReDg[KXj.;\`O<El-mdEAqd1bZ=a5KBB&l'M/*d;YLk,o'<mG(MZe*OK1X^!P]'MP7^@lQ"+h
%Fp.!c]5Z7]%OC*Ie4J`#Ki_V8Yk5$]osK"QCA4]d>i.c?CZ+c0<J#5#4i^]3YNgiN53Y9+no^k1CF&%mEAhSiWi_LRcec)!L9.IX
%eJ)rKZ=GcXB'<H4KdE565ur00:N_@tI4EA@CP)h.p?5GE_0M8dF+(f!0r@uVD(59i4GeJd?0lN!N1S['Q.8qOe]3j*=(NJsA:ZH^
%p/P\s'qAUj9'km&pDdgT?WYf=hSd.Ubh]Z?ql4b%WXV+#@UD]G#[)Rm>[SP.I8sEuQ-<jI`4d_g3Y,(-?XdAB<aX%.41<)A+>K1f
%qXW"inKmm/Ab?dS2WIErX'/pdGE4VdYD[aMgkgGZIEG5N@nc6i>/OgJeX.!HWj;Kt#Z/Dap/Nt-n]-0^ohXqTlRX)3Z*1hiD#CP4
%>&Rhhcq1:#fJgUANKVpqQ.6[UGiMKaX30^sW%K2P8n).-!u2\(UF,[L-73rFFNmo*5-_:`Y+GE`*Dp\7`4i7Q^:&!PE?t6XX]!@&
%0t,$7ideA:^7)WGf,:QUs3nlJ5AXe9eW;-3&c;l+lmqh0LQ4@A,>#>F,?FSWs12&DF/kiNFe`:]c[$I;R']pB?i(l@iY(main$W[
%(j?_0qR%OD<q35[4Eii1Yq>*]fVr%9m4E0SJ,o6jDc]\n(pm)L7Sp"5?ep+Yc<@n%!WKL)WioCK%b'"(>M[1Q#3uqpS)-W`.fNRO
%R24>tP;XY4I*R4UQN]E[S*HBc"tBQ'K1"N9)ufZrRiR\NFOXgHid^X'*$Z3uCRpr$p&Ad)8p)Z`2dec?Yf6Vhg0b>hli.E+VlM6F
%=(P()(YpiCn\>"qlrj@lh>Pj<pg7lS].^W_2W_o9O4F'7qe#%Ga'1EaRp%OCI3eA:[mg](cSdV>n*8-<3IP2N)[D5fk+'0EnsUoZ
%dRqiHS<\H%.P.CUp8g,1#]B!QJkJCEh#]2`6+)kplD6>Z:-3g-4f\lcYe?fXCH7?Vhtu3&h[GpOegCHGOAIHBX]Fe0]hg4oX\KFQ
%n!J:\K&]G@*4,i]CT"R!1if<D[hA,E*iu\[6eruo#-/n-N]N[D=UiKXB)=c.O2Ko1PK;d92agRZEaR!)0j):#osYE@CFcX:2*15(
%c.OWtRh]C$_9b%qgSsun05u1*JrUPH0dOcG_`Ck-5LduQT[pPt-Y*W`gl_SZYD0s*?Y.,[\=XTi&[Q?^`C0/e95&"g!lJ\_@N7'+
%;IcnsKO5"An)$t;4:Y8gY?g\VK@2!&@c.rX\SMY<cf:5ZSB&(LIr,DL_%P;`fDWlVe,;ChV=%^[G]YV;2op:2?MA@L;14,/Ir2c0
%BBd1)N_r=&^PNO0#S*MIG8&NudXOCgScdL@Rue7Rh%A'3[+:hYdA?8<hf,0UftL7/LJHC^BeR5],5eh:1hpl4ftK,SG*G-,Z63H?
%qXQeNK?/8L4bfbXC8EqFLb<SDO-5c4#Q$D9P(&\&cAnioTsO3aMI=b$aMG4O029c:SB":Om2=AQZ%KI0j0O:LWN+3djik*`?,b%A
%M,_#WPt'K@>hVFQ.l>doq<=EV\esjKXj6J'@I#I?g0kHc]6_'OZb!\H]b7=$*-])AjYMPNh*)c?O_TKS^:Oc4(!r#3Y;Muk=Ge4R
%-d%Dib*U@"f>8J6hX,JfO&&DDX.OUJ4ZKHBGH3c.)b2X,]R\q-nnqNu$XFc<X`T9rH++ff*F6-C8"Vi[H+7'g.#&V`79GBua.oW&
%LJ0$_mbR$U7r+aHlH6ugVe]r>Da%E1S9t%plI"@sKRUL]:\"pd^"h8h(U'B4PDb7A_50`HIOV)rhH>5&r+[Z:n)Wi!m<_:F<k1'C
%V:?C:D4,Y_L"rWp.=oOshHj)c^D^rWZe_nuPI'H-K:,de't9\lp9K&Aj-bl[EVHYC5Pt@ugK3J\a@aq;Gh7?#XYej-NuY]W[X2WC
%a[LF4\/=$B[j>>*9J=+>k`R/Le$BJ?:4!bN"N0AcI-\qg/mh>uSi:lEhKI)dHdh#Uf?Yc)F44Iqn,D#'?+ubFQ;Tm#^\XVjX!*cR
%ho<-sFT:Y&qW!S+d[n?`kOY<49'Eb;Ws`djKh:TX1gZ/V1`<ut]sM&)3DA/'UXSne`CU0h2XPJq\\G'%10s:@?PS.:C'JA"]\8dZ
%4)(g7FQPuNZ>N`jk>udC;_%@!Jjut&@,P)[5-7iic:o"'B'SM[SI?RShF4a7YQNJbgo=&u_Gsr%i3L[.4mWj?2Gl\%Y"%>MmI[nP
%_4Ypo<Rt-sCXt.j\6f;Fbo!Zin`\B&N\I]Rqo#*m%cAI<@(lD9D-S.Eg`6!C!=R__.^7=?]%14pRk:tLooX+?R>OXshl,LXm$$>X
%PukGJgUb,7m7*]ZRjoGh)m^E7=o.f;9*lHlSi./D>n;;9qDeE1YLhGO?"TWpV3$/*JZ^NKi]_E>XB&91U"=%Zc?2HNg-)hWTsEQX
%J?CiNWCcPp$uSH#l6AR^?OusJ+G7MU7YQn2:qWU0q8IaK5_f&u*k*)ELX*6$EBWUoe(,V_U6M"s:S+UliQ;.f^$C*Qn*=Raq5H^G
%@N?kOmWiuhi*P`*lD8B@:D0UgPZT]?d]@mY2l>BYZ>3@n6pp,`p+HCm9hc>Em.>%pG8]VY*Lg^gaeH2g9$kHcZd\A';JZ6:M$BEU
%4s&&O-`rF7FJ*&[R?u_WXWrb7X2[4tTu#`:1IOiEh0d03nJjM7Z*P+oq1rTZIGg@.*a\3%G3E*YM08D%F/<j62?kWf=<2-V4!h.L
%5%8\Q\m@8EpVNSW"tOW<qC.8Do+C;%dQLJ@lfKGcF5cde8R.GHFH3E8=CI#=/>YIVLLPu92ft\QZ$O@r-i*jUN2Kcd?oBsXF0WTj
%@+apJXK[U04mld5".AP2031'[NX#6+MA;G\[I7.tYZcRW4&ni_\XL-/"4_.jJqjH&=q+^*YfNq-WuY50V@6JoY]kn6cCm`[Gh@(V
%dpn2b\iD*:X',Z;qkI>SV;PeNC53H)jEloKL=%'@4ESEW.VZUsmBGe!(ocG%@JVIR*DR$,:c<PlA2anG^]b6q=$)oh\\;])GW;G"
%ZYmUsh?e`'R5#C<m%#J"1DmQM_8G"&Std#_/00Y/N1K5C4[d-(<YAikc.>lh)l2D#n("MhDh]]cfI`7YWZB[\&_&:Tf_bNG*Hp8B
%i8FZY$:iC_moo*tU*=MmW.Kf<>H*GB)Qr",<@]XrhV79P5f(>VXE,?b%sqs0"QTIE"V5rM.280Z=rY'2@E32MWZCe>Rt@]=?bsY:
%eIL?@[/iY-+4leD-i0[[N@3U?]043#E`$-0E,[GVV;Pd#d@`jd)ReR474[tX\%po*%ste61R2L4Jqq%?*VT%<%[M.?hlGJ)n?ana
%4R?A@0[jr0/pK?hHJI0D^PgVPC\+o^"V4*;ea!u5XAu0;oR_k3Wu]bmEVgG4*3`2sYQYQ\XgGt\G"IW1]\m4`nSKrkTNVL0H`Q!#
%R;ip'ls9"_T8Hi;<PN1S_hg^RkE-)m%L+jLFMYl'jN'6GfYil^\/b_`LX!dYYi&rN<n*Q)OX%HCJqmXui#toE$\0,*i*e4%psBHj
%p,7PgREZ!@&$+.2>09st[5M"#_qs*q#ZMkYi*gQk^>jGJ>O\k3dcq$A%T)Z!Y3n;Z_8CRBMB`p"m#W&WeIGfU)6r+.^:9HY%LW:k
%UD5oXSYY$2if7.1Yd_ZN3,'TP4=k]Xh4?X>ACFTKYd\7SU(=%sm=L,,WuXq@f$NUa&$nH"-g:gGqr#OJ$Pdm)o<*:k`'E.,>R-\i
%g@Yssk`AL(mL.;!r?jXA864eK[d>Q4QBoYYg=7h["rp%An?(r`C[H!1W&6N]_VP/9?g0WuKlu_BpfO/9R%eBYk1&1E46N>lB:k\V
%Jul,SF18@/BL^I+;[^2j^6n]j_bGgX?9<Dnmm!D7DLA%d\FObgg3eB_q<Z^O/'6;aS\:D>HFn8O^&2aG_X4sB+5!ch[U2#K1qW#>
%NG$L?c/U7bFks]9H1:(ginhT-ajUc]p@$Y;:T!md4SNrC`iT,]k0X:`Tg)gD\FT!"IrY>SlPoTkr:/3DEbF\%S]-NMip#dNq*/6A
%\2!UB_q>jgkiMdi?=-Gb^%V6K_^AC-\^sJQqYf"nF'%@Z9@:c%Xd*S[ceY)<p#NuBj5[UtqY2=aMK<iZp3#ro`4gS<0@*:=1j=)9
%n['0Pq(l.ThHpZ2-SLNWJ^9sjFs*.B>q\G"HK1?9msbA]I/'PG2CQ'1mB&E6]=bLnZYI4!7VKT8(QOR:F&P6BqI+^5ir6Wt:S'e^
%G4+jE!GcaBS+kgc*pcVg+hdP\QEE:AD>oI(K7LJdLR]MJ[Cl%ndJ<"]rZ9JT*L3Js05\ac#'Y!nAWG%%cuOIK$@ibIX."u_al^g\
%,eeQ8@30iG\/qd@4C(V>>8n+Olr*Cfc9FCuoW,S;T;:Turu+[=^:"?IoA[p\>(#>dgf>4d+5q<+q3l^tMN(B3\PE]<QJ8U0/oOH)
%o*C[I+)RQ"hg5.kc.r/ZB:J[QL48TaM59-VYl\1:gW,]c.U"g&7\mqk;rQ(2[WsV)8PQPaR3ouqd][PS'9e7\h=s=O?Cg7dl%48%
%9Y[_gZe%)N2V.QgPT&A:k18\@6X/<4hRmhqc!UD<-L9s!)?*k8K0S26s"IOP_q*U\reEu5&$Of<reH39c[8lDTDqV#?FmlA'fcbJ
%ArF%:e*jStn&uUJnD<NnIqWj78@<_\.1/]+3ORPmM"*D=399bQ)Da^dZubM65OL)$BS#jeZ8(O[*8\<Ta:?+sftaBND)M,$%`G8P
%+%5tUaZDAr@.\f=4HjsK`CI:dnS(.-XuXBM(bKR]i,t^=XK'J&X4qifr0_dUNRQ)JY@mi>rK(jN>rbI%V?O@16XlmRUa^#[rQ9$n
%e(oJW:q+QHp+i+3WQE1XX3'GmeOusdO"Xae]DBA"qQg$4q=#gc#Hq38beDqY1\9UlT%SPc0jBc1EGL&f%/jakLX$k8h:?t&$?g(f
%2a7uCJK+[B9P3@`SMO%[r"Dg&_cceLja"LqlXsG:qKCs)rtM*sT22G;pD/fHq"4)h5!:7'p<7YJMjIc2^JX%7e+1u5\^d`h0g>!g
%]K>TG$]c+15J/r.6$[A>dCbAR+)`:_mqp3FBC`^?[]ji7_PR!^(E[R#=Z:hQU_7$aG!@Ceo$<#QCI)lE.IP:+(CTFNp=qEa\g_7'
%Rr^nKo_e?0bVTsQk17(5XmRI\5AqUErH\D'dF+<!B4gtjZ\U4=qo[>q\3J6M1qrJLr.Xh":LANCN=$<6C=20:'3`&TGJ9rfmd/C1
%B<LSA\hhr=:6s42H_7*HQ=ad$S6=W1G^3n@E>*oGB9qP2Ve6d/44he00CN8aU\;o@A+T8ZV73r&T"4RY"F9M9>X"8d`(20Olftp#
%5@;[gTKEgm&!-()D2:ZsI+1j!QtXe@/gBHN.pQ2,gtS>bL?*!75PS=VBD\VVr:Apre19D5OJ1ht_jkr._T-;ebrduMj#l.G&<,Ui
%Qe-.Val[[PmbEt8QiD\&4JpFaim?<49YM$E"b(R\l5]P#7WXLULT<q;+N$*kX^6'E2HSdb>2CdtgM:"jADc3HXPg7C[bfmV(7U9p
%C&TcP1HCHIjQaC>@="\UDobi_iW!]Ti6:-a(on:hg1l"VnH#$ErRi++,4Dl]@BO.]#nh6$W>>]#j2Lc\d]7`(rUOQ`TYgGgQ'Jh&
%cJIMe03pP@]<la)J,[Iae!9k:97K-'([/(!iJ'R4TginoEt@tF?emiVH263AdUep1p^%8>Ze*rLl4!)gJT1d\]GWK;%mF"Vc7N=*
%s8):a]XmfKq9eKnQg:.85,tH_b6uMcRC+!+5Fu\m*N56B$I%3oCA5OnACrsE?(iC$ec"ddPP)JIcT`sFHL_aVAXE/inYbK(hkiTI
%YF?'2eou9i2V4SiSb^'a+FPU8-F31;UK=LpYJ/B38EtY-FrGl/WEs?uY<:WcF8AK\?,$.!6#4\m#>ES1[;QkYg/KR':*CKfDBclG
%"<`S]2hc#6Eo3D#[.St3I/i6LVs3ICK7/(9o!JjrVP2SmH[kn_X`J82f</JqqJ#cQ>5YeJXCF)`M:]\/eW$9RI/'7UHEh0B="]f(
%j1m_Mmp2IdlO:QMlRt32jpKXM`:GR_Ib_GP]_(:E1Z58d*Glj9DnMLq4M-"8rKSt'#BOeMchf(#pe[PU]t1]hm@?IHUZ6XaIZ<Hl
%Rda#@(imo5_IqbuS7fB9YO11PX;X.S"U5hB&4=K]l\pDk0&)@L;`4Drq06YVFaFe*IXTYqS[prVb*C!2($r;G44grtXZkND=u]g#
%[Cg4ONert&4^;.ARnJ2nh47n;IXUH<WKW+hXrfcOp6$JB&M5T)I/1Q&/Epiu1Eg"2Cra9E((BW]53n<#rNa#Go',/mbI+4ZGVTi:
%*M1pm5%+4\'rr;9e%GrZT4o6#D7;1]MT1T6Zg0u.3ZBr)VVf1GYr*"1ks<k)X8Dk@SMi%>l,hq;X`L_9IIM$#U'M#a`XAY\l?T:U
%#>qAe:9-J4!tCV];e+$W[Ti]-ZUo;<Q**/TU[PS;Uc>f\[E]WrmEi#)m7r4q!gl[+gj/=ck'!4eph+/Q?>nV]?Y<tPoMjl4qST;P
%_Sn)DGAkkN)A$eak&3J23&Nq,`)"WR2:BM1WL8ePf;9IApKuqQ#gY/]Alr"\NaQqZ(Bs=Z^n0@GK[$A;*K+OTV,;??L&h7=]D%Ut
%D6-n;G59PI^S]V#]LZqgMG0Wc20ksb)[='cem[OTq86^*).*15;0Vp0"IF7HqtcNTV'iaThOo"91q!<@\bi(dN,eOdfre\Qa?\q"
%N`khbR9dE%o#$s)k(C.`X++G=Hrp3G\QG!K"\'%PCC!pVkSg&/f=fr&1Nc+.ROd3:_BD/R2WnS]f':El"'hl?=UClY92TOG&,r%1
%KSm?"HEO@Z_Jd2A_EKjSqVY#L]M/pIk=]R>J@"/4r>rG<n?fIU1A^W0n[O!1Heb(_QN(QCDn?i+;\%I=2s8d6B\XhS[lg:[X6.36
%9[1?*]89miWVN`)T&S=o^YV1r);!!dWL:5FVGm(^?E`sKo4BYIC>AI9hrh]S.tAs0!rMAbe$edQ0bBC7VsX0A/>B0Lk?m+l]DcO/
%nE[qqqYl-7!Nt.Oq1&@W.G]/7I_+iqkqa&a->)l1gtESS2qVjC#7`A9YE/WiLn/^=mEZ/Ic9f$i8+Wt^An9#@GM8]kmbijo2K\n=
%2WUIigN1:X?=V;iV[[[lLAWNLAe`6?g.iTCZ.(dE"7W\/UTQXgfhNK;`RHnY=VtEDF,&>'-XSrp#fYGPeWjaBf:T3^hcZQN&hP^(
%hS6D%[Q%ofVp-;h]"%H]j7LmmB(GZ@d[uT7>[BXDp$V807J.p341k6(I;NtI4l1FjkdH7'(A@D5N5pU8M&^$4BRF_?5n@\1NfRTD
%o0DU-fJMj/-0tqhdiCm.XJ=iek@XW]gX>iLSi.)G[eIf1Bhp7;gS8S4^2F31?OlhpG'hrQ1l^sB\ZO<KWpOM8=F8co\JIsWcL0]D
%HS%YjqTTk")0Ks!FS195[GQ/U+a%rglsJpB4J2R+GA<^u6_)>r&0!=eG,NY3M[sE,/jF[[fBZW&9E&YcbnU+uBt^\F[Z]<KS6l.R
%ojXfd->s'"2PS0'UNiPg+7KIFGh?eK^]B?\15pMHb/`T-YSOjB"6SW(N^`A!@+!QFYfOK_9V33K,53-t0G';ZaLtZ"&F86[a&mN=
%(`'ZRS2Tp^pDu#?P6P1N?k>D*SEh&gQ_ss/$G7M7KHTQQF3Km2:jje,q8psK_uFScnZ=seOX0[qiitLfp#5aRVY9C`."7*)UFWgF
%[U__<qWOJabq%8gISIQ4c5Lq3?t5TOIJiKg]s!-ZrPEW(ZS2T\9jQTSS3+%uQRWgAKPqZLZjZS@UMPBeEdZn9X,Vn_7S%`tC#N/V
%M::4(F&C82??+&"Qr_gG^Q5&#bllbGf@`FdFCl$!_\,ZNAom;&e%LbL)$B%W:3ih5fqkUQ4!_2ZD9sAn83=J.e60\FP:u'r_a2!6
%q#P+;L_lBc)J+^!o"j?Jkis&`@CodpBtC]1c_c^<eg4#iG\-b@lUILqGOE:?;BF)*,RcLkF$-a"q_j/3:<@=@P8>%@Xj%T^r7P+p
%MHfS@50>3\.5"<2q(#B^`@est?kur;J0'+gi!j`J+IS"mPD=GW`67-cI!]ilT7jY)>4\.fT_CRe9D>?^_`[9:hCY:u9./DDQEO$u
%QR/,SE-kX3_kO_f&l-9cbcQ762IA>fr:RS>Ae:?<E(NjEmd?u,&,MbFcGT)+gYFd*7H&=9F8c)eWB=3O"(A*MZr,J?IG:]85jBZW
%%87HCU"+(6$^[)R7djj7\o7-tG0X?b)eC/2D4*7XFZb#Z_,/j<%&>0Zk%tY?C5t'2pmhAk&9q`"?^8UHhJM?.F7?jlio'4giq=AS
%S50sqAnM5!7F8Z+iq=@l'>i5hm9+8#mYX[SpL]`r0Ubm(g=p:XcgE<hGj3[cf"gYJp'.`[o19m9CJEF:S%Jp9[*dU!4_D%P*EZdA
%dH90#GBpI+_t'QYXXtB,4Bfl(]D\c.\XGU^a5"nG0uAJhGG`DUX1MSK>!&kP0&`APWuk?#E1hchmBiPkdb8EK),QBb2UcN@ea>i=
%97#m_g<9Ae%=RfYgrA\G>VOqlce@-p\*&jDB]F]`9=jP%bSKqb]ku/:8^Gu?SirLolj/q7.qSU-m6`S`S8V27DVXm1@@_`TKA>V=
%r8!cdc@A2eO^p4Z2Od$ab0374-TOtV,f5O"H*6;CUF`V5i>4BOrr"_JmXt_]:M1q%;%hubkpC:DV>u*X3rJX%4u+dR#DE[(nt>d0
%9@FG.2]L`-/[HS'rV?6:.;+`2$hd'>8mgS22YIhW7T)7SWATEG=6Bp?.&=:W>A^bH:eGW:Z-`>7I.$S&jhbZuWr-e=K5oiGe_(_?
%q!%+Fo7]CC5)k4C3Xi@5@U@>OlI2et^V95m^A^B+bR9,HVcF/S]D$BNK\d5B>.`tQV6G^G[lNc&7I<"96E@`5^_R9b]6FF9G$fq^
%mQZ_#n[OYVX]Negi[B]KSe#P3%>/eJ<(OCH1Q+nmF!oq!Q%S5rg#[RmIr;CE\hWl^jj=__!Up<=<sr6*"`guEB/V]O%,OfN/,-NU
%k,lF8B2@uegV<aQH2<!ciO<kMf:VNfM_G@caq*%+^:djq;Ia(Sfj9,<$H$+QFEsVN;qZqPmJ\S1g=(b4$pT`#TuQ!'R__cLb6r^?
%\V`oP.F*Dud`2.FcO'RH4>ckGQZInR04aN8O7Jncg_P5.<klqd?(]0V5HK8o(CnE^^MKK.RM:Ai%N_3KTD(.FQS(d(cHR*p1YtlV
%T#`BgaH0U*"MD9q&9lC5C::hp?^SB^H$r-]Cd3Uds%;B;l/Hcnh]'p9Xq?nEFFW?<PO6o.\TDFnA,Z+b2"79hcSjL,G:DKue+h^`
%.rUO_q-;i$HDYD6aO)52F)EOCRV_<VQ)Qd81eh;G?C@7'@nG.>@'$%CR@7VZe,96K:&L,5QS__-mA)O%C*k8bP7%o8*UFm*4oY6U
%j5K(s`#k<nr`E::U"&,?]q^SIrV]7`s6k'sB_U9ErPR++99Tb,%p*])8F>.1ma9njA?_`>D=*?Qk]j<V(@apf#"IPkCOc3HT/P"Z
%\@T$?B=*)h4n`e@hRn`u56TTR[<4ocAFgm,IR'-)F)(-tV2+Q!X\C[IgR>T]("c0q;YrTPr;91ImDb98)Fo.n1\kX4Pm)\R=5PUU
%J%9WAl'=QEQ>U#Sg>"Z6DP!pO^O.*)4l=n@ZuL6al7R"218%7CFQsjrUkGX184I`K3]6k^qon'k5?H,]*ZX(W5AS+0RAFd;j/^0K
%=L:X73%WrSY\94MJfT"#Jjl/.&O&!o_4jZ(#Qhfo"cG:<6;6Y(&1fR:m+!j*A#g<ci$(Y:-EDe/37P`$^9b$eC\)Z,3t!"uRHNis
%$QJ*7S,W>VKaepE.l.B<UGf&9L5=4l<5?c'4Z]-TdJD.ZAbGodXjl5-C\<O0FL_0&^7q>>q`3AV)GaYQI,1tRl3][5C\@;J5I&\m
%X`k<DAtV@K^eeu=?4?0W@#iHA97-+U83G3^$-2-I?"'HLceQ-o1XQkB9pRSO;lmZk020,!0`[=q[=hm?bpaRc2:4:frV_o9G_3?V
%Cbea'WmNX@GXPheh#s,-k!DRTSK'_61Fc&k(U?9\RV"iZbt!P-F6K4K+Qohtrt;cu[3ZS\?qGb8Q$Fj;33i^*22h5p?WNr0RobWE
%::6(k5S.q<c=S<61WS6?QlQV=h!.W:(#b2'oe2Z9&pND]##T/#JFa=jD)E@f5+WsIHZ*W,%]E?HpD4E41M:>n@P=FYM7UIOe[m6:
%1TS]3EnB<7%elb_R@,J"H=*'>\DGfVh!2Ghon"Q6g2G#KT%#Q/Xt<u+4K1iWD6DNT1E.:r9:i;"s,:5sCZF*SHcp[R+/_d$=sWKF
%\Rcka^V&?X03it"80hK1a!qC1,h!m.e';b:q:3S+E5%Yd)8gcAg)^8US8g5B"to%*$Ehj.20N!/S9OIg]kVUtAkP1/f\;$]0VW]2
%@W'L6NoI]]1Y-4DcFLe;]Jtr/AWsoij_PQ1TC3q,/=VE,UGNLsV<R$^SNU&AKZ2KF7n!q8*RC$54,`8BaJ7SAdo>3M\5:),>NO8X
%Tc9m;'+#a;2h3JVhG?AiR&Ohq7KWh'qTS;fD<)/MFZgLCJ9p+:&MV:]m"C07!B5:WJM__GDet!="'HJK'2cFcJY$_W)@b&+HF5Il
%;tlf+3TTe;YHg_=Y)P.iS,)k4D:DjRq80k?cZF$!1m%DhRPe-A(&,OLTKVpWIakJW+13s[_:b0-[@q?ZB%m?#Nu=M?=W>K9ei>fP
%F8a[)l+)N$eoU!aj3.26EuU`oq74%^40@,E(2>Xu_G4lbUG:bj=X`VLqTMcKIpoQe,54fY)ptSdBkK^,:)dR`HLO\:n$IeYs0:<8
%=)Y:f8K5_%Cg:^?=#(nd[(;HpkD/CliKDceDCs]2\h-O@FKZG,F[Vh(_/"'_lZO=KQN=@3:+GSX$%pS?ea@2`5&NJd]_$UMQrHr8
%dl*COS#\X>DuR]fPq@'Ik]q"3/k4SZSJH@CV+.W&^2tY<F7/H<"tfK#VhTZ,\Mp,]6&NDTlJr'-M)JL@+]\#jGRgHE>i=s;XpW*n
%2ZMLZZQfL&A=_:(2<<@j-i8M"b8(H'o8;kmohl1Q[b0+ge[b1)eakf<mB%SLmJLIZ,MWLbGp:;UI=Lq9r,5HkV8g%b+*(IgZ+?t$
%>A&!OhE+1$?;ed`6e@l\nIJlTeEVk?lHFp$-PGJ!B!N.=/6=EG\qOl=C_c\&G])Hehd>>"7#6#DAPQsSga0YnhVA?D2KkZK_lr6Z
%nlYET!RgYtMg44S_b]2!O6-fK:dL&rhJ*pKhe&K0,+u@E=\H#<F%&dR]W+@)-EF%N*j0['ZDtTp5L0"@Z4rEbF#1Mue*@rG(\]#R
%h:T>#Q(dV0;n5V#(X92iDpGdb6ea]"J>$1$MSHbRTXhljp$V?:Yh$R9(9)L^2eM9O(Fn(3hS%Llr!cBdokl/&IbHU5!1Qr5I6TmQ
%-6$4bJUW$U&75D/,0G@\h6O?!dh`h0Y%8H]HZA!TYG^A=!YtY,p=Jo<d<te\$is\iqPP@Eq".]Fs6;6*(]MYClUY;_9COb*W9gFq
%(AdK;39$icR?$^fdjH*@1Y47k-]Kpk2r<CTmfgDs_OD2Th7Ppa@H3$u/m.*9DYNk`DsQ=WC`PWhD\OO*pc[N9+79klSjYb<UkeiF
%hnJS)p<CbZqi?M:49+Xh:]-n5jhHWN_nXJm.\0=LCZuWClINS(5Gn8@8Mr<7"g.IB_Xd6]g;i$uO%4sea8\h>@bS0C>E<^(9jX9Q
%Vr,kMQRA]1:XL,-SGk@_maa=3EoFk6cGAT6cLL.Y]g,![hb<q[9ePIuBE*aY/UtU_GO\HC3f*g-m=:o4mFa`!m3_f((X`5#;FQeY
%-XXND-MJkNNt3T:LfIoQWJ^%Q6b+U[``=CLFOD(ICuJ(]7J^&IY.\a#L1XtsfLe$/gr>sl-`NXj^%:dBV$Hn0V`T\&&,'W_(ET.h
%Ilr*Can2]rJ+#W"Yk)H+d\Y3Z_nC^$j#]>ppVVr42Ke'Ln"#)lHYnc'NF09(H?=PEJ,JLP1oN_sn`7QH_paW9D]F3grO?ofs4biU
%n]p*-GW<j4Y5IptFFLr12]`re45?SqPWM4d@ccgPZgH:qUYS`Gp[P&.qo*!`6bT>6>H(D71Q?e1A_a>._"Nh]opHh7q8(A5a)<?-
%[KiA$]MGg(ZI+!kBmZL:eXr[YT;&#k2g``f7Q4>;\1W2WqJkur_a*6Y"$N4J,E@_$C?9<![l3tF^Ai.5j:l0(Hb&0-hqL0Jq0^WP
%cXjOU!d3!LEU""<]r'ACo;V5oVUa7BqYpm#9bFYpNK<_moRj1o2Nuar.d&-[Y%g>Y#>FaBVhmWc*&jE9%b<>&IT#$R+"Chr1\*"B
%Z:^TMU3/Hr3DiN4[1T^NHBLfj1Y$SA&4nfZ(Fc%(M'Gc/,2732RS</?gSRPJE0Cau<R]?"Ti(ZPf(?=E9f#@T2q.NMVD?Y%6dlO+
%Cm9OKRSiDR9h1%,X$2Q4cIbPANYHo")YGqS`0eoKEcF/)WQ1,V)IJQ(8aDb>BX0mD9kA%'BMm4e>+,^8&Im@18m710];%e'>oT5\
%YA'@f8S.<flG[;QFRK.,/)\_#n`QHqms"rQ1jQ@*Et'\84#o@sG1o-Q^@sllpDt/^XRRtt[5b=eD.M+A[t#[m+A2Q>GJTr9Q+cBZ
%j+oG>]F;;ch7.<g)e%*b7Dm>kcA<Qu?Ij:h]]+W!a>Bq@hT<@)<SWPED><\H0^)JqFu;t:;2fANF"8ca]-R)73',jr?YGe.gSJQr
%>]nMk`*Hl:2H(^(@*DU=^rg/bBZ>j&X2oj=K+ZQae4^QNM2Jr[)S1`lUki^la&e9<28>]ZoONgeK1'IV$o-QtnK^pW@/$oLAsp[6
%\>+sP(bq43rK#%R1ujh'%VjEMNJ`PLa&,11aQ)<l8JdF$)BQfN[(9!#q<c6\@i*UHFG9LSmRV((dA&%VX;L]i*..YBi8^/fdJ.iU
%:'hBXl@7T=GY6+UOe&KRPKk8OB$nO18?=St<]8gS&N%aKRs^\ig/\,%p69[B;Eq"o[.<b8E?WVm1o%G$UE,M?lV;+VdrlsXhG*g@
%fnh,#p"qfRitL3IP`g![/@Kc(kSuT/#F<Fl;+s`SQ38Pgi[LE*q?M@0L(o7b'@S'!,S5fd2*Q#U\EZU8+^;)4\C1au>/dBiG/OgK
%6tgS'I9\iMc?k5N%FGIef$`NsQ\\.n,XaKK\_9JQ%]jjcg-@GD**DL'G0C,GC(hT>Pia/]_,k;+.:G*)"952m/FcDsD<m_E3$E1:
%`ckg;[F]k6BhoT=M]Z$3l0)H2YaldT>t[\NPp6nDLnuT3_3-4TYk'P/:*RF)kSRF5iXQ$XZkD/FQEDAO`Ag&W3T-&G)C[PtA#kf$
%RA>r\)BH[?*"!l;E?\p\2^c(lKAj2H6FPa\8a\2#(T'L'$)@\TL&+1R?DNfBg+fa;fMGRT9c;A_ocM[]E1\o3Y+qh,&rImb<G`S^
%QBKTQ#"u.pV$te[+(VnP,d5VsqQXW_9io$mg5DRq2>P7Xs"Dn`8kf/KA9s%6^?LRlL)_(/8.l[cBHfPk-DJnC[7Wj:pL&nQMd.7o
%$)a!&@R6#VH(k2&`r'?Mp!<h=,W;I.6mV^jA^WggX_;`tiX_4)8:[u9/h%sf9"fe\8-L3%*DdmLKl:W;ZTSM&AMBSFb1MS7b>I"T
%'l$@3-'b:*TtYKL;s5])8nGd`/QeXdX/$:E(@u3_]N'3Cc#admXQ`J($M?>4JY5o%1%<OP>ofS-,`'Wt(.!J(G=/<(j-HE7X4XuL
%)i:,e>*[VZf?#ipcQl+Wh&Z#fp;4/LM*I0Fl']Y+:W"faF9ecNZfL&fM(N)\Z:D,,9G5P1aHer_V9Lu/%FHLsH6j=Fhq^\Q#b-(l
%,=GR=)7aZ!Du!7'HE^mfff*Co:"#b]CP?@Oajn$q*8U#8--k-3Q;C-ZaJb1*W/%1-qB-Vg>k$6ZdqbOp#QTU^19<>9q*ab*['6n^
%ks8#WCVB@FdhNuNCVg(2os2P%9nP]o>)ubLYfKk@.8u)>X0A'_BJ#'Sa_>hcX71n`/G``sg2`O4H9e9Z->=(po1CAsZ>"&aQY@F2
%.j(IN@bG<HPj1(MdqPB6-&`RsrBqlme5'*rlZ_5s7.VE<Y">shB[Y9B$0b<+4i3MNde])&As5'f&)JUep',Uug('prdAfNgo.:uC
%'Y6,g-tiZ>m6KO/"Yt'mRL!@sQmq2U)`P?)o-UoG>Q0=F4BR[:ImV*N(EJ[7WtY)+3pg\#r"1!l"SP'aP+UPTR;/*1e;op^4H-)i
%r<N:`OR,O/nSs!C(C;-3GUKad@pD\i*'_Fg:_;66*tOMk*cnj3LioR,F&#/o;^Jln3MAaZ:i$kd@8_Gp,-3SuP<:8i1mhgR80a1(
%>3\Fl[Be>Zp##--2uENt5&7K#dQ3hWUuNQA4sO*P\ukMK`'-O"*%;eB3X=itM+U/=Kp8]2K-\.Z6Brj/.Kl&%_*tb@*s+T3n02O_
%/Zoln:8_dE@T"kP/u:Jtn[7RbANCfDEU&6f(>A"B0=LJQEmjuqTK!Io7MNnVq:37(6[b\#Y9r*#BBPs[f3"&_NIBA6.K5,_\1pU>
%6qWnFOrA;C1i@&nUs'"#FDo*QW]Yr%G%e`7.=l.4U4Ose'oB.6V:;#,?!Mj2)=_kdRk58Z5&^l53^PM3JPg)<U<TiL4t1Xu-_c/Y
%Ip3F"8!^Pd2%.0\B9i6Ygqaf<GZL#C?fWn9eLjR]%M1(7Ba5UEi_WX_*3.Q&)kSdkAMkuBaMom--lqQLNsm*1'o<\!F,>o:9heh3
%P(fT.&3FO9;-RmRF_U^h(/OoW'tmR80aXYa[lj.u#O^&q<)32=4b!YR`?W#]Riecqd4LYB>nj@>T"OV=m:8gL>V,@Eq:*8q+Ps=<
%fu-H\`@9QZX<rC5i/4M2k"TYl\,;_:roT`c3G3166gU7&F`dc@^G"aq)(84B?\*9I%hfgN%O;?)c7S#ZZsjf>BMDZ/>Tdo!LaGE`
%C`4;Kg&'=L@KX@pqtsg-M]o4]5A(dbU/1ej0CnPGbW11-`Vpmi=HY#,*@'dipp?GYQBO[?<3*fLSXiHE6T+t/I+*B;.7n?3!Qn!G
%oWC%a!aU&tR&8Jk4_lpAPOe2%h%hlERo@:TZIPJ=*i(87IQ&YA10T(h@-bY[i:?"ka87C?^ETR;cMrC3roI$pIOY0GfL!NH5mfA&
%kZG_[O_*dP78=O0lOo%en.+]"VAlqn`)_$(^T[k35H2FAoN*g5s$L6dJg<'3+[<XW!gFMiIs?c:MU5n1Ig,df]UG<W=M6SP@hLm1
%5ftkNbfL/8qBJJudE&n?0'P]=26^*:mVgDHRreSkS@'(kKA\H@c*$h[EDD;A>-EF4f\2?J(`OE)E[]p\Ygb2Hq;G@Yg=@t?4&Wj2
%!Q!2n,`K.k@a`@2D^YR^#H\M^81n>%ekTBb17X/RocqTX+*s#PpB_IJS4E9Pi[8S8o9pLCfqq?Rith1J'\9Ng.7o#sUj3i1oV>H#
%,e&)K0L\0kp7TD<Y@&C8IPI!qdl?@J'mpcGiXM&eM*WRce$54M)Bf5-2'//=N^f?n2,bLCl<VV@0Z^goW_D\e)@:6]$fi?OU(BoD
%Gb]p6e4J,6V#$qp%9(_H/3ncfis0E7nJ9-nE%R6l&?B6gLdOC#RS"+c)`0/=TYgqgS@$ec1qTQ@),$/8o;!LU#4$teA)t3TO]Ea)
%@2^\V_K\421Q`SLF)Pk]f-IJ,Mg>B'`VkJ3!\f?P[E9aLbo[R[;Ha5CCQ6^Z;@$uo/Z=fa+AE2u30\6>S>;1mNJk_(:imrtf.b[D
%.um"D8MR!N9X%V/HA8m/=JC-uZ(tMaksl_k5#]Gb;')6m\nqb%1^0$IY:aJ`-\-WnUm'7CU-1hI=Pfkl[nOcZd,u'M8g3BO_+TJm
%X<a[Nja8>ON+B'L9n5,jQiMod8&HM'Jp*PTKu/0I44H5R*4XuOC1+!>&b?!n%j]3CPU%fYn5mGgW?7Eq.d9i+=^$%:A3\ML)hd'-
%@biI5'.b^Q/SH]UdNAY\T?>&$&k,[6A4ajG'gVmV1tAi:8j:]OD6W@DT*"b<Ua'^n5/K]Am:b+7NFJtrK`5EkOW)<rJ[5Xp$e-k<
%NC_WpDT!,-5+ks'ZTrI@Wi#_(NL_XNZ'I?W9flT_Nlc6DAd6b<`lrC0.;cdE]T9(@863YpM%cfK;s6olef3/h<fH-2/#4D@%]!8>
%@6gZAY@Ai7Og7\g<<C(j3Nuhqfedig7E23WUo2XW0_e'>p_ogod<8%o/1T9_E@re=jG[ZC%u',]?Y#QIZ[,dhdeHnHH<#d?75dJg
%^S3M7.@"l')T:*FN(QjB;m)4=l"l3XB^iqi*RcS9P*TfI"Hctq76W,`O]@;b]],9:&Q`nU;]0EglOR54'tGNZ2[c1kfYcOmU?bc/
%5#6lN'krBYQH3KBV)GXtW1:fVlmP;ds#8>fjVQAA806/5f$o<1l<q!H@206qVej!X1FfN$A#lTgUQt,-bD8>La!;D&hZ38u-K,V-
%#6`m)p:LKA0^NAAGiD_(V;`bX+ur@(h&M7Vf/MXV2NaYIYZ7=b*iEMj>ER$Dd:%hl*/GjT,mF\c+<DH2IYcO/VNG]Zq>@,B[4_?N
%5sQ-rY].3GOs+rYpcQW22Se0:Xu2hp`(XV/oX$rp^H@LLCV]hpe##_"43krb1Xbl.2J=]+VYqZh':&b;&!L)t4$?$95DuV<1%2n%
%,iOH0`B[*Ja&fQs,e6>Z&0/43'hrV2KLZ%OJd33iW]#]b3Mt4@9S@&dJcmCtd3>b0CqQJ%&@K%p!f:Nb/8[]aR7aB0Tag81BOm$<
%aVE'kV0B2>!YIa9nqK$.=t`h_fKr+_MAA8HJnU&`,hRu20Tr[`BCHaO"7R=)'1S]a,X!:?Lpe)j"1m_`pcf("e/d>UZiUm'b#B:?
%iS7C1Z96(C/J/M9!bjqDLDji`>F"O$Hd<f=QJ.?'i9-N[(uSa2<X'A@Lk!b`c*@F-\+H;&8hf8E!OBhqf!9+KTMAh.R_jYLK.VG3
%C%)IS/.E,WZs^f%^cP.tjF?@RXV)M`N+@&IZLP7j\r_i0r2R12<f=QRjM.]H_CGVP`dJI<raf;e8qFmX\lg&'*a=:A('ja$O#BHU
%+OsX1GB;+1>h4`"OK''>H3QFBVn4;(@a&[d&W`jm:UC[=382!%R(pC9g$16756!!)\\Hh\G@dC-19_YoE;!u`_a`1/kP]>*c^%8Y
%M/K+\+;T'>d\fV>f93+6+F>b=*f?cG-7N)VFrLJNcOu4Z!N-g;-_mq$^bGDU.6S$'/eu1o]ZCp@qmtDmE\^5d$1*b--8gB:!1@-f
%H;<MPo8^7#/IX%GZ=<18:je9J*>O.8]n0X4XPO3_@pS)*L;N45Xr1GLh-_,t1Q=t$BgY--(&ZO&5ogt!puc%i`%_W.W$"@:4s8E?
%#GUdnO(^q@!IYk7=p>Ump0&(_'d0h\7UcJE`(;q"8S541fm-usP0,3pOp2>pK%Cr/'M0j9%P6Wuc<^_iW8[jappT-76!jl.-m+;u
%nA0hY"BHc7'[XH<'pW46=Ao?jNZ/HRXO0ijM$?D<qU%=k?g<Rfd[cB#'*G-4'BdCP#T#"Yl<KknQ<J:QNUMNhfRr)[K]+HN1=SEp
%DulbhY78"4<5>"oFV"Sij!.u2"kHJTX+a1T7jeK8):;8+`+4WS%bj*D@[3,JLm(E;(bgbP:+[:Y@%)uDNNS*3am7GW_N-afC]IV!
%q_&q8#/Li%;];J^S1tjYGId$C0RDh?!j7PRW=UC%`tn[)Wfd=%Vp+F0W:N7?PdrX8JD(n2P\Fq5"V>JG$M!K!FE%rBj(8YQGU%dT
%%d1;H;6t+aZ9^EZdf>S/OUg/7)2*`=)65N\gr=sRG"*<nXcBsA".^8i2q/ssLuC8j)p`66<FWEVc]F@_>T=?4SUuA,!!E_XPgk.q
%!(rbVZ2ht`e1KVcE.bBeP[@3qp3%j3&-n@d&7\k#"^c6-h,Ko.NL5-m%`d'1Mr=;<KIk%Gh6EsS"W@><;=EUh\m8U9!m[Z;'':-f
%A6=RmNBJMt&d]=sL?X_.WD"Q]/Fb:7^mM@QHN<6(lpMJ%^@&,!;dq(V#R7^=ZaUWHlrGJOYad`,MC_#'-d\PRc<+WQiLH@GCci7Q
%IA%`e60=60.sDjp.:3qHh^ga#9Y2n%!dL/BFBrZQ-DrLG'>Z2i3^F2)EPSb3.`u.?;*YRV#"8%`GHJ8P.%%rIIrS0l6t2JufA6K4
%<+ed'Z:,1`=<hu#(O$PL[OFVNf#BL#4?'jU4lK60n-cW^1;@X5^Od[bhsg,5=pM393Z;tuYpHGiM!1ICK#!]MZsb9jD)`msFNOm)
%0H>8a<$Qt67%4]mEZr^/8IrIWga+ufL'9XA:o,)e>m,ma`IWpcDO%Rg+;4F;h?Fu2mSLII&e9JCNb:0a,2tS&hui"e!'2sT7fj7?
%-+[qB89A[B)P0&`?/^k)9+e@'2X*4r?72j@j!YW`ASbqsdp^3k8C,[#'h:SY$+kTHD+2X*EYTj]2A;F3NBiF&$UhUt(4g0V7Rji,
%$H44%EgoC;VAU?2(rp`pRg:Jk(7fko6q]4"SGp?`_8t#Y9:J+u?%f&koab6qLXHm4M):Wk$)8)P+#3C@*B,2uN!(E%lqiJ\cuFoI
%'HnjrodBYcdVU;00Ts3m5,]P%B/!jdgFH^'"*+TmD\6dH&OjPae`0kqI5#qsBr3d#%fp?N"FST_NJ.[)!Fb>(#PH'/-:k177tQU#
%>4pe3;8r%M#fZ<FBi&t,[6Q`I;[LM(2H)"]=<tfp);n:@PQT>6lYUm#+f.bDdfP#'Ja<Csc!s(:(?QKgeZ]sU4F&ao82@*6)ESsM
%]KDb*j2-U'CH]$a$$O"[gOXO]==XM8)'nt\AOYean5tG]R?]!L?Io/aNl/<bIO5Yn\SJ!)6[34-A&'8:fF>"%=PgJ=iE39_GarGP
%e4g[Pb]om!^4UYep>U(M`*(Js@Y@g?\u2C]A0\J^i^PT;%G6$ni-WFR.9'!H)STE@mVu'kI%,:(U])C901gD@'90=b3516Q-H2Y+
%SthqieLY]5bjnn_D)a)Ce*&,.m;[LiD*b/R-eB6u$dg+XR5Z]&%<8U[U]iuOBNE"(n1BEW.\:/(Wf@\#*AL_]ja;2C8=`*K,;)%]
%/!8pI7Du[S6/moU5@L2b4';%eP6PTL!u:Eqdr`#E5-$N\W;@sIO0.MoZnFR\/K:;Q*._'m@+GBa@Z,R6?ZHoE^9qTWT?2;D]Uh`T
%S\diaPPfT!g(&E4h9AN"F)/]/0\gm<$kRoR\;Kis62[!>-%mp5=^"LBY':!k!o]ToO".mQhnQI2nPhl<8M%OF`Ug8H/&C^,7KF-/
%mq%fZYm*6AE?Bjo-%$5h(mUssJ8s`\Xjps=okB*(E8XWP9;:`kWtkCY2i/i>3?^KE^0=:.03QR?bSdg#&VJ&VN2LTLrmTDsMsOdu
%,[f(m&RiSNNY0Z0nr6&k?l[*=V&[81=lOC@]p&)G)GSH'o1M^)737lf>t.^#8\%sseua^O22bS=gJQ"bOBUlieQfp>[Da($1:L%^
%<lo:BQH3CD`&3UA+im<;MKn!@$T%qY/F!n56jUH.;>$q3D*VHa9N%$G1<#t5^-D^]J>HMtd/\-F&Fe24LG\Qo/bXK^FOGsuk%h1I
%A^R>Dl_J>o)QQ\uH7@tY>8<(dS6=Xhps<?K%<8fc+SrDib!&^VBk^WoDjACc/ou',OY5^(,JU7VoRA[D"A(6nM>pM1aJ?P&bBHV-
%pj"uu#qj3"8AtOsT+o[qpu`I_PE%FASlH43M!3baP6_Yj(0N_uV5$kUQE--+TVsC$NAt2`#En/T9T[h7R:na@b=ZSXXX78Zm-EYt
%c,k&J=i<06RM7.qjbmKlBqctd*A'D-)GmKVcE[CAk%L!XM-TZp"TBYioB-8UADK[E&Fg<V@3VV%mj9Dd'6F6,,.[Ou.<J9]52Z]T
%>A$FZ%JiGd+jRJ:7"Q*3R1%9I8D/beVU!:;/LtT`M[dNUKE-bDQNN(ODKR[`YVhMCH_"[GKoSa)JE?a%`!8k*UAm67M2<eJ(n<]X
%3`,sVmcQ@YTRLcf`;I]AeJudiNX[>ZQ_=cJ1h#]l;gMPd$]jF/5bZ.4/c3$pQ?'8Tmc-=3Vq#=BLAGM9Y@f\sLM$M/T.CBuDm<d4
%^X?PAopM!Os*KM)H($tZ@6o:"Z)Bhq#9Se=:.2<%fc]"&XhBnX$E#q?X0?S#c91iP`4Hc>gMtS6rZF9/9Y%hP/c.B>h'0`pWE=[c
%[A`(]8[.^ON4'\"KgIFsO1%O,C9hp=^X-,'8HSMYJ+@&?XnsQnb*Xn94hFt<d7jsu$-J>%8;?\(nlCUK>mRIf.Q,Y.>\rJ&2&uRu
%+^KD)0E0"R/nqek^QC-u,@(de3DXJR<J!:F&-\]L<8^83Dc@%[dBs[4Fol0*!nY[f1S;m)\GkHc0FW>*Ga&>^aHRUe.,i)AAtZsZ
%aG6hCQ;4C]0jK72cfR'53U^D8d<m3n-9K6F.g[6Aq>[BOlf73l'[XUad"1[-';_j+kfCkWT`aft*$3ua>u[#GNVjPQIL@1R:$D)o
%DkZ4#cnV?C!GjSG22hoR';<^@0h&(Z."GmF_Uc<tF';`3-p/F/M*ci_e<,0i.!EN;$%m2SJd;JV1a%DcV4EQG(-;ka[RSnaZ?+O1
%P2,#khf?c`,'O$,5!`(6=mjAQA\#_2&/NkE?rW>JNVo)(I`ibh/O1X<k-s.9>OE>#mQ^bgj:g?%GBcm#.Z,6)dYJMghYnCl/9J6?
%b[caHZ&FcmZm]qpa\K.6$h?q'+[skE7%K9;(-)__[RSYZZ?*grON9^-_#>*0rf+c9!X'sX7SF%=Q/h(6!/!o]-B^)/RDOb#Bk1*<
%KC^$]e#0I8YGG5$\m?R'Z6VZ-KJUXgEs+YcX-!TT1gp)J>5[TC'8WdZJG-u[gQ#=,6'RX%\/2'_\HLil&j['+B$$NM4NnA^$OCCk
%.(KVlNY%)-":?FqV(UMYc7H8a*.m7ZKEb6X]VA4&f9tSG)*F69j]%4\[9)QKIG``-%=mmA?!p_KOFon#]2qlQ>1Nr#-qT5%Lm$E5
%&3XZh0pX,iY5dWS*DNWpOZNRm<%1]k-!_"ZcVC1P[u#Y1))CM[)r_4^a>?RN[?`kh:qA,FgjI8$\VY'9)CA1)b"18,2<?+9M0B#%
%*>OPPem[?A[@g+"*O6!]7:aXs?8#.9D&Q5Y?&X_=:(rFNU0,s!r6m_3h>hOq%2-*`[#\+;j`)h5o.cs]Zn!.ATlAea_du<4Us$uH
%0/MO%,01-NU#=tSD5Io[cTn^36@,kEh%T>udb^@I7%1m.ZOUB\6rlSQ7S!M3%EfV'S5uSr8_SuWJ6VGr]/-3,rWXH3Jd1BU;kpUn
%-'IO+P;]-+?E)0,:Q#jZ(o5Lr=9M2.>`fp]"cQ;'`.Z$H3"X-Y`l[\s=<gp<`@1dYZ'%Zd$l=!&co_8LRBqN0:ok9/Dh,_4`&/<$
%PYZP'8O/-oYhIafBL^iD6#*+[`r&&(Dd%%6-s[H3MTQkb0_K-<JP"iIOWDOkSGX^,a:Pa)9$kE(.F0IV5ep3A]kQ*i6/n07I(#.R
%,$=-QE"Y^aDA+=10(QD$%jnP!%]kMKB9fc]JYX@S"%4m4C9V'@,LJdmUh$PIg'(<d*'8U/_KJGi/?o7BU$"gT7bq+\h%uH%lE6o.
%RE<TckfI[sM6.iV+U-GK"B^s#.9IKi*%2k+-?>D^l&a=E2oAPSB@Lp->a1Q"BSfhNUIBKP7WJ/0^jk=)dWGqNJ>E.*19<pGMeA:"
%GE_!Kkqo928RtetWR,>41Ue@P1T?4q:T,"IF+0M2D`aXm'D@W[:s<7_H-kXdMAXVu[_?iM*?oo;gjVMZ__52Y:8m3a&8></U"Cn&
%A$_Cp.)[?KV1JQ#6>Fo<(Ks"sJ?`^@M2`)L:&u^N/&3U<jWhq@$VUO;#9Ek_H\=^hbE[\M,?cr8@m-RDL,c"\OZLQ6S0EaR'?Z4/
%#:c'+BRoEF!2h.^%OI#<R?`\EEiG-'/<e%/c?MD.;@2jP2.*%@$"YIsNO0)tQAP_XN:W.(n1_8i8_HdLbQ=Ne*/i9!8OF?sc>8I2
%KjcNf#2l<]nd6*W,aAo2:(j3I:eSVT/>:=/W>,EY-!qLS5ra3f!G:-i$Cb_=`p(9ZQT0EC#uttW@cA"dAno*o,^:N+=W?sR5dAp)
%s#AUVBis(Q/lq0^booou(fE\qD?\K+WM<mam22XU<!A4t$h[UfqSRrI1nhfR&)^gs`*&pq/WeB@e%jF*ddj0k8hO&s;#s(AA;ZCW
%q^._/N>`:q78F)4g>Y]LXd0Hj#"B^]51SV/QN\Hr1_lejn44X0ee0AeC`A15'k*!N4;_H666bG-7rE7.QiKa^j0/oI8Yh(kJ+AJ3
%DSZIk'nC&GrQ<!F-Og3$3LFDp=:&BuS*W_^Tb3--`-WMLp7Xo?]5_6l<<$M.^Dbt;r&/^@de&AaqZS9;Lk_oa&kmj]EQ?BS#qD4L
%@fXL.6\'s=M9U\\mQ+`D]FTT`bYeLsaD8O/"B-b_?lUCd=HR#\[O7A7MBa3"_"RjjY^qB]`eI$&Uqh!t16YX3C]H%":__Wn>b,Ce
%4K9(ts.ckpPW>9o"e@\MZ`Sb*_,XV5_Sgg5>7E)q9F-/+>]U,4!p'\)`uN&+k^$i&%]o_QNu!`PM;gTO(LA[U8fdI2]7JBl8@DnE
%J!+lS;]Ute&h]M\"e`d)$B[(WF<[A>1XZ;;L7&WK5`?i?ea-j4m."+5Nd4U*">YP+SP.EC/WpH&/XdNjBRu05V+73_>38uq7>LZ.
%e*G_bI*N=EC4[];8=*:*k9?ffEUp'Wb[c6aQ-/DBe3r:qG3Gdn\jG70,DL1&-9mAaIa/n1^G>R,O$2Gg%CAXifXejH+E$J'nSruI
%?rLPF8(1mK$9"i7KR;0Oj;-*sOu7GXiQX'[_<=Fc%,SjQ;_i4mp1nK3c$1i'AiH4g_n#:G^muB-JooS6i0PRI^kKiUa2K<s1_]c1
%%[Nq#D1aICdu7;Zr,P+N!b98j'd@6]==iT;`'..^%ld;=B"SXt'@rms-V2$2BEA5=G0:IE$5(OAjMj%B1VShU].rdkR&qUjT/CGC
%41G<b-5Bf+:fX$imqA0B]!KQ%\.:nJ#;6rD^-OMP_B9U'Q71_mr82dVMkc,%c'"=6,!gh?2JG0#dUZLCFE><``?G>[dlY;1;"=rI
%)QZpnreZebLlFYTFOl^C,CV%!&Fa2QE"j^^A]<SsY]PIdTnk1t3lPkKo81Ba2DtlaG2)b<g)RV,,[q4HG<_&Ae47+OF@@1p4%Z2]
%Y2$gS,;pO]"$L$PfF.Esq'?Ve6NQ:::d>oa_$QDG)juXm=sUt-H0[/OFTWqf1bO:/(Eg4ibOamcQm!Bp5b+#%V^kgeV+j?oN,N4)
%;48fsNWJdWp`O-6&#;l/ZmT(G\hni2@ALlqG*'^_FKng_nqUis,)Xk^f/Q6/o85o;1!;LGU;Bkk8JDRm=a]oOpc((X<,/WKa[jEh
%"8,Z9,-#)KS;LdSZ^$:>5Cq2A\-O#9'LK%tbR5u0D%\3QdQQ^_FHFD!4IV0)\8"T;<CqbiitJs.X:F3,i"rAV3RP^G'G+?Ie)>36
%$qjVUG@Q?9)"5"-EDnVN#YR4ge(?F6d+LD'"<`aJ=uJRbCdX2dIXkC+J4Ik:760^&lH_1H9p>uXNKlh],fTL0h%-bEmB"5V(<WO5
%kVtD5/<-tmk7bgL*Z[c`!+90SjRP.NXU\l&D1`r<;gn^5<0.Y6:K<?n]LVF;=j8*%Z7-biC'mk;XA'BUcL=k(WA"`XA:6`@Z(-n*
%*tBV"kenZAUi:WnafF#;9reuNPDHFi&o]WbQq&>$UX0`,C19]R>Uud%7iEO_=#1nXPClH=MiIK3-;S,3_RUE<!RKH*J;/kWbLQum
%3i+AL1$fPCO8KQ('6&XBIX*HrCfoBM9uA:Ef]FGe;@l6!?stDKOV,Qi)pKU#*,OMq]JA2%!@SPei4*l(EnGTRbn;Dj2K]%VOM<'[
%$W3a]nSApiEWuM3KDL^PCTh@E($:,23T;D`mn[,?bnOEDq[$Jm1CR7`'O0N>-I?3[Oans*DMJ0F>@G8(6p6:i(sGo-&0%2(FGXJ-
%:25H!L_dhr$'%lo7DFON4ogGED36R.T]<%SB#Ope7OXKH.'\se<!-Vn.J?XiPW;+*"?_Rh[tt1@P1?8c>0IuBBCM&9%1Edshi8:d
%(Q1b\@0R;_Wb,"k7T*j(@be__'-%2-E#8.jK#bBrN>e96S??+W\`iJlLXh4*!TV$:##n_&h3#BZ>U-sf)frO&C?aYOEsJa!42!@Y
%:]r(4O(@"tLB=T*b9*tW#GpAr7hd/VAnql^3[3_J[(etuMJ2O^7q&re=d=Y!JDnmXUlKJ4%!n<gDLG@7Z^u@9JQX".c)Lm[it<KR
%EEH^=68Pe/e12bD-lpPXbKC547ViIdn:dER+Z`"T-:pdH-@WpiO=:5@:f]@@]`;CFX/JAM**:^)Ge0;G&JKdZ$sdh/Gdo2!l[ro+
%q$otpOkB8MiY]`m@\6*sYTY*#%cG4HZg/7$r%sWX9k[Nu6BQF^-"3q17G&0UBIVF@A>,AP!knpaWkTI&&X$TH=*)8(dNPPVLap8Q
%T&STnU$.-o.2_O5NE+<@B\9)J6DgYRYGLFO`^]o@f(iFO?jWu%F"/f^^Vb_//qrX`Ug`maKu2!`Z4fp*1q(b/>^^R6-j[jG2ds;u
%X/o.$8:VpnUG7-#"l'j8cp,@!/^?*I]NFD.prFX?JST6S<5jBH+_T@0D\.XhS(S,deYKb.1?'rh"?`WSMm4qj3!G6N`Lg3A-8C<Q
%&u]5HBlo;GRIHufUa0t^/F9Ki_OB2b5H1.7+6@`,?Mp9J@utmPq[s)c@l#:S"c#PeX3B02$2>[-;oRYZ*'lfkAFTC9pekLH;Ts+/
%/8Bt:a=UH=80][_=ZQd#:P#!%"3#rlle(IgZp8VMG+^?:7`'UWGahh-jX*,@E#]dZfm8i1ZOT<O_<b4qBtQ7prQ:;?Gg+Q)XUC/e
%'C;#8R3V9]N=d`X9>V'N[d;L8@BX9!1RpJF"C!uN:51\f9R=@lPmM$j6"5(ghTUk&^1@G%6j;C/DMgk#G>D2O'=WUc.4*VD;jV:T
%.q\J@/@",l.UYuK0Sik4_;KM"W]M[%9B3Z-OiEh7[U>&)cN\+((g<fD]25&b=J6FCB8Kj4%Z:<kZ,L3+;FDA3W*2*hic*=EE!o\s
%1i-"u%b$T-KC?R+Am.YQ3"5W&9PLW]4X6"CX(U=]Por<DZQ2Q:!F_?C9YiD8Nlh3rGetY$k!WWOhN[tISQk(Ana>E*@tfI!^ncpF
%NrWQ)?Tn_@KK"iH*MENIqfHWgl7:r&/G.+$T*'\-1!nq5jW1VV094`:f1:M@4Yup@#/#Z^A9i1QKo$[^T!gMGq@pAtp^0:XETWb^
%;<B81R>ngMC=p'HH_$-uCb-D&0^T:[r578ShG;h2Xtgqu`FOpm'n&js]&pTQRc@[MA\e`I%re`*qM$\k6j,O"8``2Z&MI:IqA\P8
%D=Bf2!*kDp"\`Np.Morp@X+b`.7i+M0>TUaL%8?"f=C_Z,[<V:Q]NoT!?CQ"1J.^`*p]`:"DPh'R\I;-4_M1=&,8()Fa7?A(G&o%
%,pTf;#6Yh^]H7)Pc[a(r#X;0Yo*Yi`FDP\Z0=a\uK*qg4L#KinNoMZu&6=V%nY?Im'Tnr:T/6&6OUrt_%l?eT0#8S^R2FM]G4B`p
%CJ)6465T2<^)a+LPoGuT;OJBSPTa%WMH[Fp4$;0DXAT@mN5`ubmT\f5&.=/$M2p$Obl13@g-I.lRN92;$ON+Si_6<J+eY3-`Z\6R
%UTank@0s<j=$To7!>Ur1!2NbkUD5R7;[oSH3ke1"e^,-YO;)roI+uMtM:s;B:+gI$gq/btll^o-%So(K_XMtHr@cs80ERB,"jrW/
%SL`RUD".bm3`m.;OrU(P\RGVNDA\']2'bZ?oL$9O=J2>q&+dR?g)<j-%Q02"3";f^So<>e&l1fgj1$@q:GH`FRu*(rKE#!RlWIFP
%9%XbR,%A=ITJk:+M/dcsP^2_B*[>"'"p09Bgr,PL#tWl$c6j<fXifU8F$@%V(=^*,9/B.g!`i#ON"UD@NMZ_a1g$QM>Q\k*&'m,G
%[lCE(&b1)s]3#r:/)b=d;9R1F;(mL&IaCa$'_.sCLWU$cb6!fpK<QLpO-5I=i\kMd;O8cnE%6la"DkY-idX8=YuH_s@/1JS12*gc
%`C_j74J]25K(n1\-O^Sa.&8Q?ihH("[R$rma<oi1E$>OLC96N<T[HqUck%?s(r4+<9KVG*?oWXV&"PUZ5o(8c*'"Tk28UV!e,pL"
%m:f`-PW(9F)[gWS\a0dJ)ha;8`'2Wcj]DM%FE%O>kTDtA;=Yi=fgc,7&?!m=o?5a4EW0f+PRCeuN\!'W<E+tBM=Bn--3q7ZB7clq
%)H%I[eTYDr%K-gF-XcR8e4-+YnR@@%^rU5C6RmcM&;rnP0g`uKHZ76)cWh>R3'JEB]FFl-S-r2Zbhq?.OcTr'ZGYLbW^%218J@B.
%]&9qc7`IeIOa;O.7uQpj'?+d5]CI<$)WW7?1RBf8L$tOB^m#;Sj`KPr7FZ_-C'9nU]>ZeG?8I<')]\[gnXPb=5gg[L<%T@]&q.R+
%*J^3V#!i8<M%p&(iG_=)5fDgG/`_B,U:'Yh6C<TJb8EumA[A7dGM*L]=@d?n5F"ce"K_bU'<jiSW2Wl0`;%3qGmW=ps!4&XZS3fm
%)8^,Z>%!)X3.a.VXUgGh"9m>S-<[)(E*0KeNjN)[Wea(uI$K\>B[*m$bCb#5HTWmO$hhAYA>FqmL1XO/#8AuG0XW<l&IP'S;F1JZ
%&"\Jf&#Z$3S^9DsBop1ZZl@IcOo[rG*n$"$WEHAJU:i66P/KA,:8hRNJJt+I5KX\D1CBa0dL;s3G9aMPK\fp$m',&pC)O75,*7[l
%pP=K>WqhIeeLlEgYU.<q>20`c@$OI)m#YU0[cC2]qn\)3a/N!BGfk#7'o5so.DG_NP]_W=PNri`SOG<3=c*]Q34Xi:M8Vt/Tg2Mm
%4IhrRmjs&73'Ia,c\L-+:_nf:#=;h@WEUY(KJKpeOSh,Wd729aXjqA=-h];2"B.WW+lk]"Qpm_USkG>nH=:EjnnMcQk1)oa2-6,1
%SLfS;;SRpT6TI$CRjAE%0,!bFNjjVD$"JW&\lG\?&HT`U\lci"ZFi[fP">A1bJF@/)J]+N3)j<n"pLJ5,9[)PNs_M#f\A&((cI_,
%#-5PpVk1`(d20#..3+5p/QPZCMo8JlgX'7N:>gsQ,?L4#M(UNC7o?5ZbcdofJ=2.d-1qX+*ca)_GTJS>n:2dcH>ne)"JF[iM5B6n
%-^m8Q&DJI("A==@2OuKJ-"8RjQ]YVTP:OEV33Y^R_cqe*2(,0]G\<H`d]Ru+!_E[/iC/GeM?T)X'ouA4D$mn5`/ugs8bjT--,uRV
%#d48#9!*A"N?#%A#,ajI#]//1!n!JoMSaQt<`a&)@1LXsgl10rE_&=>n%B5fm7!!WWfn*RM<;H?RD&qM=keMl7kAOG*7dJIJU+!t
%1S)[cjSOL?(3tD8WdG`#=X>Cr2G21Uh?C5250gLE$MKk+18:N^k&534$"1_p`Sq_A0.'Z#o;jG+KU8)g9I)"5G2[`Z;ZL\_/e5iI
%9.bKFBL5rpLF[:OMb"7$X@%a:XJ\c-_c0QSF`-qH73N*krdJ_u=G-GIU'*O7TGh85T4MLdn)J2Ec/lHc,r!3jE/"3A2ml$tj#Z5!
%<,=FIJ9AU#=JE`d\FDS2K;h[i.mDe<cnb*D[/3Y>-%AFKs#7cf7pP#oK$eg_:-eL[\YU_&"M5AG(J7dD?Z;h>!Q7Ki_f>R1p`-Un
%K4@=.&;BT_N@SOLE0r4oR$^7rinQFB#fikg8/%boG$Kn+B;e\j,;q(L9FX@X%@ab5Q&juC_[8eE*u<W7JM5M[geAb8$UXr*<e-W3
%0G:[U\]bmS$6rc<"L)pVEZsM\#)HZ%"D'lt9skK\e',WOrh9GpB9SFa-4CX`\cgHsn-Aah5p9RW=8Glo:;CpYR82F,5[EBj+:B?Q
%06IIH+?=!G;+$6,]>G#r9FpUOAi!["<5Yq.ZB1&5*&*_rU>Fi%pOW2rUCKjD=A-3NE9V`9(PJ3W:_NleV<s:,.rd,6,#kLfBfM6p
%HO39KOFElE77qS?=Qnn8,DMP>BGbtpn1"L<Zp\2&d9U-.KBYG?25.SHgkS%&L)L=t-Ui=]Rra8;',C`?I]^ST6_c*".FXRa_-SIY
%&NGA%)$84E1b5huC/h/$#0X4pO`6HcQiShlJ;](Z#/E!e$%W>dP6j]KMgU22SHrqK-bs&Cgj.J!,Vom6&Ybjl\V?[kRIP3X+-ROK
%jrcD2IQDiN:U$]a81)0G8In@Z05)80?lBk/>N+No_Ga$AjN)b-,EBJCg]gYA5%h;ZYCm6-0,I$AZE5*'Rkd?"0GrPD3(!h;4'QO;
%5:!pGj$4fiOr\5oc<A(7ETA/'#GFNu8'T(oAm:TgQ\s$^i%(d9Vk+:<U8XlVH9Qlt$%;>H$3[!c&17NJ>$Ou3$Y0@EJZ+=Y8eS86
%0L1(M6$sd($0t$k#,fo/QY*MN8;A=aUjQ<S=2U+&F^1s26/Z?:*>U>#`GJ(D(N,]JG$!H`$:\jPjrMaRYqal.N'rn"<f6"<89HI0
%#dM>[QHD*k-V7m5coc!5@K@Y1!(WO1ecR)u)_lMgDN<Mo#3S.d#U#gW&Z>8HEO$IjU%;0%ArtM'@9+KW)DF7GUa9gn`04-AqkKAB
%-b0M(*8$W(h\l]mi6m*p^ga:qDZAc5Vh($Mq._^b(s3`smIHtKSO%g+:)a?=-&G+]VpPc6%7d(UB1==]_=#1Sk,]!0j>sG.$eGf"
%Yo'XO%#[2b\6[M-3*VQE<[*H1j,qh,;D6_4%!rIc=)B'3MJ]*"@dk/B+6JS/AB1m"bP@!:kc%3+>?$Q_?T'SY+l`gEA/JDO6i'uF
%;#*St=,;!.i$+R[P)9g")Dek.=nWKXYJdcrZ=6X76F@,T5!Tu4X_e\$a>nR*>nMY@4i*Ek`B2`V``Ym',U]o<V%TS-dDqhM\3nNr
%^q1=)]$<lr)H)-VQj/\k+Z2qnaSTau>1e'(0o-;2*jL`u)?pfc)+MG?ept'-iRKeD`1HQodLC#u,A^JtK$qNE<b,r#>X,jp<Q&2L
%/*1_QKZb#$+LHC6.<KS!](:Ve1C8SS]8FGt]@dFYEY]hNXGrs=,bp4[Ns`-HO2?Y<.<J/@T4+MQdKA^:B:Ar!=IfTQK("T&CcToL
%N#W0+#>_&c'['O3eO[tJL64Wb._o^PAk*j3J(]GY*tDpKMjt1U!hRbp-^;+bgQm+OEIh4:$`S,c6O%TDQ_R()*=NFK_u5i%G87:\
%<;2!#aoZc1=8FQ.Y/:D1_Xcnrop8=&]+.:Z%o^ufE3(U07GRVIg`?0'1"66pQhYg0/LL7]/M"I>7jE<2Ycl_M>]U_cU/Ai?:'&7H
%d7@@!FCA2S>Sac&WXQtnAGs:h!M(Y0\1pu%I"oEpiq-iqM[1(C]nlkt"V3*#1&3N$Hb(VUr"2[a;B\Cf3W?1I@%p1[13Q\d_BG#d
%i?p.1qb%q]5_gKSUrLeS7.VAPd6`4Q>$W2MI'diuUkl#i)akYPGqSpL7uP,kII.HmXP1!*`@_p31^7tc,cJ-poSI,_M=>-Gp[ePq
%XMC.>*\FsVM@k4]o<RT*MBMO#(+eG9p*"42"+iDgCU_6cYPG>E((j3=(9a5EPD"Ua_-XDnb&1Fq>CA,D&hrNKf9_tI8A.<c-amHf
%V_$plJ&T,aafCKTG@H1**`?C)HT4I`/DIrb*DF[+-YBu0%kE=]LNbaK%H<%CHK"El0jHmJ"m"09%`^@d]^$,%(u.(_KO]*m,#gOu
%%08daP*U3\?0QF',1W;K9bGuPLVAOil3NO/(9*9<:D(+^Q>[&;1`1TUBu7r!s'%VbXD5(C$;*1?Yn/RK:`ZKl+?@DY0N=6+5f0N<
%I!GXYart^T:WF"r6*`0p+s9C5L@\>7qI81rc%gAnA3ilmUZP)OlCW[Z&%eJNrJQ<?&Qc7F*?*<s:)%r_jL1`F_lfZ7Ce;DV9uauC
%i5?'m0lpqXb"8jP]7H3lJD(XV!HKVk>,]7S=dtoeMlBLVm:-FK3r&-q`r\=j*./d42.1L#L4\i\)C/H_,Hu66"p@MKj'ff!Q,,+1
%;FF\V0U<UHmLTOk:lE,c'R2-7!\YagQqRf3PolV%Fpda9!$OZY(e>.qm\HodD*pE;.7=dCJq?85%U'2/`(@dge4-/rJ`p`To*ZSs
%GHD_HOSn<&3M1t4d<k[oEE!bc!]h<r;T([)\3cbId),,qrlim-OT`uQ/oVg79+'i:<ZG&K>h];d^G3Sa8\<o<^oS2oD]Ja-XP%0"
%W(5^&&qk2H5sU75+pk.Y8dI.V>i,h<+jMC-KWrTj,ULNJZIf3rdGo%7+mh5?68dhHacqO:a[%Ze)9X/R0SCdYDSp!$KufJql>%YZ
%fc!q]+MFFb"pJKlip9h<NB':1pom4Y8K'nn6^3WuS2?E5a9!AMl:p=@2./R*&?B8M0E'pe8GGIiLb3/<.[*Gc@Z4.O+8(8M">h;?
%>mcn>A?7E2iaBEQ?&g-3!tAK=;oc*1o'7=WK8cnKkh*Bh+(AJ:>%bq3PL:b3huUq)>Z6<HKUW@3H(7FI_Z_f1+r-CDgCtu4+k4bX
%_Q]11ek?8YinSfQJq^W\dgfY%gDf*lZ(d7iM^5hKYt5:0F=QA$`(>b3Q43h1,o?^"<]"\3fe+`S3%ua_\3r2PM5>kT0*gj=6?XME
%!"=U1CJ4rX'X+'M,30(gK+R$_P'C*He\]^[4NAGK;ml#i=ZW:5P_7[&bW*L[1q[iXLEg7QO=\>\*#c(6P5c1?lAP)k8^08BEWAAr
%@V"*3;imIgAD/cV:K(-])i2,fl^hg2Dh,N6V7D6flqH:3>^KBsI-oTHljlfte.TI4YHr.N9>m7[^`1RMAqe<"atdt4!*\H;@%,kI
%I('(kBfE,,@X4e`ljf/Q)B&p/>Br'Z7A(f28(fT5=A/@sAg7b['/>p+\S=&"\nLE3rNiOK;PuQN69&e7SV\$o"t,D_Z!l;F+O$86
%g''Ag7OZ#r(J)MQn0I)l]9jm&,/N9(7\!hG1Q*A=LjF"EA<ak)6.Wg"_K.0^o9o[_]L;V(.#?(Zq[1$(;b\HB/<)n/^m-Vq(uqej
%cPTV?jTVOUM#S.+N!iE1O,FIEft=EgWVFjB3U^5f9Z$T*PRYK?7ZmZO&5"[3=nZ6;g:$M_0C6#*r&Zq;A:O@GkkO-)n],kNCCaM7
%Pnrf^SGrt<^@?Qqs8=s-I'<Kl\i\b!$NHa;d)fr#i4#3JdpGN?^IckmDbn)l'i"*jclX@NUX/W\r^\fD[OC+C8\:B2JEFd+f0h$`
%:P6T$Zi%k&K6lr>jP?4#l+!II.G4_Aa-8k.:l[nBfP$VWm(j7=!#`+p-3g<p)Lg8sF!?dafusI-$93Uf$E^)R?5A'`]T`kQ<f--?
%raQr@Cngr;4WBoBV?.[oJ#AltA#r^a7fViJC`!ViCf:342/Uu3R!.f7%kMNQ/OutXro#hWP>`3XHOSLCfGrWi(j\2:+OqB=F,2I.
%3)'T9n4$Lud_@f//Su6iWbD,cU\iRY*MP/ah4(DAgPcW-ja>dOq>Le]%LrUe:&\6aLEI.qpO7Q\-a"%h3[PHCF?OHE'$TDRM1O+p
%OOlo&2pC&,jnRn=K$:'7!&>6"%#mr4<P3!4+t_TXaoj>b(BHi+RTO7EcA4JBYj%*KX?`"P?t9HaA.39UYXs76b@T]p@r(jA6C:ds
%KEaOVA>2X<+.CZ156ecK3L6X6#T.3!^j9I([#e8#OeOB>Vi+t;H9>ip_5jWU=ppDtnN8=h^/@1Pi?f^t/qDk>No6)eBGe`fBoqqJ
%3$V-;TUjQgdulKMg8]O;"Xk4]E_a:6(pKAC;=FZZ4'Qa=YtM][oO_3R0OA.?/$@54,0mWsgAHAWrG&eY:6X;cKXi1FM]kQB'=*)\
%>7BIu8NFZN8).SCaI$=$>Y"-3//o%8i)nIPjM8PW1n/>kn6?)#/qlVK&d@30#8O>06[1G&6Abf=U=nFOmapH>&;iR/Q@:Z_6Q#l!
%8,DKG*"\Hqs7'\-K/++T!1s?s$H$Rk5^Xl0;N;$DQij9Y7cf4u>=+Rm5n/$Wj>`)_7>_I_<G4>r&N?4,+Uu&W@hM;J%o[6G30#nZ
%jOiq\j-b.j+V+sZMF2M00%$=h<X&bSVgpCUoGiiqDqL@A&r9qGNYjDT!>VC*c!LDRp3Pocq")eIJD>:/QWc_O$3<J9R&`R!U[%\l
%22bahGB.fpmBh<7C[bF:5_>f'/3-8QIZRigc=)U/_B6s9;;g&MlU7/i%_?]\[UB<+O%B!-OP,<:@3o6d1t==B0iKTaU.tt6-AM"m
%6ntfK"YNEpD<<ek$euTLkn#<M`f5d4B[7r])G/Wbk=/GsjEOK?;TFVOmO1Jf!BlA$n?sg9rQRWX/HJkqal^?L:?M$lA7YW)!if-<
%HMO<^<!:Cb?((H5,b[]b,NKt7Q;^=e$ZK8Xf#tL#@,iDm!>)Rt8u2N^K&j97\8jgN%Z=_+cK57pX5pLj+#fbb;Q1P%[+$9deml-:
%-`GjjW(E63iB]:70Ip%P0*4!FogWSH@h;XRSJ(WkSD;T4#Xn?Qb6M^7R/_tQitQ4fMCf@<<8'Tq^slsi4p^F!8?qs8I71@pam*%b
%$A!)b-4$X!8@D:?U36R-(jC])')W77?pV'E82l(l*+]@#4e'>A&?h/]D(??6J]B'ZA<GP_;[-8mHooOtW%]b'XpPcuJ@._KQ:*MA
%>?#PG+Mh=ii!kPf#-2e-ReF>&VGWBSLe^=s`su=f(7F#O"'^nGVu^%Q!It1JWrXH^Pp#U@jA%CL]h]5#bXI.]Qj#*Nc^7%L8`c%L
%@-Z0nLcpTqfPmE.MCSZ@3fupl!d:tD;UkS?d\>'F=K2M'(L.4Q&Y+[Bj=1>UEa9LBG9U3-B[&$H-IbMB5&j[h/OUM]aahCM'nIPA
%3]Jt(@0)nV-/TF4\UZ0FPB>YpdaTOW28ffJ#nU-s*C\lUE2n/9UnU=1a7F6.I41m"!sR=icQ>rX0I',Y<aJ?p5D9tb=<i3MK7t$:
%;h3Z=KlU'N<-[Q$YUoh^3JMu?9PDXR/<a3tiYeS@Se\nIfOPsjRVsG@?h=X`=gc,Y!TBcaE-5-XE&Akf+M?P\7&+N3*_#A3kKr$!
%oaDcJ>)8:+X[%&$'FU>0]cQZ`VZDC,fW&<u&.RhU*)).')PGO*AHnq?.;G,=<'Tgee?>*O:GM%U:GPLs=V/A-,%3?^A6K^b6'h"Y
%i$eFIo(&_)f791H-`.b6<"GEj"Cjk$JN*k\%C)g=?.]Kp'*2>HA;5@h?udH6:7)jG$)!#_L7_3BIq5K'SlNeQi7BtJJNnmj:km4\
%a<.=p0MQq2@%"8ih9h*Kl'nVIgHJBI/&[!:f]7!i1^n$=7s;\]Z5*(jjBuE"kS1GD!#$;?>XTG%Lk+O/'f+d)le<Vm$.YXC*3h@L
%%agUiiF<._%6K0h,Qkan9nuUXTQ+Xr0IC=\0u*SbgH2k[99SX6^C0m&e;I]GSArhO/sqDkNWoUm&fR`H4Uji[cnn_07(4Y$qY+LW
%\$ee5ioDDk,DE-p(GphG\0#p9ZYfTFp0'_Ee=GbgmEfuL`^o/I6]pc^bknf)QYM'aqK\qKU2d'US"`h<q/<+EaoU;R'JN6+"5M20
%qL>=cc*'@'e/)IerSd.LnfY2CHKf?gR]g#?%i#H]Dd&EC^37Fd'@CUA%6.+18/pC?Hfl\;lYO#/?7)ZuF:KC&O_9DW#<nA5L+nL&
%U2eB@RS?t\.%^J*T8l.?pDH"1S#Y^#Jk'e+a^N)]f(XhVbe=;n8pC?RVB%\LI8r;/n%J]jq%c"r*:pIcG0.=hihJCOoXYXji3\u=
%Z@k84aKFMWX)(UjUfCieG5]NckXm#Yq"P+X1HCs\WqT-E%dVpf46<sAja-093&Q<%AdK(Fnb4*qUPs"bSq?C83'Xn]H\;T*&'JDq
%dnsY-/r!:[;J=-K2l]@PIUK>oc+21j]'N2fK4+:NL"I,$[c@A<fIIao3:6J?oO2R9*i=8pH6&L$gj'=i;&UTd3coj*,niD96jmE(
%i)lMBD@NK_X/=B`-])d'h!d9j[LO=WO;T\ZNb`<o?loaGgMPX/%-;#gka[m11usD/CRF<4Q2,["4_otu_b"0?@XR6.m*6O$hg'bp
%^>'&9m*&%;+Ur;bqP9<_n`^nqT1FaaEBo7X&Q$YJ3M,elXo$n"d9DYrhnM/p<B91<`WM<0jWsGC?JPK7jLi@_lf$S-j7Q$QlK$I8
%l/[jt'FaL>_="['Wp(.!3lgd*Dc117OFBbVh0Z=I5&i:*E;oY<1TTs]U%WBE&5kqHRnZDZR:s04BSX4Do,7E'<jOuTK<6&WW#fQA
%[]SQf5>-+jKOruB9?60DK#l;WKq$Cs7DY?a\R$L,TG[RP/>F8";M59MYW="j.qcFZ-Dl)/GD2"&5Zf<71dn&(ZjE$/FJMo"1p\ZJ
%nTd(ckkLHA'Xj_RQXl>DB\3PWZjj8lG8tUD`mPsS`VA.!kYa2/)h_\;?.NsPB[*>1Ga:6^Jo7rI\Wfj#AH_d:(iFX8lh`L9;+-Y"
%f<Kcfm4H%6*T-J"^VAOM#s7kZS_^_!YHgT8j/q-l9$]1Wn*DqT<'=4Kf4Ir^FU]#^>J"a="YRTqCUYJ?RD-=XFrT4c]&)mn2d>2d
%gj`tKh0ZF,4PPk+gtI.g\(u4Q[uP[@>BoD@jh:$cJRJnODmgUZW6rA/B=gSX\A,B+%ZT!/rcUA*f7)_7m7+drVYsr8;-%PUL:k4U
%=S?MlhUuh-c+0?>ITeOAJIb]Mg\^AG"%B0iY?git=:=;XrK#Qh-VnnT[cl*$?hu8L-+=VlIDgg-c182Y\Y$U),1G0W^HRr9K`Ja(
%[#F@gC1^pW[EC5H;i!F)349,!d=$[3H&[bP&Kp?h^hS:2rQrus\bf@)3//@a!R`qEC!)pAO9&A!0Y$9k^L4.[)IZ/PN<I:7rc1R7
%nW6a\cdWa71H-U*?2Slj3d`jO8Z2IFa.!Y2S"aSQR\ge#\)Z*RW;ggTC<G<+C'nm73[_4fCic'43?(ObSns"B?tHEWT,EnN>uBM+
%m:p\5lGlq8VNV<tG_[Yacd\(<(9cJq2@=^aO^)snQR$HeVLHa70H7nC$rrq"/<Kfl\l;&3TSP1O13_U8LIX`F;`3kus3Wd`-WF\*
%WT@4Sog^iTVnTIAFM/^n,(>:3)NaUWl7:QL4bXpo9":Fj_]o7i7hrcm;i!E4lHXfWHTIJ+kXCRL!7&Uod:&8ar.&H!_)snMZ$aGV
%#n[o19i;6Wqalk_"i1u2pZ$L6#N94O>FO7c_=XsN_g]?X"A/-ro_8?hQ&+LXdU$k_HVT-aS1Boh86Tt#Q=mje?D<^hB1beU,P4l$
%dqqQqc51M7%]9dY?HpkP\4(0,c56<P.g.45q'V!]ZRmgScs\fm"I9.<lOgeI2JqU<%sf@$h[J`]\U@]ChSP9@'QO<g`Bq'e\V*m0
%h>1jNQ3\=J73rUSjF[q$I*7\Z%iDjT)=8h^%p'Rq$f^n,_qp_*$H_Z&lDgl?6#OZp2L'DRM]q;;Hmf-19ra%i7gOI2*3Nf_CLI`H
%4>s+MR1KeD[@t/;\aA.[p[D9MT>!j,N=t]IKKK],`KD5-dH;CNX?ME9"LtT(RTXP"StZ>[LGOn;-R&%@B6]>r`V<J\$L;"N1[a)f
%pF-;<K"aE3_<64'=R8J;^VI,,,*%&PAA-5f6Y4H:Z.m=u,BL-3cO(DdKAjsb>B*IZ=$M7'o.[6NM72*uYkjOEE`3<!^g"7OIiPcD
%Far?Y*!V.qb)]31jE)BE0G=V#n)8%CA0F-/EIKt<8Kk"Nkc@>2Yf4*dNIk<X=H3A0n[[C/cXEB/;&O.-7q%V"l'\H'3ChNc%G&:&
%fd+dFHZ9-;d""'P[d%_;!cY`'J5?Y9^P2?!+n16IGT85\rm7)<DHh@@Tj6qs3/]dOj#_N<^)65K/XN'h\/I#TF\0J4"T<-*D"&V`
%Zfd>UL#MbG#`%--Er33;A&&X3]f>/2(q]WVX+VVUWDZWVU(rtmb(gD5[2&//M<hI:7D9,:%][*"&UcUuCS#F7ojJJH_T?@-[R0eb
%Rk\D_DC5rc`sftPSpV@*it_I=I/.:WFF@&ur5iC#.6k"F!(<3m`BP]fc7p,4P&MjY`kop2-fV,1E4TkUV:`K1o\pplAm$@`@2,RK
%GS6ZJL11u4X78&"lJH&QBAGu?D0>MOVW72FIPf!38\Udg?g.E^8cu4j&O3=%f&Efn6ednQijGd(iO/qY)EjFl(nKTh"J7AdN^MmH
%h:I%"G=l2urUit9IfBLNdm:ZQ$9hU_.>jTl_a:R2TkL0$G\Z:b^Y!*@43`oTC?J-XG(sq)fYD)UGgcd?S8+Xp6];%fRs+,nHP@)L
%P?\G@f;cN8A/&3'[]+8p%HT(MkKg+Uqp^:)94<k*Rn*_J*k?\-!FuDO<mC4M@lPNd7j4>WF5e7hq^]@=YV1#RnBS.^;%!\B>1Dua
%e41%nVlo6*Xng=\gV['.;<Z%gcgcK2/>i4$\Z,K?PLV!ik:s"h]$U%fY9GE>837T$kQNQAEHhJc+OlO_eMr5gF=^iLOd@3Y]XF[3
%/Yhlg9H'+[,F3CfQk\t<b")n)=:\OXO(.?C@2"?dH/N[e8o21o9_QcTr^fu)c::jk5D'jig9gfBp$ihq_kOThmW0Jb"04IJVs"CN
%+#RkIMgokafV]Y.B;^KLe$6)\Nl,2WP@W1[pU?R$i&"l"e_u^(D2K#/6j\uGn"l(h:o[FTT(L2[j54l=RX7huA'a4+Nco]#FT*2A
%^5f7oAk'/u^_ef5RJ.nT#3?FA,M&,IoF+*LY3O!OB=VW[6arBi::=\,a4QimaV>IZ<.tnL/t>iC6\aQiU<n$4((d<"`)KQ_<.[K@
%:*e%ALZ$OCi4N%>o]GScl_fQi)Q*N@W\n-8)[*6?ei>e!.B3;KK7s*$Ml]m?rIegnAs_`1h"dtRY-5Fg='\?Bjf9:\K7@9t)&hqq
%Oj?)Y:bRtU;gA&V!aH<dH$Sij?bRu1NS-!53KLNHLg';Y?eE=&mi`nl:(55sMf3/'"Y&Ai_IVpT]rP_gR?)fn!RXXoEZ6*f0R5Q^
%7o@+P*_QPh&_"TYrM$CXP;C<:C`H<0C7gD9MFb"N<>g*ceJ@=%fQ'`M8KmqFOgtK/16-X8!9?-sp$:=<%'G*q'n/Bdd,7kZAG>t8
%.Angrc+2>k`d;!mcWbg,*]ZdqhT\m`U`kSVNB'ibarmRXBA`M`B\UXeP0r!:HB<L+k#.,iTuf/D5`BK5OJ)gje>k._BA_TWS^pHU
%L=7+4.DNmR]XF!609Wf3Fru%08fI.QS6!C8O5<B<66Ni3>7N/Arbe<bb>\3!PftDJo8u7B'0n?TOW`cQW#5+>gT4Qg/H@oiX$"Q;
%c>9dEJ-MF/3FYa2#3nUh=u;2c&[S+QCWXOdDEL]D#GI#YWhDtn0/9X],F)]XkU?N6q7rfBq,s,E?fqLrTJ]D^1b26(c1CVX;jU;i
%5M;LGN=(=9Qm\:%UB0LBR:O2cUbl>C:q0EV@4:];c9D/"g^\OnO(:$<<RoTe8UoA=H`C_hXSKXq.!bFF<EL6q?7@ej$sF"p_llY.
%H?e(4VEhh+6H!r'[M'WFrScJ495aj_n8,d^WH<[JBFX[`kXdclfB"uJ::9$G4]G^6*W$Oe!;g#ob98kWVNQA1gns?71E1a6C%t])
%s%VFUdB2rtZ6,!MZi/.R_;r$lWX\54.#[R'WO?m+@eG4<9sB=("90-B._rXM-+&TJ4EHC:+0]oSF].-(`V[>gkmf-IM&lc:-$hS/
%N!ZU3?4';_#43HL/^HZQE+Zg="D<lrbk"\l11Ir'8uciE*.99:ZW<5eL(1.+mT/Fd801t.AhSh?(ngH,"mgj.(luGM"tJ_Y]"_OK
%gR33G:+*[;lbRr)QIruU'eCK2\0S9LG>YRQT/[4.!Df\/gInZo]R.s0?6<:cg"4@@?p6O5AP^d,?AgrK\js=g+E/msHIQX0+A+L`
%mEQ,bK7mitd4'1aj$W)^+a0g2#T5Ee4?d=L7m9%b-KR70q,5d].1e$$AMB'AaJ4Y2grOLKH=?+$c&&h[+2gANaF_4g?n&^lX#8sY
%L".6n8cPdefRag?fffi$GtPld/32.gFDNPXb%dYb[I/8M,^VocjhtKC'25A4[CS/In8m1U0(DgTEQ^[r*TnZ$.cC2MZTk6jeB!Pa
%gDR$h41"_YF/i(C-!?R>=&88F18q1R><q'j0O;Y%Lkr`1KX[<-diem)-!A9F[p,gG@V5m2!2r^73S7?`/q)UZX^C2_+IoHZd@:Qh
%HIXB#[!m#e::IX%%uJA\`V_nDQ"N%@e0:mQOsc#?4?]iQQ*4Jr>Y>AtUA=3J4dpse6L]u!Xb_'@A8K@F^n2\#fM0%nk]!If%Hk0_
%b^5t^/.%<N1I%2MZ!km+"XT:hNqJ?LLQI^NO@hB@O'h!n$n=?,ClWi79?e\IdLHQW<)WD]Rh_%D<PaYGH8@UW#\E]^.!opMaN#6]
%bk'THgM?KNc6TQ*puWHG0AkQkk4n,0o6[)Mh1IU3@6/kF^il"[S:pF^Be[=,J^(kaXZt\fmJd61:!$F[\hV5<I@h%_dkr"6gl`_'
%keQA<in,N]'DSK1Lka["J]rii590Xr:/ecd\?9^Pn^Gr"+!"F/DCgfj=@^m2])f;"ou7Qum7]$\8dS##)J$Ip%7jcAKc_9]StYH$
%`C#]9K-\4i!?HPHW'b=#'l/!pgatUfG6*+ML[MF-g_AE50aig+S6sY*+pg=-45?An8/M0]$.UUQmajU_Gc!Em_!<[br;9gJ"-=G$
%rRbhj-ud)#LRu[P14s-><51.8]o]aGj-cOPo8,X31BqOG5?e\2/?6J[l&,^==^5\6m4PR?G^FH'P4/)P+(K1n?$n2Wk\l!Zm5+'i
%b*Z$Co<r2]NWmh2%7W+p6RQXHV1%u!ZY>]^Blc`"Cl);g29rBbQ+2H>;A3PbquIj)qRgbk3Xt+1Bf@0nj.2T\pm%)0i&f'WjlIbt
%p#3J;nYL4J;3!]Q5bo-Hp['[bj+hf_dc4t4/+l@J_T%PsOYA-AAB="q.K7?-bf,*q!3(+L6^&1U9tB9h\;Y+_OKBQ:2Xru%<fS%/
%O*#4J#Mib?rK3hln"q9t>:qUS*e&jSc6N1FP_jUcOGIZej1UuA8@!lVE:^<1]:6!,a)5-W99'j=?<W2V(Y@c(E62OMXe**0W)ATm
%Rj43T@IZ=$JS2Ueqt1\4dno(X4peiF`n88Pn^%coU"D=,rn9ptQ.cC`hi[55D/;;.!M*Q#g!t8Mg5nS`lOs"6(X%-%B9Gm@YVnZZ
%!2c'M,B(tiCJj]_;cT_u90cZegtrbeXnY_&*:D5g@#"]F?eKb<i>WX%Ku0iOO%SZ!]ed_(N%n.IqnmmRA_&^RE-InCj@*?\I",We
%cL^+;Jhi%(iH@(k3Q@@E<W8P!c8r(3F);2H<">JY`q_e=8+tfGJ&:,,D2)<jZRo]=E_Ur*dZsr+ep_g?b^<bH'A)N7F)2Ikjk2V#
%gMj=01q(<O2+q>KehapH*%^OD^$=s+%G>#$'6'o[gUB'BT@uu_+c#E[6$.Iuf1p-t*@)UHW`_V450p@4?c8[aR3UnAj7e#RM>`?^
%r$YHR]_]?+TkRL6pp\r4-^JrNk5T*]MRQB\90UiGBo):h%?K?"1COQ*U#C=Kcj5`"]3`^>qd.Li5L,14ES$+oq$^S'Nt.ffS_3O/
%=0rlU2_OB'iq7I)gU3M+hg=%na0YLHHhM"EjD27PZ[<sg!4/1kq<0Ud)O<N)K&K@,9#h6Z2[(9Bf]Dn0lDt8q>f+VJhbAH:ZosZ*
%YIo7d%n)&[qDVo#9sJu&TfgL)5IX8GUlcWUdO?N+N-@X#J/c%bkjUZM6VqK6A)..a'E6EV^*7R[j\^Tk<L%e&]7XtET2MJ=RAclp
%[@*%mF,BqPS#MGM?Ckmhmd9Y=*qoE]q!rJl%u(0Pr0sI$B'[ApdK?srp#Tn#$HE0!9T+K?FFBW.Y]1.Q/=7"V"pc7GMX6pAILP]3
%kd\%=IpTk86@KGAIgr)(nF(*No2,<j^@"ZjSP&H2M6<sk`?oUUrQ$_-D6=oUjNX2QZ%&RC#ig)9%n]]8l_X83:"R7uY6GKqj\<rC
%a1.;rpL`\,rT2ihiYf<Fi)WSb(p>BqD*8_Wa3MBciHJ4k0H8"i?i8E!Y&G+LRHddS6>E"fj]#e9XER&0C7GN5j;#&XCUKC*DN.-,
%(oHcPE!4gt]rI%a<EFd2RI7B1(2H<ea0!XF^se1GrY*(0l\"u$hL&QlKkg$F@'P<8c`]!%Cu[Jf>r0Lo'&`,R]oClE\m8E/\A",9
%jP?d=g,i'o82[TriBV1jPC.QP_8d5hXH(>Npd27hB6ehDicCIl%97_>_Geh.Nt/<68;3qmZ#G"JqBP,QN!%dO>nM0]*:jhkTd#lA
%LhqGX'#;*s<6@kc,+tbqH1<m,LOX![(/AYe=q$*glC_t_Z^.ddn6*EofEG1W"BCYQP)1sLlLnbPZo]miIdKut]V0f<WRc2Cl#EA&
%iKL4_Ap:)37agWmnYt%o$d=&PDUk,[?$Uuk;uOmG3VjQgq63<7Fl^so-\$FfoNklH_4YZM!9[kHNd-H3;V-R6`@E2U[rpL7l<1e'
%$ut+#eZaQK4>,P1=L^_-`juW-o6'_/I$EHAq7(qhoJk4/Nh8t#%jZX^Qg536i<XfnH'4RV:L"Z`g6\'fES6B22-.^bbF,"9+q0OM
%44Eh[rp7m98DAD\r'5K)UVfT0M%5GYG0IZ'a+SLqFsai./J55]';6gdDhJu\Rb,.h7N"O'"[M=Rj*E*Vm$M_n00cI"6q/PD"C3=>
%j/=>?qC@NX]5>V=eU9(-Y7>@/<bYn(OT'&Pi&rMc:g4uNKmmu7`Eb,%68U',Ff%"^$`-jY5E/H4kT!78,egfo,tQKTCE:STbCS/J
%Ek0NDja2hg-_,Xr/ha&0he>9%d$:7o?VU;$Bt-5Hm]3rbp\:3Vp6j*e80Xs7H+$9k4ALi=%X7P5?':nXDb&kt)i7+?g3f-`m(B,R
%6Q8JP"uGjAk&B"N2ukG,DErq",Wb#9Rb-i;inACk9$``BX]h*'X_-l<$Il(q_HUPhp\7C)>njMWl*N[%mQLA:LaYq[hN5K@-1`'Z
%?DTTlbu_CQX%6WbH7*n>!&`fS=mDE3]0QRmm$WrSSrPdO>he0po(c*ua5J0aP["QP@a@KUH<P)/(+``%QS*&r+O@1,XdOj=rmfe^
%hhBWPYIG/nSm0jMBYNjl9R+U+\8I4aFoL>Rb!tsFe\cZ"Q<U$i^X,l\0f.0%$<>9GI!t%o-W1m?^XRo\rOo$b6<2l`=3-al3h4(K
%JRo2EgD/?!cDp_/DoBAKkiaHhAt[?8,_l<lR<eKSgWP^(J4m24/ZnFs]'dsA<j?34B&6\ul3O/Gi.(R<\$OoHk[*4Q9_3X0B/=7<
%lce]f0VXdcqC5jsFCcB-'98GtjZ1cPD>K;OqK1$*T!oF4T1`e.W\&Rc0W8K%]X"=VZhqNB3Mp3U>qq=t2ncojieh/)JV[gN=n0#H
%3iW4T5WTRb:\R"8ci38p4"]W[g+Nk#\d:J!CV`Xe>!$\EjqIa"&cXC]cAt,I/(j5N+6TC?_GcfT3+p6naQZ/dLmfgNrn)gu]FdIP
%_#7VP2#GEY$,MEbU@8RDqq)j05Tb>sk:XSc^#3PcoXMM2k+_eq2N(SH7ogJ4[;QnFl%iT-+Zl#_QKJq(CZ7rpBrOo<I2cd;QA=a-
%CP^I+n_64m5"3:M4hNRr9F1-X]cM'HgB],#q7Q$521#qp/m&Y8nJX$%_HUE-X@2sU`t2"aWgAPo>$&7_=;G*t.?G2ZbBLip$Y*[[
%N>aZi&BBB<(YMo87bK/sbt%EjDWKeNgN"QVqqc)o=6.[(4mW$^6Pk^G4P00YJ$cOa:ZCt?_t3J:l)(A]50F?lrY3cb>_%W@dg"o1
%QiLaBq[mB%6@imk0?!]KW@r=eXsMIYjd^JWb]s7?e2LVMc:&dNj5[j:IpIP(mFSS1KZ)(X.XH<qm<R;)>S+LoAP+(N7XKeWZKosS
%BEE;l7+*C@#K\u7IIU<K)VqFk4+hj?q4plPE^)'mS?$9ZbK'-+JF6u<XUHp4"8*(QfFDk`C#V8NUSDaM$sZ4@gl2SPOn5osOuGu/
%bonQ8O'h=#f,\FEX'N(!TX-$&dcu)/^?Z-29W0+N^=be(ACr5go]l;aq`!m4E)%gJB0QEP!&_p9_ZR3p$OW1(0-#23_pW_1RCMHk
%r@DOZF=I_s\2N[c4JRk$/3P\I9%G[W:B0i@eu*p7L,b4^]\i>+hfR?PTZja6fsN[0CZ1W%C7q'IY/qa2';.C9-I?Oe/FdpqbrObu
%oCB48`ZiC';Z_Ba#d(;6E@b:h^4d5]TlX-!T"+W1N_I<uGs4*9?KHoNK'*UjGW<"7R`Qu:;"'qEn%ICqqfQfgHt0Vp/!`X,&t8<J
%&q_R30m.%<kI0`!bmZi)0[(Cf5Jiq-I66!*Jui5<'%BELrHnAkDEnEW,>A^i'.&q!NCpDb]YfCR>OnId&5Wj$`(D:hm1FN/`_lL9
%9YSY(SA2KMI4Y[62q?l`KE/VkGcQ1!7Zrkic8:T[#h=TjgaW\6GCKIM+0E<&&-.Zqn?_WfG[lqM-WCMm*cO/2`'_*7G*9&MP;fpY
%!ft%M6q=MY>!+L)CLjT'Zaj*92N_Kf)3f#37LL\`CQ4L^2!p.74QR<uCeg/I+dcr#-r3)ek@TU/](]IIaBMfh!4?k^5Nq-/He,0C
%0"BcmJVj=LG%1Lo?E;J#8%TAF`lH^Up*`5F-4bp*e1H<:/Z9-t.kh7IemA<-3b?Xq.dIZ0p[qrt4oY+M9\;1]chuI<Nupp9I?b43
%ZZY5#grq5R<sd.+=d<%?pT//gSdYKG*-s1`(F89*N1ndl_XRNpmTi%<6a2C>I9;Qna]q$mr#>dk,e4?"1"/KG7V)fskVFmJX2/@`
%W,]!7RNHQ_Z?Q@]DqF1mNoM(<.T;B,#&&2^O`83J>d>t(5Jl$Eb=j0;\?<aQi)]P_hVKOk\9J/5hQl8VQK`gND$0<5iSdNE@]kQh
%Y0,L&r:&!KZc@^^%-Q]ZJ%,\FNdr\JpVSjNWn[]ML4%MV4_kL+2-BbJ412s?.0e_/U<NtqpL8q=js1,oK,MB=1JctT8bTpHQ"Wh/
%D-2ofp@b9+jdtiSH8iH.i@MLdMKD^3_nosDi^TjRm9??bgO?eQ/Vk!$D-fOISiMbOLYRHu>6ID]&DQOaU@^1fn]FcqaU<b7()@7L
%YM?L3nen7)ATWA`ko]#`IIbg#JF>&the]@MZ9<$eOWTqF4[^1UNS_s:rJoo",ckWg@7aI"TXdO55Tl'5&l6CJ2>R<i2br2+"^^"u
%1)!c;"%Ec-8]*1DJE53q0Y'*Qi/Za'RH#%iRV'n(*_NoY^Q59s/g<R=bKtNnYuZk$S0LNZ1\ftk\6^YJc-DcX<X2t7d]G"GFIj9&
%?aG"g#l*uV4<P)4gMdP9<KNJZFOXHuK(#lhIF[7GPn/D^N8-j_kPc-j_rJ))a(HLK+4*Z*C*.8eq^KH]FRRBPrF6;/a;`sfH3QTn
%#/aOF3#@8J\Or0&":ifrp9E!OCX;IZI'sXZkPN"/C6_,0M[Fmh*p5I/Ngsp@_9.eDiI8R;(0>hbs(Psjr@Q2V%Y7@k;j<kS257of
%+JL)8aDE6P\--`]M6pfiYOoqeRH\h5$OrEHa,]`9:BnB\%7a4.HT:b4fF>l1>m%8JY=+u:is1q*[-pW3eZR=(kep>3f>W+FV/[1c
%Ar70@U([\NDC\G-N@.nkppSXc[<Zo:eRXBcFJaR=*@@iQa5X,:kp@Q#;"a?k+Z&FuGiWUoAQufaHhE'bPn'tZ'VCu6^<Ua:A_l0Q
%lhPLQ`g6XOE$IW]ILYC!@q)%?jYdifj%a=!7I7Y8WtKY6J%C0CVb(Hi'DD@lQSIC]/>!ma5sE?-FI:8"q:5.+`Y@m+K2#`l:kK#^
%J%T5S)H>Q?8Z2Gu8!P0OUH\'O5<YZ8^P"#-rUD4e8OIfr,C\$3W<b;m@Ff#*l>u1X0^s.Gft[5VpB'MD:+$'dT;AbFIR:o?DcqDE
%8u*[nYAt6"&N"MH6312ZjI7"(;b50Rn<Ask:7WRDICbbU*>i:%KiO:^/d3MaSBi;hc6ILIQUu@`FHjWEc^UgH9>F+^cC!qg.BT=b
%9N\pmZ]al7/l"p:f"UoIM!6M#Z0u`ocm`WMrH2=23kVS8/,;@K1%ji>+45ahZ-i?8EYdKp<3tP:"BOehF?8\Fo]<o_LVHN,L9"`)
%:/B\#%%G>NXpDji`ea'pBlo0'"1!UD;dW,Vi:-Xu4<<%Gp;]NX_IrRG2@r(Gm?icp!#%P>OA6!+(bbu];JTZp4/NgU]pJ1J#+uY2
%>*HaK(`-5AJK`d[-h-Bifu^I3(T/X>Ftm?0q<0V>,CNEWd^Js+iS1Z>0mKrV#J&p7=^irN^(facc\75D$0Nc$BJ2r;D'faQ-/YrM
%Xj'Fb_hDE43k+,5A&4Y.lsUEJAWu%5U0s($Uh)Y')T.MrOq-Q)OG+aD%Nhr:+E#"roE,SY!fCFdXY3P@4@1"P^?^T]+!?/R*7n*)
%B@0D,Q,Yi-JnN=Sni=g.Nih7Um\LaU*pHA_U;MV#;mp1)):6KA"GSI=,rWe$gP"8<;$@564jFUih`4oE8$Z_Xl036L&FC2(Ei@p%
%"VFLp%4KkgNpo")s,?u#K>TOZ<*5"Xb%-lijf_UX#R,uo&mKMTEHs[rdu\#4G?VLrDmle"o=tUK85GjF*ZV]Ng5E*+FLh3&mX@8i
%/JmlH4sPG#-,gohL"h,2$*oG&lN&m!kdF25'k<_`!6;=n\\+9LlnE;CNq%UXXm'NlB4e2n;@]i5)YKeMrHNd(>,hsc7i*uF>YMSJ
%_bmEYQt]LKam"nB5s$'/'"pY/^u&H'L06=*)_e'Le-,!^Fmfrk?)LMTC?:uign?#h6PBhsfpFg<8C-8-$h=k+I$TtY#G!``Hb"#6
%G;+-jd54p'"kaQO7NP9DaWs'cU0gDhD<fuq%alX_f$3;FqoSg^j-i*>)sFq0#J_?'0NtKrHLD:A.#SW;g%b0bmT'$+!^cXh6jTAe
%9+T=`2$.p%LRoeRB.C1j*9(#[?IsIpJ=D2<IrjSZ+h_-V<3-8fXeSYS[-$6@rK"rs:S!dFqX_HqH#C.!W8tM/f'9VPQ<#IQR^FP`
%+[SG,mg9S[A>>+g(\_<E'h#;/%4%[<fWY86\JAuHibqRTF(!M^KqS+,:uURu.4`<[&tQ4LN0P+.&eT`tPlK[nm8mA`V,%R9a-R#p
%/51;\rP6p%,td;u$PN37Oe=RsgTUu/G4TO@MsdCGfn?I\qaE1aKDg)s[23mG[R!f6($+V?N<n)<_*4\Vqm.YiZ"QKlA6-eYI6@P%
%+Ra\]Z5eheAZ4k.Uk!@d8QK8&*BmC@(h;aZ/V0XYhJ>ML<IlGY0E0&,!D[H^P'VEV1u'LP9ALh*\gd$=%9L%*3BsWslV!#"MceYq
%6&XUs\G&m$i.bS^9gtBd<S#]V*FR%cL`7+.^;d%&^8LRDN3<PYGa>?k3T7oNknLM$Ue'poLR9_6LtUn`5MVmFBDk#D]_ik`=Qaf:
%WYf2F;TTh=NYpk_:;t^td9.kUe&1])pJ5/IbLsdOGFujReZj^uGb04dr,oS]N?A`d')eMIE#aAcaE0>8JlJ<Mlm_X[GA'ODFr4`9
%2Uu-N=L9l5Fep:n9UJl[dFfXXemWhuY:R%.m:uJV[!ps,M;th/n("1'7"MF4LY>]]U%Ba3[>?s0Do2UcbT*6oNgpGYP-gJcWl'GB
%4=H6hL689!6t54pK];"V>?e8oLdEJVVQmnu!p>@8U,WiXa38P,3-1W9`mP_iW0`UE6Q)E<J"*6+Xc*VRTWNb06jo52a%&2-JC]Iu
%)V=NI1APU(5Z7RN/\]q1r?fKJ^@u"5pZ$K_rPbcjqXHG?/\mR/c`p*kP\O\4X[Zp(?"7`#(u-=\GPB+L.(VQY.Qk5,/VXQN\tqfg
%?dP]pL>A'32Y11kBaeB#V1p<R#c++:E](U^$khRuWZmbomm_Ul>[us&1orT19YiO)Isk3LMjrBhOPJPp6nk4'CkAXrcnMV<h!df]
%FfXBS($FCT\)A[5'%>fR(X&?C1<"Q`C-Jm4T6fd"9KCP!4f+b;Z4XX4*u:/n:\WF;#3Ci"b1Zp>cEtiHkB#)<;5++3)0VI/>!b=6
%CXrp63NNopLj,RV\dkdaiu"r)!b^Q6emI#b/HCr)((GIE14]mi7aFY)6(cM/&m9R3hS\#N;X;EeZkdV!!^6tPI/:C]%hikJH`S0<
%@OpsFH7%n$6a61o>LMmarV__e&nE6,^>H#S/uH>Hs*kh2S>E^9ZNk-`=rY5dk)[ju>"]fiIlF"+6ZB^Zjh:+^Z4;ZQA=pnpp5@&@
%k4$('1Y[d+i5S[aQrsDRf_^`\KR-`l`m!PWDRcO@BAE-@q(W4$5/kX/+E<@Jpr9N&KT*7X0['g[gj@@CKaCQQ:sTCE+XK@TZI0t&
%#W&L<KRd/>dL@QJ\IrL(7/)jL@uF&magA>s2nB^,d:tSIdeAnBNM/A@8ilnQ=t'uh^o+V4_98:q(<XDHH6,Ael6Cu/DPaFK$TY25
%R54_&C!P]s[-GP:GaIAYrC6\$\X_(r^;M4ebTZRI>!,:QbRX)gKe->o,:d5\X3[XbVHOJh.;6`8$'805K[u$B)/;pp(X@#=Qh%?l
%Pp2L%:#'f[B8_>Q$j(cj%,4rr+KTOSXfI@hre6o9jc1peB7B6UDogFE*&?b^m);p$D>D!;pNC%Y)J@HCO_;M1$")^Or2&oQ*aqZp
%`a@;1I%a:-;gfOE'3/D"_D@.UV0H(8ANi_Jb[I9Um8Rb6N>i\P\:,DkQ/B.i8mZ*(B.ZiLA'pk;>]3Tq9iM(hd]*?2n>c@o`6S<m
%mb+LImX8Ba4%bDM/cV`Z1K,>g$0g:tYrfSXGtm^n#Pm,>:gCKPIJm9k2kC-nXL[*r'jE?YUZR^uP2E]@A"E5Hlkm3(A@.?;<F8pb
%?)h\\6rC[umuhp*ZWMY>gJ8".hdf]oC.H-KcAn85=rp?u8;qP`oU'N4IVDk_;Vd+R4-E$Wr2-(lfBDk]^2b]\ibNM]O<BDkqltm.
%JOW_V/3OmKT^R--MjaM"CL)Za,+n)3R!qkq2X2P1>Hf$\dEp.chMRcGZt^uO@P34(Ye`GJmnl:a+Zt#OT=ftAm"ZlOZkj7V'.>C:
%GDQ2Gr5i?j1^fnl7O+$'ptULFi"XiVkO"Z'==#50_AVAr8?)i!TUG#nI='(S:p,MFcidK&&@rAFE>mLG+X@PBla;+ea^j7I'pPJ6
%8LJ(=\k#</HS>1$qlrs#qWt1'gMj@G1Ne3#,b;ntF`Hp',.]jc&6$e:9i7.$^,[@Wc=nl.7LjPeNkdbcdlG1CKmf6M_`BmYg>Om(
%gV7%&6#L<=Q5d?7`Et+7db?6#Z_+*"ZK0A;Xik4]?-b\LaMhea%[V>(eH1*\eNYdtdob,sB1"6IC/FsiUtZ<be,ip>UUZ^O?,0u9
%;JMV<'q+!s)/HYpV#_VOds5<nFgmMX;8pOT)_jf7?h>n*k58,I3qZK41m>r?JSb/KGTP$DN5Z&TcIr@I]pM@.Oo4\e]V1ri,^8W+
%\N.ce5aQTUV*EL*4sQ'^,]phC-59jo_@cdFT<BAIhl9/O1"Q\#qUlFbak9('iDM*nrjlLiGb?fJOA64P,/-pArR<`GqKBO'?M&EZ
%H"e*_fPKpM??^5i+;&Js]).7DEi%-t*H4^u*sRRiQ"u;k/"^B)?>(W3'pD=')OABW$g4l'O<6([5.&UV>]q?_J@/f_Qi0oS-jhg;
%B$,`#Wo!chg%oC)`%9m:@R!(VH$5'qI.O>Oq7SG&D:>>8X^ck0)1\edPgpmnQ3nhTqt&FYV7rj?eS$?*h8gR<F>tqJZ[F@C?,+Td
%K\Cm-0)p`;RS10<)ni%R/uX8IKCbcnX@/6JNX?`tWIFcLF[p^UZA*@;-(L3bI4g%<(A;#!)G8qST31MnrcbB_LOh%JKB=(SmQTM5
%QM^8*MarK(09OO6os6"#J[615:bkANpk/9@FQM'qgkRgZ]dqrb*(4LQ.2H.N-]#?3NdGLY@r+pPCq;>(Zo_o)[5JqUa[)km^lg+%
%8G1&5^ufc<:Ig8pZ^-OuoBZ#n:IWO35%fZ;=iDp\8''M7>P[f2$m'r>3%&'6juCmH'&'4&4HR$h&*2-XaO^sC[-!0hWHigR(=?B@
%U17q/*+3?dqO+p'4K(2:-tbgnP\/.'MA6[s#6g?.GbR0Y\MDrJ.qi.t*>X=8]M*a)Y3-o=oU[]FQR/cD\bl_R7Vn%;aW6)<9I[dB
%nf?=T^[Sa(.h^us^$sY*&qoMMIH'6tnG`to_^#!=Rp',tdJ_&q]Eq2=G#1"7,pm%,J;AT20m;Y@clZVt*P^jYm]e\$Ek3El,S%Fk
%ZNg5dQZk>rc8cSU;N9lt'gJ!sRe3b_7:o^!&TTAoD59\moCF\rJQ6[LD"+=4Qn":7%X#mZbg_lqnuGr+<D-a%;kG2`P=F_;0?tJf
%NtEA11eaQD;ZO<akO,%cFJ4f=o?aj!Z-<UT*\X/8p83_kGu*\g;TrGsanPK9RKJ5h8g?cK/cV&A=K=?Yh4)p+gu:P`"[]!.d]loY
%Z)$Dr:l.bi6U5G[T1s^Z0MQE'.[f6'S@?[>dfFi7F)o6IYo//_DhXDl:Q9G0e#k8FIF!)WPJFR'L-J,B3U;#('%Fb%Rn6Un_j"_f
%3I>LU"gQG#Wk:X]fTu-G_\o!%H.-[bfQ8WdY\-2c?0DqBZA#)'[(qaQ1D@&+"LtVC.o:QNMTrt]?49Wa?A(6BNNt\f1AC58WQ(><
%lV6,HPI#GbUD/.f^9,2P%IoRVNE*pYnB9;0bI;b5Qe$dbcd@6LCK"$J[<^rl++*k]!e>e#rMtGJ/rF\!KEU4_qjZKVrpGR!rptIq
%H+<ZWroK&frVc3!s8>1[bRN='ZhKb*i*1\W?P&;3oCe3ahclG[Xblf:BDMFSrTSP+4T<71:\0T3hqLs+Sj_JbhKAglX*S&odNBaV
%p\oNS.ks#3kc_YjhgbCH^]!C-DsmSRH+L/2nInd\rm>BTp.<U&q6T_]1JM45]@U&hlC&f>^^gcBIdeZ;PQ(E)#apLj+Pjfr*PKRm
%:<tf"?RQT`A97LHI?h]2UJNT&Q5oMMf4l=1+$^sni*"O^/iC;$ZHlB2l-d+cO,98O^[dQVh"ncZkF\4-PYu)&m/O%YB?;:rQg+E$
%e+phEaLg[KSa.p]'Z/]`>:"$j;V/U8Me(/@knV>M&Og-tOCYC`P10k%,Pd9t6k.kX^^D"oR0#oj9h0)V/uCVT"m]&1'P's)1"%Jc
%F<[Y,=5"R[Ma`=SZrEN\n0i5Dji\qsdh]3215SB:CK;b^X'N1/A%UAK6(2]7HF6SV9>#msNZk+j72HIgh`QJ'(?o=B[SrGh?M_P*
%7NHPh<#.uAT7Y+$;a$J'EdM.3]T3\)?bHleYUL/l)SXMF(Mq&7=Npq>#rZIm,_o#7=0Da9KD?d%"Y_[%q.+nG;qB:?f]2H"dCSR:
%<o`_bc];pNgK0'JDM.Uk#q%g?#:Y?pAFsc:X&X$GJdua*0l!DR;<lA27>Il5*l<M%ZKCPj2agj<N2,`S_%`05,f$`A@Ju@r2#X3B
%>8K4Lc2Uu`bd9lO\Mpp"Q3VfJ@)TKZ3=g,jP,!7,1@JH:ji87K[!\e__!(hYI_J$Zchg^kH3O@i#="X;2bB?!Gu^]B<SDsZ5Zqi-
%WO7n@\+-4V&6Eon6KF5U=@4\7g3_1+jQ;&0<sV'HeoicZl8Fl.ro[WWDe#Z6L3_U<Rj6&(Q6dDsRdeYa3?4s3hIsVt@#Ciem4rF[
%!/8LV9Mo)Cr/T)3!rlakaScD6>3GRDGW\T<%W8+AE7K5V2=`d82>*nYJDS?:q;GCh=>JPh9Ld3Y4%u@.E7ISu2CW%-J?bX_=>S>k
%YC@:Al`FR)d+skMc4o\Jdis3?,h!_;24g>&ftTP>mEYSkl]f0-NRce=2PtR<:[Y=Q,R0h=@Ha%G+Zhe02JLNC5?SpDjp&uW_\R\<
%:OtjFS!((>lDTl&NGt%[USDG&5neGqC4WWpVm(L(2Aq`*>CJBj7>5H#CRBFB]kra.d2'R>Q:A7<KSPmNUnWLq+fYWYYMZPU/b1;M
%dI!*Yr4.ol;;9m+1<hla\[%oaK(@4#p\ZG$EC(+\REd0'8%tqo,=g[6[GIi9(/YuFr3Qj7-*mTZnNPtoSG>?GP_luA/U-eji\Nk,
%St)sq7rc/^\'YEQI(*MqDE29GBOe8Gk?+N&Be>X-)jh*TAAYutTR)YCohr">`2B*s5%cU=;4T:ICM@S1pf&uFe.O?na!oc>m/?(+
%jEdF?QiYN6p7UGIR+/#7;fq#WEla+WAa'4DFL[.)ff!nt=-))7ZOOs`Zm$-lHW08r)HrtcS2;<VH8rpqZsg_\?HJoQ_q4!(6J5mF
%Dn7'5H*3^Q'@qoE:0/l4e+GMZ.p`+*,Wt2JiGZ2K<Z`]bUhQg)!:!U36ZU>:9AGlnK^_fG=@Nb?,2@943^e78-@[(creVtiBs4[2
%OB)rfS,`lU>09`EC7l6O^\#H(Gc;(t.5qtE8^bsCH3!T9fYB^iWTK6b3&U%j75*G\[b&-k]cO\/cI*"dCpcuLj]7!sdb<[GgWXj!
%DI/bY1q;3b0o!`pDG.P$S,:?oWU";5D<rcOqW,4K,YY+>^/QTF\P1$Q:,S^Qq7FmWKehT:gV@)*o/4t"g!%<8HmX*lCpVAj>0&pn
%6G@nrXcbd3B<gXK0k,\'luRtmqA]-*hgAV2+.k2]HtI(c)t//o0@Y1ae)6spdP/q+[h=a'L.Dr5%*BgZZ3#gqO?V\g@hb,!3!*sZ
%;sju@chi0>5!68i9VB"8%2Y=0,<g`8++>[]+cgeGVqfq>dR/@c=`0W[]<GYo9mqADUQrVnV7:e;WG-Fqgku3Kq%@QabG`KI4_hde
%f[\Kna%ME(7fj'5-8EFK$;&ALVYG:m06N/sG*fRPXYhYT0s4/pj?/*d":Q$u`V'56lS"%hnh6?p#gd&82goN,V>mu?qc]l!(4q$=
%Sbf03R!XF[E<`D@XiA>M`ht^/$`I52A)aq8<9kg2n4ga)aj5$3A+o4_(Fg,"W76QqTT<t'9S;XW28O6&`iuL<X$dKZWa3Q`Mld,a
%A3#Z)c^J*%?%)5&l8eAc]crZq!Ajn`B"tH4PoX*&JN>q8T;o*po6!MhL(]T]dBP=+LHg<GQCtDbb2)6]HQeO0Z<,43kDrldN#)mj
%9-l_&1$01ijk-3H'U,;Z[UXTe^+'^rm\2:'RHeOH@NQX]flR=h%'IYI`e7XNMlNlU#aJ1.V'.FR#KXR?@B[M*($8Ds]Z0X3ci'OD
%(Li%M)p%Zk[qB3@[>!NZcKT.C+srqh7ZLOQW_sJU+1H!,j/A2NipPuSeohk;E3<T=4:gEMO-Mj6iCr>I/r(C4D!pu@/IcoHfoBg#
%>;VU+h"r)kO5XD_!1AG;EgnM&k]oX+B0!0FQ47;om`__3N4'qt4b_Q/H#Fc!<>B?-+91:%0DN3-kVH[#,LS0(6%Se:U8Us0'dU3O
%[rt0*R^hGZB,Wru2/ACJ"DSkO%Kt7UK"H0BZXN]is/C`+2Q<5D,r[c`qK*K<l)a?PA@%@*#S_DEUI!T[8ARGMQKp&QjQYp]7F<98
%NDL-kM%+M@FsDnal"bU`hB$1s'sl,R;&Z"CTJ7Spg=#[+,l7JL$Q?mQ/]B802=]W3JbuK[1`".P$ZQQMHmtiq7uV12!1JS_h"a(Y
%gO/_6RHUe<\eSW-[[eKjK;Y2BcT>-EJIS[C[QOb'WX[WT6jf%2E.[5YHks?!d9\Q,B,BmYL'fJahqk4H-miag;(p:c$K_BnD-6"-
%2rmE=r<6hVI,0(#:X/9_CAZW;V@R>!SX9-Ac:^Qrp<cN\X"g_/+Rbs-iQKB[kqgs`@*%)fm5E)g>.,Dl8`kbf)@Y-uQlf7CJ&!fS
%E<g5Zd<8ZP<Rp"2Z"Z>7.R+O5ql[/hE[cC<PqKEbW@tS$ZA,j[mMC9%0!1cF\5e$EH7bB=L.'XnQfZELBi9eV5U)+%R'IGE578(`
%GW2!/VDjZILRoCa]D7geJZI3`i$cPZU/rGabZ0A?'!uSE9*IfKj"aJDSk6D8;6pA^a2G'7VT7-(OePU=6sTR`#$Q4Wo+P=1VrIL<
%DN&5+#B0Dt(lVVWj[RD^qDc0Ef4YmP;.j^g)NJG%8P+0"=rqV`'U^_:=d&h6Bta_YNEO+MABU`I$BG!_muc`OJ_-q:6q,('q*ZpJ
%>o=WIN`B:$m<F$*CX7_cdS35QO7%ZrT;M`/"M8uI0LiG6+p^%X^_d;aRVH"4^2\:[1MNp_#-(<YjecU#mWkZiPgd!)H1L-5q"=D&
%E:$[-'g<&p)k@;oTP6qT#W.9-[+ENq&faUG3.!OdaW1b+RpoY]'/u=A380KUgKJTJ,1=(J'B138gui6OrMXSS`P64AmE3E(kdj!u
%AuN%H/ciblkG`8&ge"V2fY_B_\[QH?d8IHDo=42>5@d@97o3uP"K5Bd2q&cmZCHUF-#o=g:3s7YP)AEiP8ACT/&.A$4dlb9INus6
%psA^TE5Sp+0pItngMY>P4_!%Ph2ST:A'mlQ%g-GME<H)irGdtqNk*bJ<V7[V/VYc':<u?)l4?nu214l;5B[ChL\1N;%mU!chu<,c
%!IEV=0[pR3nh:%2\)75SJ,es2s8Fq3VS*/mH2,;S&>!<@O$Ghrh>CR6#V26&h7^T$+>i-G#Q<uGrU\d)ferNun+R=3JimXElTas)
%D]s#T@#!P9c$P6i,u^/B\%B)ogQ22bBFUDBLW0)U_Sq"0W<l]Q$'fBIUoGOc4JBi!n("1R&fGEY8]mM4URUY8"dCD`("[;(%k[=7
%hS:VU_aUHW<LK;Zne#SpL^IYK;Eh\gpCYLW"1pi=D,g8$oN;9W%g-@VLiOL&G0fBi5+W-d\6g8p%,5gVW"85%\1m&M2(KPd#$T2,
%2LJAG<LbD`.:1@<)aRa*EJT@KZrAdt7Y@OCSF:F@[]>t>_l]'>>LS&LO*'G@ZA$=WcW:*ok(i^,Tgrb?Qd71NG<-F4c?&H*+2FL+
%@`.COjDBo5g^@acp:("K:*:UFA=Z6@[T\^2B*Z`@O$EF#8$?HdQ\TsY+1H)7r<p@7>K@q6*E"]OR>gm0r02&u;R+&DK.o+Z=aYr3
%f-?GBOWN=!p?=FAIClV%L]-]J.mT84HK&&L'D'Tpa0^,$:-,Gt!%R\s-4?TM0t)ej`$Q\Cd_h8Aq+K.EJKReCs225%!BFOd1dKTY
%V8d&+c!jg+EQ1Z*,]dm,IP_.RRs<S6q'#j=C1MTj2,N?;a&`Ti=V@Y!.oLL%?rkUSFCB8.WWhS;,p5RO@%F=%'"MJ,qpj3JP_VWL
%K7Zf'OcD4iB2-dUV+$;N/-]Ac02;`d$_@,Tm?<AJ;1a#82Tc&^d5s`DO^Et#eF4Jq-lK4-b^"6XM6o,`M!)cW1XshX9$"UW33Xor
%:."X6Ca!V0kV@mt*m^%P4DqW,9i;1\eu,e8OM`'S3LXP6*6#g3Zh/\B9m#9XILK,.;&rn7U=j0A[rTO99K:A+7MT[s^'?QZ-O1i)
%-Qh1u9"AGF:)c/B_b2J.%5H!NV^Y>!rb@AXi@V&U-]^E^G%7PW(%<OEfTP8V?0F#?c)/aKJ9WoAWK]6YF^'*I2;ET-<W,,3ec";!
%Uof%@-@*D<jo\Abo%QR-<6Xg5`tqfIf-<kVC1MX>NEhKJ$VX+?3;[TNH&\KAbqdn,-sO(F"W?<B%>4OP1OSISGT_c'EsBfU$4P9l
%Hsg`!Xd!;+22#Dr?t`q?7SI?Z:ca0@)AP]7QS<!e@al<)X46?RQ>q(*&s*/hjoRttm27qAgPi,%=Y>pO%h8t.?"XtjUK@F.o#>mJ
%6`KZ@m>X'&DEa];*WP=4hsnaJ9p7J`lnSP)c.d`&4+@2IT@"<r$'*!rKLjdGRf=WAIYSTR/;oH+:`ZdJgj38SD/'/Q+<4UH!_2sI
%$i2tdqAeXEBTO;qc,Y;UpH3"km'^H1H!:#*#QkO*i,7>n28L[f.ldf\W?L[mOs&f=&sBsp?&!,=05p.KC9Id,3Z_oEXdX'ej#@oP
%<?9#HjF)5*^Al'RY"$[.*oQ,*C#.VlAC+R5-f.Va#rmBUFM<cXkhQOj)A2kh@GoctlaDbse'TqY<`M.Fa<R1^:lB%Wd]_\M6#1-;
%C>K\eM?!WqLt`m_3Y_o5*'tZYj@$G!$/oQ42#_mtpR;Km_ln88eLA=V['og%k63&FW.qaNC#F>Blo2ea_iOF#QU=<(j8mHoc(.H&
%"M_h&G/_M0n"0,]C\V$>91,tnL*W[ZLf:s:d1KLP@J;qG[At%JQ8PgigMPd+#<Ap-SOrJV/<):[QSg7(k%t,;:Q3)NU'Wd33nmQQ
%($Sg?*YajE=eUpV#50nInV<mWKj*=s^8t,^2Ud4/FgS52p_?Ml;YcCMWM:ZDDFup6mZ*uT2G6i9L+:j9M>;jS@7=BdD5gJAKLQ&9
%[Ce/T]e``mF3+Uu<(J"rGGie"FclX$%r^iF(04TKYhl3\1M5t*]b6cYI<J%PrCrhQL'1lJT[P+c%2/qgpjj#\jJa^j0fhM'L/ET/
%khj_PIV*7]g2U")XS#0#G-0`L!I_99%tfhZV8oIjR?q:E#GuAQP$\VAA;P24=?e]@InQ_!?2N-FpH:RA,OG&elNM2m*6<YsTh-_h
%;l6"(3T5@Ie;!>WU/?I1l;5q9A-<h`7c)D\r"PZf)fa[ZjL@KScqDp?HC*DU(;np_1c7kr66UnIclio0GQt4giF'UDV<RQLVdf!1
%!D<r3`gqt^V1.B_9TT]TUn#:In*&R#Ec*jh)?mmON#7H;,\,jGXYKC'%o^"3-p^N5+5<9b45kr]MN/]IH3]HaXnY=V08XF^!%Eqc
%:)T']o/K,uFh^e_@,I=CQNX<K`m1;3j_FQK*^ZS8fbg"jfWf9$aKW&0*1I;4$OgEKlBt1s$AIc,ka(os_n$FT5V:cnV(jDTWWqSF
%=oO+-([Hhh+d1+-+tq?B(<Wr'W/TI@:$p#`\7];=G:MSTL&Pn=!sAne2Ft33l59qP%D9t@kK6W/Y,+hci^sgU-k<PjkD.!<B\5b\
%o>78ml18@t3B]S,961;WWF3L,QoThM/:1-c*&QJdhN9G.*(K7a"N]0:$jhZmhRglb;U<c@1W:kCW,cQS>:+;\.d59Mr_aO;M6k`E
%2qf/D[0!@O"C:8rb[Lc(p'TnW:JY57\4LXiWJ-r/qTRQ1K5n6q$#N&tg-XHQ=E6uAq-TZ]?!#uI"+u)'[gWH8M8lR0aAdi>$k4;$
%cQZMQ/Ut/1-h)-022]X]pN\Ei@LBJ.q]a"gA!125?UU;B-77?2ZomoZm[C.1_r_A3WG'9_-%:2'_8"?nU-1rJ<f-[J?,o^PK^u!<
%C;k4b;#m#aeA+oMg=p>u?3<n[dMA[F.RdSTn,]FT`]:1B,5Tm#+O?=Hm@a#YZf-;B,\L(EE7.f]KNTutLcETQ%#4I*W\SZ_;j>0$
%PGdfKWcZOD\K"5OS6!s8\jL<KfoC$!3Ac;k\QsOPYNh-7lV5J=$tDJuQ3f\;'YH6"?[Zq,>AX0D&L=qeluCJ4Kj6F.lCRK$9hP]\
%#D%D_l<BNH#iVOK4.!$l,'-@e9Vh0bb?Y6&9al6@s*QRk6U"In"]"mk7X:O5iLX:_i&cQE/$)Fm#!tW!F_u%c5%Y[+k62D]#)@$Y
%[[n5ndS@p;2ZmPP[tbMR,n_,.%_k69#okc?FauC*RB2Gnh4FK=ZZGJ*UC>/Lq_;,ok71;*I`<nnhT/oR&'AX`5KE-?4Or6GI\0Pr
%*@>sh]$kpjjr7mo=mp&Z_n9+?=M#WjEleL&[*(@f&U8ftAH`mN<+_@PXC*r_!3sE5$a6%S@2TaCck0.I(O'6_jg.^^.CZ+W->TOO
%Vc6h.I&-%m`u9JH"7N&<kY2Pr1CJ])/X%2`0@a;I$I:(J)BMVrl:lEbfRpl[52+Mu=7E:(M6pLoPbK"S*)m#YX.L^8mH0%#[g>DG
%*:gF?!Qb=G;<dV-[tJC91=)5=Hfnu?Ultb>o$)U]XQ2SNgO9"BQf\32I)!_$J,,''KN%oYY9]3OWD1i>$-6UJ4o][BMQPQ#lWQYJ
%B"=5*&1U;43'XK`>D=7KkkYtjS]8Wq:nHbRG*>LrTKW&`cjZp8`aLZ'Zsp+PhMT_2e,hsKlZjfXYo43/Uq'C6iOk\4Xi^f([<-nE
%,I9MqG4Ve&nbsLjX&Dh!Cd_@TCd?g>G!BRWn^Ao/cZ$X.GS.AYD37.oUHkdW[@[+"a*i7U6FpXOD_'AW#/uGC*NC3#,q#W6n85QT
%c3q)oYJ7p<:R\K7OBcNSCC'qZIENd^,YU>DJC,"<)RRqo8m]6Z3>TB$is=JL4"pK/AAKCs&^11l@)@oSc=\q@Rr74u?jRA)e(KK%
%A\SprqV!id*uU[7B*3Rg7d[CP(4ds8RgKE-NB`@/rb/W!<`C+/@H`Da89uIY)'r&,AkOcK2A<R8^Zpl=(fnl_"IC+n<>>Q1<(uG6
%?@-*d!(dY7T$mWTW&6:aen2Fn`P&l_X0U@:^o=,#]->3cIUbZBK$"I1Tm,Ae:MX$s@f!!H<>W,es)@r]^Haj5ce2>(@E*D=6iY8E
%X2cWt^N`]SI`>^8&M*4u8@'n$j6kb5;=cDs9*@R"MK:]H'4K,3]6e*;#`,Ge*.V3o<#X\L+:)Y:LZOKUI"fLIr7+6K"q't#KKQ"q
%B6?g&?l@ph$,-oA*5U5Dg<pp5IfG46hBGTN,2"2h`kFa+L$=4:_J^j59m0HYqT$`[6:WT.dT#0*agOq&Ca+(\CIklmjIei)hp96N
%0>*Ta7:#'h/q3'K<m8Vf\9VHYDXE5t\"Pk@6nJ^0,nm5T+jdPUFJ])-fP.[4/&W+oZGt@p"kdrtQ<$p[SROOi!8@jW,F#=YXp]tf
%>_^CFHfE(_.HiCKs)!ZJbEtOW7_W%eHF8!.)Z>b`>;4F+8f!AW&Q2R!eDGf>6Lh]^A4)M&9f8`50'qku[J,NVFf`?'qg><&`=mnF
%_BU9LYI2&C2[6;8j!>VLe"UhRhAq^3\]BA37HCK!i=\j>')ZcGAVO?4.\/t2m*;e`,/NfV\,)#4I(!7-+BA-oh!/t7SK5+Hdpm^@
%B7+\g$ZA(l:h<,ic;ABO<D+M&)U/_aP"-P<;-<cCV-&YN0r&ee7BC,]qHi$,KU3b`<keL40k^OHDq=qENieZ*rVZW_DmqIjkC<6^
%^O6%l^]3`2j0\g9TDcqT^3fhW2rFT%GKfdTs#0l*2uiIGn,MnGs8)W]^\PeIrR_(i#T#X/nE5<#f73\4Ie@@R+$N70i;~>
%AI9_PrivateDataEnd
