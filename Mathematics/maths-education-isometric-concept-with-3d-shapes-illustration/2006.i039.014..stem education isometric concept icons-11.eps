%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2006.i039.014.P.m004.c33.STEM education isometric concept icons-11.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 11/24/2020
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 11 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2006.i039.014.P.m004.c33.STEM education isometric concept icons</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2020-11-24T12:40:46+03:00</xmp:CreateDate>
         <xmp:ModifyDate>2020-11-24T12:40:46+03:00</xmp:ModifyDate>
         <xmp:MetadataDate>2020-11-24T12:40:46+03:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8I0Tzx5j0jU9aKTm&#xA;5gTVtUCWszNKrRwynii0HOMqF6LzPED4VB5Zt8mnjIDp6YsQXqfkzz5onmu3lawYi4tzxuYCQ3Bq&#xA;A05oWRtmG6kj3NM1+bBLGd0gskyhLsVdirsVdiqUebtUvtK8t3+o2MP1i4tY/V9PkFPpqR6rKWqO&#xA;SR8mUHqRTJRgZHhHM8mUCLF8mPeRNX1XUtRHryk2VvZBY0LSOzSFwhZmZzUhYQasCSWNCN64ehyy&#xA;yY5yl9QyV5fRA/eTyoeV7uZ2hgjhycEeVM4zKcF2KuxV2KtM6opZyFUbliaADIykIiyaASBbCrL8&#xA;1tEvvM0+j2kEr21mr/XdRkpGqOpoFSJv3j/FUE0+gjfNlLs6ccQmSPVyHP7eTDi3pMdG13VJ/M15&#xA;p1wqy6ayNPpt6o2dVKBkDLVG48+vXNZ6hIgh2mfT4vy8ckD6uUh89/sZBb3dtchzBIsioeLMu4rS&#xA;ux7/AEZN18oGOxVcWLsVdirsVeJfnRfeePJ8Ueo6fqslxo13dxyqlyVLw3MLm4igRl4u0T+nuD+y&#xA;OJOZ+n4JiiKIDCVhPvKH57aFf3X6G81wP5X8xRUWa3vQY4GbiWqsjhfTqBULJTqApbKcmmI3j6go&#xA;m9PzGZuxV2KuxV2KsW88edJ/Llh9Zs9Ol1No+Ul0Yv7qGGH4pDK4rxJWvGoptv2BzNJpRllUpcP6&#xA;SxkaRnkzzXF5n0SLVEtJLISswSKYqxZVp8aMpIZKmlfGoynPh8OVXaQU9ylKTa35n0/Thc2qSpJq&#xA;0dubiGyJ+Jg3JYyegCl0oTXKc+ohi4TPlOXCPf8Ag224sMshoPM73SLWSZ76Cyt4J9Yo9/ZpAHRp&#xA;CC0j3CMSVoW+0viC4fLNT2llweoxMsUQfKUQK+B9xr4N3gQPpB9YPP8AhPdX4KP/ACa0bU9O1rzA&#xA;15bGBLiUPA/qtcCROKKH9R/jJPHflvXMmfaGHU44yxS4h8q+DjTxSgakHq2UMXYq7FXYqo3N5bWy&#xA;c5nCjsD1OSjEnkrGdY82B45re0tPr8AThei3cPcQcweDGAgF0an7J5eCt2ycOEXvKpfjr0WUSADW&#xA;xSK48xLp0dte+WobV4Jog7cwYkaFgSKKoDcgwG1Ntwc5/WduabR5zhyxlX1SMOG+Ll1IB8zfSt+m&#xA;fj0WXMOK9+Xqt6NBI0kEcjABnVWYKSQCRXYkKfvAzaCQIsci4JFbL8KHYq7FWLfmVPqtv5XluNL0&#xA;651S7hkRxaWhAkK7hjxoWcAH7Kitae+Ymt7LhroeFKfh73fn5ju+Ib9Pn8KXFXE818teZvL3mZ42&#xA;gIivCeciMBFKQPh/eDqw+GlVr4DwzRiXbHZZGCVTxy9MZ7ygOux2IPP0kb/wxLnyxafMOOOx6jr+&#xA;PwSy2xlDWrgzMts8kiR2sassRZOW7IBt035bdNq0zoOztNIRE8s5ZJz53y+A6NOpJgTGAEeEA3te&#xA;9df1b+dMn8owskFw/EhHZeLH9ogGu565sdUdwHWxT/MVk7FXYq7FXj3/ADlGT/gDT6f9XaH/AKhr&#xA;jMvR/WfcwnyZb+a/lTy7rflK/m1TT4ru5s4JHsrhmEMsTkUDLNVaKCeRU7NTocr08pCQEerbCEZG&#xA;iaHej/y2sLbT/I+kWVtM1xBBCVjmd0kLDmxqGQKKb/CKVA2O4yGbi4jxCinJCMZERNjvZLlbB2Ku&#xA;xV2KvPtWn0UHW/JVlHcWzTwy3iz28hQGeU+rJDzJqOXLky/Z4kjNkMeThjm2PSj8h+OaIkXR5KOj&#xA;+bobi1ihm4erZcbeeWIGFUK/CC0b8XiI/aDUoem1MOTScA4roc9/18iouUqA+TItL85afLD60s4a&#xA;zPwxXBDBmfkVK8SAx+dPvzX5DARBtyvyeXj4OHd4hcr+Y17+akOqSaNexy3V29tPE0L+lHZsyRqr&#xA;SAenxRRy514kjlm37R0WmzaLwpGMtr5/xfoPTl8HFw5ZQnYeh3nlKCz1SC6ubMfXYOa2lyasFDrx&#xA;cRsTQAr28PDPOe0pdoDGcXiGWM7Ua4j7z/F775fUIu3wnETxVR/Hy/FWnFhZulxAsjvCzmqvEDyU&#xA;EdRT/a+fTLezex5nFG/SQSeIHvr6e/avLrxEelrz6gCR6+X6/wAfDqznOnda7FXYq7FWJec9YTSb&#xA;iKa506ZtOlUCbVLcer6chJAWWFRyZdgK++1KVyOTUTxgcMePyuvle1+8j39HJwaXxYkgjiHTr7/P&#xA;4b+SVJ5fkv5k1fSXiP1mNHtbqOISRsU5DlzYVAZWp4dwTvlxmMkeKNxl/SjUvje7PDqDD0TuWPu4&#xA;jXw6LBovnOe8S3nijaeI1F1NFA9uqb0KvxLNU/sU265qs+jGaQM4xlKPUgfq+x20M2lxwJiTwnoD&#xA;Li++viz2xguobZUurk3U/V5iixj5BV6D782EQQN3Q5ZRlK4jhHdzRGFrdirsVcwBBB6HbY0P3jFW&#xA;H+Y/yq8qeYLy1vb5JVurOT1IpY2WpFeRjbmrhkY9QR+s5l49bkgCByK9bSnzb5Q1W1/Rlv5ZMsVn&#xA;ame4nhozq/FaRQu45Nw5P9nixansTlPjkA7Xf428/k5MTGR4pHcUPx8meaTZGx0uzsiQTbQxwkqK&#xA;L8Chdh4bZU0TlZJApFYsXYq7FXYqwf8AOHyvY+YfKaRXpuDDZ3cFwIbYqHdmb0KEsr0AWYnLMeeO&#xA;M3IgDvKY4zM0EufR/Meuy38F6JZ9J1G2EMlsztGFkeUNI9VLR/BxoAGJHQGmYvj5I5JYwJRlHcT/&#xA;AIaoVzHO7sdzmzljlAHYDu6/j4c92YeVvK9p5d0/6layySRdeLmqqaktxHbkzFjl/iTkBxm5d/4+&#xA;ThSq9tgnOBDsVdirsVQGqaLY6gqtLEv1mFhLbz/ZdZFBCnkN+hI+WTjMjboyjMx5JPJ5R9e4TVI/&#xA;Ts9SMAiPJBK0fI8nT1VKFlr0r8++WZMx4eEHr+NmWGUYn1CwjPL/AJR0vRYo/TBuLmMU+sygcgT9&#xA;rgoAVKkn7IzHqzZ3Lbl1UpDhHph3D9PerXflLyteSyzXWj2U08xrLM9vEZGJ7l+PKvvXL4ajJAVG&#xA;RA97jHfmjrWwsrW2S2t4Ujt0pxjA2FOn6spyev6t1BrkrhVBJAAJ6nxxV2KuxV2KuxVp0R0ZHUMj&#xA;AqysKgg7EEHFQaWW9tbW0IhtokghUkrHGoRQWJZiAtBuxJOKkqmKuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KqdxbwXMLwXEaywyCjxuAyke4OKgqgUKAFFAOgHTFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FVsssUSc5HCL/MxoMIBPJUj13zfo+kalodldXIjbWZ5IoGFCjCOJmPJv2RzKCvifDLYYZSjI/zQ&#xA;o3NBPVZWUMpDKdwRuCMpSRTeKHYq7FXYql2s63DpUaSzQyPEx+KRAOK7haFmIAJ5bVp3ycIcSqVr&#xA;5itJOInX0S5IQ1JUgEipqFZeh6gbdeuE4yi02ytLsVdirsVdirsVQWs6rFpenyXcoBCbKCeIqfEn&#xA;oO5zB7R1o02IzriPIDvJbsGLxJUk/lvzgurXIgdEpIpeCaJuSMBv79u+afsnt6WozHDlhwT37+nQ&#xA;guVqdEIQ4omwyXOmde7FXYq7FXYqom9shO1ubiP10pzi5rzHIErVa13ANMNFNGr6Jf5e1oarBcTh&#xA;wVEzCGIwyQSpFQcRIkp5Fq1+KgB7DvlubEYGv2/cxBtNspS7FXYq7FXYq7FUguvOuhxazPo0dzFJ&#xA;qdrxa5tea+oqlVc/B1PwOD7VFeordHBIjirYotObO9t7yETW7ckrQ9iCOxyuUTE0UofV0kNuGQVZ&#xA;a0HapG1cMOaCwTzRrGjpbLEZ0K6gxg0zl8RkuZ0ooSld2JA2NNvDMmeKUscq5iJb9HMRzQJ5cQ+9&#xA;H/lZcX5s7y0mVhbwMrRBqkI7ljIikgd9/wDbzVaYmqLue3YQ4oyH1H7e4s6zJdA7FXYq7FWMebPN&#xA;cGjmeC5iaaFrUykR0DCr+mebE/Cp5dQCdjsemGB35jpt1ciGnlOFgHrv02FvPPM3muaLUtItDbzr&#xA;Y3+mfXxMjMgMrP8ACkTRmjlY6SFQeVKVAqc2eLHxRJ5EGqcU7Mcvvzc8/aXqVpomnVuI6zLHJ6Cz&#xA;yS0KtycRpTgOZIkU8afa3U1ysemwcJlkZY4mUhEdX0Jpc97Pp1tNfW31S9eNTc23JX9OSnxKGQsp&#xA;FehrmkyRiJERNjvUInIK7FXYq7FWOee72yj8v3VvJEbu4kT91YxlTK9NzxU9dgdu/Qb5i67QT1OC&#xA;UI7Hoe6Q5bt+lyCMwSaDzX8jdS8s20t3GLhoCWVbQTh442eQfvOBlCnkeAYjoOVBlen7I1cs51Ge&#xA;HqEeEVR63vw9wqI7wLNNuozw4BCB2u/x9723M5w3Yq7FXYq7FXkGm6X5vv8AzRJr14n1fgnNWuVe&#xA;JZBNH6fpxAozVSPlUBA3JdzTi2bOOWHCRdx5VW44SbvyJ5Hl3M58PAAAePeze3kvkVtK8/WvmQ2c&#xA;kAFh/uRiEi+pczTFlWKNWYRkwKE50anTjWlcvExLBLGSOG9j3efx6NUYky2Fl6do2t6drFn9bsJP&#xA;UiDGOQEFXSRaFkdTuGFc1OXFLGaKQUdlaXYq7FXYqhbvVLC0uLa2uZ1inuy4t0avxekhkf5BUUkk&#xA;4RElXlXm3yfpes+cbbzMDJpuqwvGVuoCqmaBRRFmDhtmRvipQ02PQU2+CRhDh5hgXpHlawSz0qiy&#xA;yTNPLLNI8rcjydz8K/yooFFXsNs1uefFJkEzugTbSgNxJRqNQmm3WgocqDIGi8Z8l3Kyxaa1zot0&#xA;b6zQfVII4DIsDTkrseKiE+iGPxhRStDXbNnLEIRMRO+8n8d7Zqc3iT4hERHcHr+mwXEMTJN41Xfx&#xA;G9KVoK5rpkHk0hF5BLsVdirsVSbW/L4vpZLhXcSPAsBVWC04SeqjrUEc1cAiu2TxmIlxEbsvElw8&#xA;N7PGdc8meaLd55Whk1GBnHrwyrzYkGqlkqSaV2dfwzrMWswTAiaj+Pxs4piWTflb+W09jrx80agJ&#xA;kd7R7a3s7giQqJCrGTmfjPP4q86t4nNP2jqIV4cDYtthfN6zmoZuxV2KuxVRu0neBkgfhIRTl3p7&#xA;HsclEi91ec6zolzZyPdXMjlECeq7fEx4kbBdyzTtRJOP2xQbd9pHVx4eXy/HTp3IhiMpCI6oDy5D&#xA;cebJ76yubYvBp8voXX1mMxTJI6CVRGeTcVVXUb7+ApkPHlikJxNCQum/LCAjw85iXMfSR+Psel6H&#xA;pC6Tp8Vks8k6xKFDSsWO3z+fy8KDbMHNl45GVNAFJhlSXYq7FXYq82/NizuriWzXlK0XqIYREpEi&#xA;SclFYpvsqTWhDA+NV4k5n6XNOAuABN733e5twwxyJEyQKNe9jmmWlhZ3X1fXjeM2qD/drl7wNCwZ&#xA;JOaFo4QoZgFHIkOOTVHHMrPnJiTEiIhXIbb9Kre6+zlTVisGwLemeWNBbTiZRO88TxhY3cjk60Uq&#xA;zAAbilKkk/x1s5jgEKA4e4UPgOnuGwUmySyDKFdirsVdirG/Ot/cWNrBOgUQgyepI6O6IVTkpcJ8&#xA;RU8aGhHzyUCeIDvb8WOMoys7iq891HWbWGW4rfKVbZS8BAZhtQAMNz8hX6My8MyBt9rjST3SprVo&#xA;FhthIYkFRI60B5bnfbep3GY2SJuykI3K0oaHT7eG+nvYxSW5VElAC0PplqGoHKvxeORERZPUsjIk&#xA;V0CJyTF2KuxV2KuxV2KrJIIZCrOisV+ySK0wgkKvwK7FXYq7FXYq7FVk1vDOnCZA61BAI6EbgjCC&#xA;Qqy1sra19X0FKes/qOOTMK8Qvwgk8RRR8I2xJtNq2BDsVdirsVdiqlPa29xx9ZA/A1WvbCJEclUJ&#xA;NG0yVg0lurFegNafdkxlkORRSMApsOmVpdirsVdirsVWyxRTRtFKiyRuKOjgMpHgQcVUJ9NsJ+Pq&#xA;QISgCowHEhR0UEUNPbJxnIciikSAAAAKAbADIJdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiq2SWOJC8jhEHVmIAFdupxVqC&#xA;eG4gjngcSQzKJIpFNQysKqQfAjCRWyr8CuxV2KuxV2KoLVta0rSLU3WpXKW0A2DP1J/yVFWP0DLc&#xA;OCeQ1AWUE0ibW5t7q2iubeQS286LJFIu4ZWFQR8xkJRMSQeYSqZFXYq7FXYq7FWmZVUsxCqoqSdg&#xA;AMVS608zeXLy5+q2eq2dzddPQhuIpJNv8lWJy2WCcRZiQPci0yypLsVdirsVdiqB0zW9N1MyCzmE&#xA;rRKjOo6hZK8CR78TkjEgX03Hy5/JUdkVdirsVdirsVdirsVdiqDsdX0++eaK3lDTW7mOaIgqysBW&#xA;lDTCQylAjmxPUvzY0a10/ULmK2mdrOCWeMMFAkESlyOu2wrvlemyDLkEB1djqeysmHHxkig82/N6&#xA;91a+1O3sNR1R00+aH1JNNiPpc+UrigCVdzwUKFJ3NDQmiNvNFGIFgb97qiy/yb+YRs59F0LUU+rW&#xA;hsreyQuOLR3MESqefs7fD7be+aPLnvNIdOI/e9B/IxOlGSO8x6j7j+r9fk9SyboXYq7FXYqk3nA2&#xA;Z0C5hu7lrSKfjH6qMVavINQEV6hdx3GWYswxyEz0Z48Msh4YiywvzHqGmWXkG2ZriKW0gVrWW8uF&#xA;NxIDuoCRjq5B+GooKipUb5fHxM8z4R9Uu79bfhjDDk/fRPp6d/7Px5JH5T/NXUIrqxgh0o23k+CE&#xA;29sCOd5cMo+B46FFdnNC3FeAq3xk0zYZOzIiG8+LL1PQd9lxcmYzmZVVnkPuD2Oyu47y0huYwyrM&#xA;ivwcAOvIV4uATRh0IzTTjwkhVbIq7FXYqsmlEULytuI1LEDwArhAs0r5684ef73WprzQfNUE2moW&#xA;DQpaSyRBUNGVZkJ4zKwpU0r1p4Z0eDQCWHjwH1EH6u/9H6Qn0wyAT3jtddyL8seQfyt8wrLDb6e2&#xA;m+o9NG1ywuLleXpRcpDyuJZFLh45DQIaL7gnMCWr1EJEHeue36v1plCPMPRfyzn1+JtY0XVdWXXY&#xA;9KmjSz1PgyyskiljHMTszpQGoJ2I38KdbCNRmI8Jl0a4lnGYDJ2KuxV2KsT0/wAv6TNqWpQXcLC5&#xA;E3KKUO6VjZRxCgEKeKgV2zl8HZcNRlyjPGRlCXplch6TuAK22/S7KeqlCMeAiiNxtzR+kWcGj6id&#xA;NW7lljmR5oluJAzc3leRlXYVoDt/kj2zqceMQwxiP4dt+fJ18iZSMqT3AxdirsVdirsVQ2p3n1LT&#xA;57qgJiQsoJoC3QAn55ZihxSAQXluq6t5iuJpbqHUp4bobIEkKQ/Cx/d+kp4CnIjluTQcq5uo6XHV&#xA;Uw4igvLOoarqc1xLLfB9XW6jWhHpsiDgGhVTs6/u3duI8SABmp1eGeKRI+mhXfdys+7eP2ufiyiQ&#xA;oj9XL7ywXzG6aXrK6HrrTaf9agmgklaNpFiW6ieBZOIPxDk37PXI9naLJxDLXpifm9F2v2rp5YDj&#xA;ieKU65e8Hd7BpcWiR3Gu6lqWkyzXOn3L6d9bljMkkqGNHdoEkJCRsZT0PQdT2MzUaB9J3I515F5i&#xA;5ExraQqq2/B82MtFpF/5mrpmiyavcREullK5VV5fEJZgQqRq3HYSPua7dBmHDTmczKgI3zPL4d/w&#xA;vzejOtlh04jKdSMR9I9Vd3w79ns68uI5ABqfEAagH2NBlryzeKuxV2KvDfzC1uWx856hFr93JaQO&#xA;Y/0QJ1K2jQKgJ9GQAjnzZvU5HsPbMvUaOefDDwqNXxDrff8ALk7TsrV4sMpGfXkVDQ9F1d9esFmZ&#xA;NR0TUlluLtVo8CxqqvB6itsW9ThxHHbenfJ6KHhYpiR9W1e/rv7kdrayGeUeGNcNi+8dP0/NlMnl&#xA;jVNUvZPQa3hu7hWjuL5kZpPTKKqKU6Djx4k132PsHVTHDEAEgS5cVR5Hn/O6enb3uv08xGVn9vw7&#xA;vez3y5ocWi6aLKN/UAPJnoRyYqoZiCzfaK1228MxsuUzIJ6CmMjcie8pnlSHYq7FUg832VxcRaXL&#xA;BEJjaajbzupAJCfFG5WoIB4uRXwrgJI5X8PxybsRAu+54FqX5Q+abu3/AEn9ffVdUtK208U5VZ2W&#xA;FQnUM6MytUUr26k50vZvakAAJx4Oe/Rp1GIRPpPEKCJ8pW8+jaXFpV3byvq36Wkvo9IhLNc+kltG&#xA;CzrGk7xqX5bemSwOy0PIT1GQSnKcfpMa4un6GoB7z5Qm+saHFctpjaTJO7tJaOGDkhiodvUSKT4l&#xA;UfbQH6KZz+o+qr4mwJ1lCXYq7FVK6nMFrNOI3mMSM4hjFXfiCeKjux6DDEWaV5Lq3nbUmjv5EhWC&#xA;aSQfU5JpFgdRI37r1LaUx3PLj9kLGefh2zd4dNj2N+kDfb9PL5nZrJKK1bzJFBM/nuwjE0LwiyS1&#xA;uC/KO+qB6gjIHFRDyWuxPLpQ5zuc8EiYkSH6f7HqdBpzmgNNkBhL6rrcw7r/AK1H4Ij8ubnzpq/m&#xA;KXXNS9Q6TJDJFC7kIjVdWX0k7gFDvT6chh4ibLPtiGlw4RihXiWD/aXpuZLy7sVdirsVeV65rnmM&#xA;w6wJ9OfUtKlvY7fTYbZpPVkWK4RZGlIWTb96GUACqo3sczhDGeHfhPP49GeKcom49x+0UiJNCSV2&#xA;FlexTxx0E8LsodGpWrUU/HuDvxzMjqq+qNH8fZ82il+n+QEuZbu+tNQkivn4D1YWKxgqKEBlpVj1&#xA;J7VpTc5ianMSRYqm/DkEbBFgsm8w/l55Q8w6nbalq+nrc3drQKxZgHVTyVZFBAcK24r+qoyjHqsk&#xA;ImIPpLWQEfqHlnRr63NvJbrFE8yzzCFVjMjoSRzZRy79Qa++UcRZxmQbHRMo4o4kVI1CooAAHgBQ&#xA;fgMCCSea7FDsVdirsVWyxRSoY5UWSNuqMAQab9DiDSpFJ5G8uTXs1zcWiTpPQyW0qRtEXUACTdeX&#xA;IKOO7dMtGeYIINEMuL00j9L8v6JpXI6dZQ2pevIxIqdaV+yB14ivyHhjkzTn9RJYAJhlSXYq7FXY&#xA;q7FVCWxtJZfVkiDSdOR9skJEbKoWmhaNZ3dxeWllDBdXbB7qaNFVpGUUDOQNyPfCckiKJ2Co7IK7&#xA;FXYq7FXYqlWr+W9K1KX63Nbo1+kLwwXB5DiHVgOQUjlx5txrutTxpU5IzlwmIOxZ4p8MxLuNpR5Y&#xA;8g2+l6ZHaX8wvyJWndGRSgdiCFUsGfiKeO57ZDH6YcPNz9f2gc2bxIejatufxplmF1rsVdirsVdi&#xA;qCvNLtZ7SaEQxsZWMvFxVTKR9ojfGRNMoGjvyS7y/wCVxYwzPqTpf3tyweeV0DnatBzcGR6A0HI9&#xA;KAUyYyzru92zPMYGXoB4fNPVVVUKoCqNgBsBkLam8VdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirTukaM7sERAWZmNAANySTirkd&#xA;JEDowdGFVZTUEexGKt4q7FXYq7FXYq7FWi6BwhYB2BKrXcgUqQPpxpW8VdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVSDzdeyjTL6whi9eW5srgBFryWsT0PQ15Uoo6k5GG&#xA;QxzRB+kn7f7PubY4rgZfgvCtB/MDWfI3l+CW1vRqdjbsiX9pdu8kiztDF6lvBInMfumIYllCgMqB&#xA;yem/yaaOWW4o/jctFvZfKf5i2nmNrMW9q0X1xBMnJwWWIxepyYAUDciF41PjXtmiltllj/mfj8fH&#xA;bZyJYDGEZnlLl8GX4tLsVdirsVUrtpFtZmjYJIEYo5FQGoaGnemGPNXmGtefINNvYZpXMcrgsyNy&#xA;9cgl1404/ABzZeTb/Ap477bTHosk4ExF1+Px71hwmQEjQ72bWPnLSbuyFxD6kgVijgKDRl2ryJCk&#xA;H2Oa3HjMr6Ua3bc+E4iAd7F7eacWd3Bd26zwNyjbx2II2IIwTiYmi1Aq2RV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVJtWs5ZdSt5VQiHj6c8oYCi1JBof5T+vKpY5SmP5o395&#xA;HL8dW6MxwEH4fj8cmA+aNO8qeYvK0XmHU9OlhumlFjNdWlRIwumS1d3XYMjhw3xjktB3FMztPnn9&#xA;INfLYjev0bbJlj8OW44tvsP4tkHkPyUmg2WlqoWWe0hNvPdqxo4VOFQhZqVKrtgzGJnOXWdfZy+8&#xA;tRySlGMSdo3XxZvmOxdirsVdirEvPGq6RPanRP0jEt9LIqy2kVysVzwKlvsg1322br+IrzzyYojI&#xA;IyIB5jp577fPZy9GY8fqrl1/F/Ld5FqnlZrW7gjCNqLnkkMR+FgOZdmmVu9XNOqnYAk75kT7Zy54&#xA;ERkIjrW0tulcxt0dvptJpsf7wgncDfeIvz6/HfyVtdOq6doWntPqP6KvBPJJaJHIoR0CCqOGKq9J&#xA;CqsQSFDVy7sOfiQI4dh3+f45c+8BwO2545ZuLHyr7R+x7d5VSMaFaTJIsq3SLciRPssJQGUr124k&#xA;ZDUG5ny2dXEbJtlCXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWOeZE8ywXA&#xA;vLCFdQsVT97YoeFyGBHxR829OTavw1Q+7fZzKwnEY1LaXf0/Hz+HNFG249Ba4DRXECxxGVZpV6K8&#xA;ikENRePL6chKUa70gkFkQAUAAUA2AGUK7FXYq7FXYqxvXPy+8vatNc3Ti4tb+4o31q2uJoykigBJ&#xA;Vi5ej6i8RRildsyMeqnChzHcUEJEPy91u/0CXTdZ1RmvKv6Gp2Za0lA/3XyWJqEr33AbuK75ScWC&#xA;OXxIRA25EWPt5fBtjmkBROyGg/Ki11SSKx8zRSaho2mCmm/WJz6zuxVneRoSoevGlWo3XrWuXw1k&#xA;4kmI4T+OnRlljDhBBs9ee3xekRRRQxJFEixxRqEjjQBVVVFAABsABmMTbSuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:87b36cd5-03fa-ca47-bb1e-f810392b0875</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:87b36cd5-03fa-ca47-bb1e-f810392b0875</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:075538fd-f7b1-40ec-9f66-886fbce0afdc</stRef:instanceID>
            <stRef:documentID>xmp.did:a67e5a5b-4293-234e-877d-c8d90d02dbe5</stRef:documentID>
            <stRef:originalDocumentID>uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:3a20f972-edde-0b45-bb2e-054a8dc7c649</stEvt:instanceID>
                  <stEvt:when>2018-10-13T13:53:22+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2017 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:af7d9e16-f111-7b48-834b-25685b08d755</stEvt:instanceID>
                  <stEvt:when>2020-06-02T21:59:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:a67e5a5b-4293-234e-877d-c8d90d02dbe5</stEvt:instanceID>
                  <stEvt:when>2020-11-22T07:17:24+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:87b36cd5-03fa-ca47-bb1e-f810392b0875</stEvt:instanceID>
                  <stEvt:when>2020-11-24T12:40:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Basic RGB</illustrator:StartupProfile>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
332.294 130.756 mo
397.206 224.4 li
331.585 262.534 li
331.638 131.138 li
332.294 130.756 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.913725 .247059 .341176 rgb
f
331.638 131.138 mo
331.585 262.534 li
265.535 224.4 li
330.977 130.756 li
331.638 131.138 li
cp
.952941 .470588 .454902 rgb
f
332.294 130.756 mo
331.638 131.138 li
330.977 130.756 li
331.634 130.375 li
332.294 130.756 li
cp
.913725 .247059 .341176 rgb
f
47.3281 205.938 mo
47.0627 299.582 li
46.948 279.216 li
47.2134 185.572 li
47.3281 205.938 li
cp
.952941 .388235 .47451 rgb
f
132.217 205.934 mo
131.951 299.578 li
107.164 313.982 li
107.43 220.339 li
132.217 205.934 li
cp
.913725 .247059 .341176 rgb
f
72.2714 220.339 mo
72.0056 313.982 li
47.0627 299.582 li
47.3281 205.938 li
72.2714 220.339 li
cp
.952941 .388235 .47451 rgb
f
107.43 220.339 mo
107.164 313.982 li
72.0056 313.982 li
72.2714 220.339 li
107.43 220.339 li
cp
.952941 .337255 .423529 rgb
f
132.102 185.568 mo
132.217 205.934 li
107.43 220.339 li
72.2714 220.339 li
47.3281 205.938 li
47.2134 185.572 li
72.0001 171.168 li
107.159 171.168 li
132.102 185.568 li
cp
.952941 .470588 .454902 rgb
f
280.652 353.197 mo
279.465 352.213 277.825 351.498 277.027 351.511 cv
276.425 351.522 275.88 351.854 275.371 352.176 cv
274.876 352.487 274.914 352.823 274.945 353.346 cv
275.031 354.795 276.746 355.895 277.484 356.178 cv
278.276 356.481 278.789 356.391 279.577 357.218 cv
279.75 357.4 279.892 357.643 280.12 357.759 cv
281.897 358.661 284.065 358.095 283.201 355.16 cv
282.821 353.874 282.903 353.637 281.598 352.856 cv
281.297 352.675 281.159 353.616 280.652 353.197 cv
cp
.196078 .164706 .537255 rgb
f
274.918 332.614 mo
275.139 332.322 275.541 332.254 275.901 332.19 cv
277.482 331.908 279.028 331.281 280.585 330.903 cv
281.284 330.733 281.985 330.617 282.693 330.602 cv
284.234 329.212 li
284.265 329.427 284.288 329.644 284.306 329.86 cv
284.726 334.919 282.698 339.836 282.956 351.708 cv
282.995 353.505 282.724 354.539 281.991 355.154 cv
280.729 356.214 279.364 355.014 279.117 354.144 cv
278.647 352.49 278.164 343.39 277.545 342.254 cv
276.739 340.774 276.047 339.183 275.928 338.311 cv
275.759 337.069 275.668 338.228 275.54 336.982 cv
275.423 335.843 275.006 334.792 274.804 333.666 cv
274.739 333.308 274.698 332.903 274.918 332.614 cv
cp
.905882 .627451 .490196 rgb
f
278.754 351.688 mo
278.877 352.82 278.997 353.723 279.117 354.144 cv
279.364 355.014 280.729 356.214 281.991 355.154 cv
282.724 354.539 282.995 353.505 282.956 351.708 cv
282.953 351.548 li
281.749 352.168 280.187 352.107 278.754 351.688 cv
cp
.913725 .87451 .847059 rgb
f
271.719 351.741 mo
271.678 353.435 271.338 357.984 272.867 358.563 cv
273.624 358.85 275.66 358.255 275.807 357.425 cv
276.697 352.415 277.843 342.445 277.797 342.285 cv
277.503 341.279 276.172 341.85 275.521 342.074 cv
271.413 343.489 272.009 339.718 271.719 351.741 cv
cp
.952941 .713726 .603922 rgb
f
271.865 353.029 mo
271.68 352.901 li
271.616 354.951 271.615 358.089 272.867 358.563 cv
273.624 358.85 275.66 358.255 275.807 357.425 cv
275.984 356.428 276.171 355.236 276.357 353.964 cv
274.854 354.295 273.224 353.969 271.865 353.029 cv
cp
.913725 .87451 .847059 rgb
f
271.79 356.395 mo
270.713 356.946 267.647 355.56 266.447 356.045 cv
265.603 356.386 265.359 357.747 265.661 358.507 cv
266.11 359.639 267.99 360.071 269.066 359.99 cv
271.946 359.776 273.531 362.392 275.438 360.655 cv
276.313 359.858 275.933 358.538 275.807 357.425 cv
275.017 358.238 272.935 358.465 271.79 356.395 cv
cp
.196078 .164706 .537255 rgb
f
285.756 331.085 mo
285.627 329.778 285.569 328.461 285.485 327.151 cv
285.262 323.673 285.039 320.193 284.72 316.722 cv
284.59 315.298 284.454 313.869 284.229 312.456 cv
284.028 311.187 283.607 309.721 282.072 309.789 cv
280.293 309.867 278.521 310.182 276.792 310.596 cv
275.52 310.899 274.244 311.273 273.133 311.964 cv
272.049 312.638 270.728 313.95 270.683 315.326 cv
270.669 315.777 270.844 316.26 270.852 316.723 cv
270.87 317.638 270.705 318.545 270.711 319.46 cv
270.734 322.379 270.899 328.377 269.68 336.828 cv
269.114 340.745 268.64 343.307 274.31 344.768 cv
277.602 345.616 284.578 345.524 286.108 342.505 cv
287.438 339.88 285.771 331.233 285.756 331.085 cv
cp
.952941 .470588 .454902 rgb
f
275.209 307.978 mo
275.149 307.133 280.524 303.682 280.471 304.951 cv
280.315 308.658 280.943 309.521 280.973 310.877 cv
281 312.127 279.895 313.336 276.509 312.875 cv
273.952 312.527 275.398 310.663 275.209 307.978 cv
cp
.952941 .713726 .603922 rgb
f
272.332 299.333 mo
271.975 299.767 271.696 300.256 271.611 300.829 cv
271.42 302.105 271.934 303.417 271.657 304.683 cv
271.388 305.91 271.914 308.696 274.334 309.41 cv
275.558 309.772 277.973 309.348 278.75 308.976 cv
279.793 308.477 280.482 307.466 281.098 306.488 cv
286.153 298.463 275.759 295.162 272.332 299.333 cv
cp
f
281.229 296.682 mo
280.31 294.71 273.259 294.003 271.343 298.694 cv
271.194 299.059 271.164 299.446 271.059 299.817 cv
270.966 300.144 271.047 300.418 271.266 300.666 cv
271.524 300.958 271.627 301.133 271.736 301.544 cv
271.962 302.396 272.037 303.289 271.955 304.166 cv
271.914 304.603 271.888 305.15 272.271 305.362 cv
272.525 305.502 272.838 305.414 273.127 305.411 cv
273.624 305.406 274.096 305.668 274.434 306.032 cv
274.854 306.485 274.974 307.11 275.418 307.529 cv
275.868 307.953 276.422 308.194 277.036 308.264 cv
277.728 308.344 278.363 308.174 279.043 308.115 cv
279.443 308.08 279.817 308.018 280.198 307.866 cv
281.029 307.533 281.571 306.787 282.068 306.078 cv
283.118 304.581 283.228 304.149 283.402 302.891 cv
284.198 297.15 281.631 297.549 281.229 296.682 cv
cp
.196078 .164706 .537255 rgb
f
273.8 303.657 mo
274.75 303.451 275.17 304.606 274.647 305.624 cv
274.495 305.921 274.19 306.209 273.97 306.461 cv
272.467 308.179 271.801 306.659 272.273 306.08 cv
273.371 304.733 272.604 303.917 273.8 303.657 cv
cp
.952941 .713726 .603922 rgb
f
273.608 305.73 mo
273.704 305.613 274.702 304.806 273.892 304.476 cv
273.668 304.385 273.464 304.599 273.465 304.823 cv
273.465 304.938 273.518 305.049 273.518 305.165 cv
273.518 305.52 273.066 305.687 273.188 305.959 cv
273.276 306.156 273.553 305.798 273.608 305.73 cv
cp
.905882 .627451 .490196 rgb
f
284.899 315.923 mo
284.949 315.21 284.814 314.472 284.621 313.777 cv
284.33 312.733 283.911 311.713 283.807 310.634 cv
283.674 309.267 284.052 307.909 284.372 306.574 cv
284.692 305.238 284.956 303.831 284.601 302.504 cv
284.29 301.339 283.387 300.272 282.173 300.024 cv
281.408 299.868 280.731 299.782 280.214 300.467 cv
279.416 301.524 279.255 303.544 279.609 304.793 cv
279.858 305.672 280.264 306.501 280.492 307.386 cv
280.623 307.898 280.691 308.439 280.628 308.967 cv
280.576 309.41 280.389 309.804 280.387 310.253 cv
280.381 311.306 280.931 312.181 281.427 313.065 cv
281.97 314.033 282.047 315.022 281.872 316.112 cv
281.699 317.185 281.364 318.246 281.415 319.332 cv
281.466 320.418 282.032 321.583 283.07 321.905 cv
282.557 320.939 282.837 319.748 283.414 318.891 cv
283.843 318.256 284.381 317.682 284.667 316.971 cv
284.802 316.634 284.874 316.282 284.899 315.923 cv
cp
.196078 .164706 .537255 rgb
f
275.123 314.111 mo
274.965 313.58 274.66 313.019 274.136 312.788 cv
273.631 312.565 273.014 312.517 272.499 312.731 cv
272.074 312.908 271.695 313.187 271.364 313.504 cv
270.915 313.935 270.677 314.566 270.437 315.132 cv
269.738 316.782 269.404 318.711 268.993 320.452 cv
268.911 320.797 264.227 325.349 263.489 325.827 cv
263.331 325.915 li
261.938 326.365 260.236 327.289 259.882 328.164 cv
259.4 329.357 259.167 329.457 259.283 329.829 cv
259.581 330.782 260.08 330.03 260.31 330.109 cv
260.567 330.198 260.419 330.382 260.872 330.891 cv
261.241 331.305 261.35 330.881 261.544 330.928 cv
261.705 330.967 261.691 331.176 261.88 331.172 cv
262.078 331.117 li
262.261 331.135 262.176 331.308 262.697 331.289 cv
263.191 331.271 262.703 330.139 263.589 329.479 cv
263.81 329.315 264.059 329.192 264.294 329.047 cv
264.578 328.87 264.841 328.658 265.075 328.418 cv
265.164 328.327 265.288 328.189 265.407 328.057 cv
266.739 327.014 268.198 326.186 269.574 325.215 cv
270.237 324.747 270.9 324.279 271.545 323.787 cv
272.105 323.36 272.826 322.927 273.141 322.288 cv
273.785 320.98 274.314 319.614 274.681 318.203 cv
274.866 317.491 275.01 316.768 275.107 316.039 cv
275.194 315.388 275.315 314.755 275.123 314.111 cv
cp
.952941 .713726 .603922 rgb
f
129.345 320.277 mo
132.748 318.299 li
148.62 327.463 li
145.217 329.44 li
129.345 320.277 li
cp
.901961 .901961 .941176 rgb
f
149.219 331.751 mo
152.621 329.773 li
168.494 338.937 li
165.091 340.915 li
149.219 331.751 li
cp
f
165.091 340.915 mo
168.494 338.937 li
168.481 343.537 li
165.078 345.515 li
165.091 340.915 li
cp
.67451 .686275 .945098 rgb
f
149.385 273.292 mo
152.787 271.315 li
152.621 329.773 li
149.219 331.751 li
149.385 273.292 li
cp
.901961 .901961 .941176 rgb
f
145.383 270.982 mo
148.786 269.005 li
152.787 271.315 li
149.385 273.292 li
145.383 270.982 li
cp
f
149.385 273.292 mo
149.219 331.751 li
165.091 340.915 li
165.078 345.515 li
129.332 324.877 li
129.345 320.277 li
145.217 329.44 li
145.383 270.982 li
149.385 273.292 li
cp
.772549 .784314 .933333 rgb
f
268.943 239.705 mo
272.346 237.727 li
288.218 246.891 li
284.816 248.868 li
268.943 239.705 li
cp
.901961 .901961 .941176 rgb
f
288.817 251.179 mo
292.22 249.201 li
308.092 258.365 li
304.689 260.342 li
288.817 251.179 li
cp
f
304.689 260.342 mo
308.092 258.365 li
308.079 262.965 li
304.676 264.943 li
304.689 260.342 li
cp
.67451 .686275 .945098 rgb
f
288.983 192.72 mo
292.385 190.743 li
292.22 249.201 li
288.817 251.179 li
288.983 192.72 li
cp
.901961 .901961 .941176 rgb
f
284.981 190.41 mo
288.384 188.432 li
292.385 190.743 li
288.983 192.72 li
284.981 190.41 li
cp
f
288.983 192.72 mo
288.817 251.179 li
304.689 260.342 li
304.676 264.943 li
268.93 244.304 li
268.943 239.705 li
284.816 248.868 li
284.981 190.41 li
288.983 192.72 li
cp
.772549 .784314 .933333 rgb
f
291.806 196.454 mo
285.584 192.839 li
285.303 80.9583 li
291.525 84.5741 li
291.806 196.454 li
cp
.819608 .823529 .92549 rgb
f
148.277 279.321 mo
142.055 275.705 li
285.584 192.839 li
291.806 196.454 li
148.277 279.321 li
cp
.901961 .901961 .941176 rgb
f
147.996 167.441 mo
141.774 163.825 li
285.303 80.9579 li
291.525 84.5737 li
147.996 167.441 li
cp
.0588235 .0392157 .227451 rgb
f
148.277 279.321 mo
142.055 275.705 li
141.774 163.825 li
147.996 167.441 li
148.277 279.321 li
cp
.0431373 .0313726 .180392 rgb
f
291.806 196.454 mo
291.525 84.5741 li
147.996 167.441 li
148.277 279.321 li
291.806 196.454 li
cp
146.424 166.545 mo
293.087 81.8689 li
293.378 197.351 li
146.715 282.026 li
146.424 166.545 li
cp
.772549 .784314 .933333 rgb
f
288.28 84.5737 mo
288.555 194.213 li
148.271 275.206 li
147.996 165.567 li
288.28 84.5737 li
cp
.196078 .164706 .537255 rgb
f
146.715 282.026 mo
140.493 278.411 li
140.202 162.929 li
146.424 166.545 li
146.715 282.026 li
cp
.819608 .823529 .92549 rgb
f
146.424 166.545 mo
140.202 162.929 li
286.865 78.2529 li
293.087 81.8689 li
146.424 166.545 li
cp
.901961 .901961 .941176 rgb
f
239.079 178.727 mo
239.079 176.97 239.981 175.936 241.157 175.237 cv
242.262 174.573 243.521 174.017 244.127 173.873 cv
244.127 175.207 li
243.456 175.526 241.942 176.348 241.561 176.567 cv
240.919 176.922 240.548 177.187 240.548 178.013 cv
240.548 178.446 li
240.548 179.149 240.781 179.166 241.376 178.822 cv
242.59 178.122 li
244.096 177.253 244.406 178.444 244.406 179.424 cv
244.406 180.015 li
244.406 182.029 243.319 183.03 242.28 183.63 cv
240.969 184.387 240.11 184.79 239.316 184.978 cv
239.316 183.645 li
239.736 183.451 241.016 182.797 241.992 182.233 cv
242.434 181.978 242.937 181.603 242.937 180.924 cv
242.937 180.446 li
242.937 179.942 242.804 179.695 242.244 180.019 cv
241.063 180.7 li
239.21 181.77 239.079 180.266 239.079 179.494 cv
239.079 178.727 li
cp
.819608 .823529 .92549 rgb
f
245.066 178.259 mo
249.547 175.671 li
249.547 177.101 li
245.066 179.689 li
245.066 178.259 li
cp
245.066 175.659 mo
249.547 173.072 li
249.547 174.501 li
245.066 177.089 li
245.066 175.659 li
cp
f
249.915 172.69 mo
255.861 169.257 li
255.861 170.82 li
254.911 171.369 li
254.911 173.962 li
254.911 174.759 255.129 174.8 255.635 174.508 cv
256.365 174.087 li
256.365 175.086 li
256.102 175.444 255.681 175.857 255.058 176.217 cv
254.029 176.811 253.442 176.477 253.442 174.877 cv
253.442 172.217 li
252.172 172.95 li
252.172 177.822 li
250.702 178.671 li
250.702 173.799 li
249.915 174.253 li
249.915 172.69 li
cp
f
257.007 168.595 mo
258.245 167.88 li
258.476 168.56 li
258.862 167.906 259.381 167.159 260.075 166.758 cv
260.316 166.619 260.546 166.497 260.695 166.477 cv
260.695 168.115 li
260.546 168.184 260.206 168.365 259.89 168.547 cv
259.281 168.899 258.84 169.268 258.476 170.08 cv
258.476 174.183 li
257.007 175.031 li
257.007 168.595 li
cp
f
261.152 163.849 mo
261.799 163.345 262.329 162.94 263.258 162.404 cv
264.361 161.767 264.807 162.253 264.807 163.271 cv
264.807 164.539 263.44 166.578 262.971 167.281 cv
264.802 166.223 li
264.802 167.435 li
261.19 169.52 li
261.19 168.364 li
261.824 167.49 263.657 164.974 263.657 164.058 cv
263.657 163.542 263.44 163.51 262.842 163.855 cv
261.153 164.831 li
261.152 163.849 li
cp
f
262.991 138.665 mo
259.79 138.665 256.203 139.758 252.458 141.92 cv
239.012 149.684 228.073 168.631 228.073 184.158 cv
228.073 191.401 230.449 196.762 234.764 199.253 cv
239.08 201.745 244.911 201.122 251.184 197.501 cv
264.63 189.738 275.569 170.79 275.569 155.264 cv
275.569 148.021 273.192 142.66 268.877 140.168 cv
267.138 139.164 265.152 138.665 262.991 138.665 cv
cp
240.643 203.309 mo
238.041 203.309 235.627 202.696 233.489 201.462 cv
228.352 198.496 225.522 192.35 225.522 184.158 cv
225.522 167.819 237.033 147.881 251.183 139.711 cv
258.278 135.616 265.015 134.994 270.153 137.959 cv
275.29 140.926 278.119 147.071 278.12 155.264 cv
278.12 171.602 266.609 191.54 252.459 199.709 cv
248.316 202.102 244.295 203.309 240.643 203.309 cv
cp
.901961 .901961 .941176 rgb
f
205.054 229.405 mo
203.879 230.096 li
203.845 230.13 li
199.249 232.757 li
185.391 240.774 li
185.322 240.809 li
180.794 243.401 li
166.867 251.453 li
166.556 251.626 li
166.556 171.415 li
167.006 171.139 li
171.602 168.513 li
185.494 160.495 li
190.056 157.869 li
190.125 157.834 li
203.983 149.816 li
204.536 149.471 li
205.054 149.194 li
205.054 229.405 li
cp
197.071 150.853 mo
192.475 153.514 li
178.548 161.566 li
173.952 164.227 li
163.999 169.964 li
163.999 256.049 li
173.814 250.382 li
178.41 247.721 li
192.302 239.703 li
196.899 237.077 li
196.933 237.042 li
207.612 230.856 li
207.612 144.771 li
197.071 150.853 li
cp
f
207.612 224.394 mo
207.612 226.363 li
205.054 228.886 li
203.879 230.096 li
203.845 230.13 li
196.933 237.042 li
196.899 237.077 li
192.302 239.703 li
207.612 224.394 li
cp
1 1 1 rgb
f
207.612 216.583 mo
207.612 218.553 li
185.391 240.774 li
185.322 240.809 li
178.41 247.721 li
173.814 250.382 li
207.612 216.583 li
cp
f
207.612 208.739 mo
207.612 210.708 li
205.054 213.266 li
166.867 251.453 li
163.999 254.321 li
163.999 252.386 li
166.556 249.829 li
205.054 211.296 li
207.612 208.739 li
cp
f
207.612 200.928 mo
207.612 202.898 li
205.054 205.456 li
166.556 243.954 li
163.999 246.511 li
163.999 244.576 li
166.556 242.018 li
205.054 203.486 li
207.612 200.928 li
cp
f
207.612 193.118 mo
207.612 195.053 li
205.054 197.611 li
166.556 236.144 li
163.999 238.701 li
163.999 236.696 li
166.556 234.139 li
205.054 195.676 li
207.612 193.118 li
cp
f
207.612 185.308 mo
207.612 187.243 li
205.054 189.801 li
166.556 228.333 li
163.999 230.891 li
163.999 228.886 li
166.556 226.329 li
205.054 187.865 li
207.612 185.308 li
cp
f
207.612 177.463 mo
207.612 179.433 li
205.054 181.99 li
166.556 220.454 li
163.999 223.011 li
163.999 221.076 li
207.612 177.463 li
cp
f
207.612 169.653 mo
207.612 171.623 li
205.054 174.18 li
166.556 212.644 li
163.999 215.201 li
163.999 213.266 li
166.556 210.708 li
205.054 172.21 li
207.612 169.653 li
cp
f
207.612 161.808 mo
207.612 163.778 li
163.999 207.391 li
163.999 205.456 li
166.556 202.898 li
205.054 164.365 li
207.612 161.808 li
cp
f
207.612 153.998 mo
207.612 155.968 li
163.999 199.581 li
163.999 197.645 li
166.556 195.088 li
205.054 156.555 li
207.612 153.998 li
cp
f
205.4 150.335 mo
205.054 150.68 li
166.556 189.213 li
163.999 191.77 li
163.999 189.766 li
166.556 187.209 li
203.983 149.816 li
204.432 149.367 li
204.536 149.471 li
205.4 150.335 li
cp
f
197.071 150.853 mo
190.125 157.834 li
190.056 157.869 li
163.999 183.926 li
163.999 181.99 li
192.475 153.514 li
197.071 150.853 li
cp
f
178.548 161.566 mo
171.602 168.513 li
166.556 173.558 li
163.999 176.115 li
163.999 174.18 li
166.556 171.623 li
167.006 171.139 li
173.952 164.227 li
178.548 161.566 li
cp
f
399.955 281.45 mo
402.666 280.73 li
402.874 280.79 402.928 280.843 402.97 280.907 cv
403.034 281.034 403.044 281.065 403.051 281.097 cv
403.058 281.245 403.032 281.299 402.99 281.324 cv
401.121 283.181 li
401.041 283.085 401.062 283.038 401.061 282.97 cv
401.061 282.859 401.037 282.745 401.007 282.629 cv
400.97 282.513 li
400.865 282.273 li
400.795 282.144 li
400.633 281.927 li
400.55 281.824 li
400.458 281.732 400.359 281.647 400.254 281.589 cv
400.149 281.527 400.049 281.498 399.956 281.487 cv
399.955 281.45 li
cp
.196078 .164706 .537255 rgb
f
399.944 281.458 mo
390.707 283.94 li
391.161 283.672 391.793 283.707 392.49 284.104 cv
400.479 281.508 li
400.269 281.388 400.081 281.379 399.944 281.458 cv
cp
.772549 .784314 .933333 rgb
f
gsave
399.944 281.458 mo
390.707 283.94 li
391.161 283.672 391.793 283.707 392.49 284.104 cv
400.479 281.508 li
400.269 281.388 400.081 281.379 399.944 281.458 cv
cp
clp
392.49 284.104 mo
400.479 281.508 li
392.428 284.07 li
392.49 284.104 li
cp
f
392.428 284.07 mo
400.461 281.498 li
400.371 281.448 400.284 281.42 400.204 281.411 cv
391.574 283.78 li
391.839 283.811 392.128 283.906 392.428 284.07 cv
cp
f
391.574 283.78 mo
400.204 281.411 li
400.008 281.428 li
390.921 283.84 li
391.115 283.773 391.336 283.75 391.574 283.78 cv
cp
f
390.921 283.84 mo
400.008 281.428 li
390.707 283.94 li
390.921 283.84 li
cp
f
grestore
394.287 290.014 mo
401.019 283.28 li
401.153 283.203 401.235 283.035 401.234 282.8 cv
401.233 282.322 400.894 281.744 400.479 281.508 cv
392.49 284.104 li
393.872 284.893 395.003 286.82 395.006 288.412 cv
395.009 289.197 394.734 289.752 394.287 290.014 cv
cp
f
gsave
394.287 290.014 mo
401.019 283.28 li
401.153 283.203 401.235 283.035 401.234 282.8 cv
401.233 282.322 400.894 281.744 400.479 281.508 cv
392.49 284.104 li
393.872 284.893 395.003 286.82 395.006 288.412 cv
395.009 289.197 394.734 289.752 394.287 290.014 cv
cp
clp
394.287 290.014 mo
401.019 283.28 li
401.153 283.203 401.235 283.035 401.234 282.8 cv
401.21 282.571 li
394.925 287.645 li
394.978 287.905 395.007 288.163 395.006 288.412 cv
395.009 289.197 394.734 289.752 394.287 290.014 cv
cp
f
394.925 287.645 mo
401.21 282.571 li
401.191 282.474 401.159 282.378 401.121 282.283 cv
394.629 286.688 li
394.76 287.004 394.861 287.326 394.925 287.645 cv
cp
.819608 .823529 .92549 rgb
f
394.629 286.688 mo
401.121 282.283 li
401.076 282.177 401.022 282.074 400.96 281.978 cv
394.089 285.674 li
394.301 285.994 394.483 286.338 394.629 286.688 cv
cp
f
394.089 285.674 mo
400.96 281.978 li
400.827 281.78 400.661 281.611 400.479 281.508 cv
392.49 284.104 li
393.096 284.449 393.653 285.014 394.089 285.674 cv
cp
.901961 .901961 .941176 rgb
f
grestore
392.49 284.104 mo
391.106 283.314 389.981 283.957 389.986 285.549 cv
389.989 287.132 391.121 289.061 392.504 289.849 cv
393.886 290.638 395.011 289.997 395.006 288.412 cv
395.003 286.82 393.872 284.893 392.49 284.104 cv
cp
.870588 .815686 .784314 rgb
f
390.727 283.937 mo
327.484 321.137 li
327.938 320.871 328.564 320.904 329.259 321.299 cv
392.501 284.099 li
391.807 283.704 391.179 283.671 390.727 283.937 cv
cp
.301961 .294118 .811765 rgb
f
gsave
390.727 283.937 mo
327.484 321.137 li
327.938 320.871 328.564 320.904 329.259 321.299 cv
392.501 284.099 li
391.807 283.704 391.179 283.671 390.727 283.937 cv
cp
clp
329.259 321.299 mo
392.501 284.099 li
329.198 321.266 li
329.259 321.299 li
cp
.47451 .466667 .929412 rgb
f
329.198 321.266 mo
392.441 284.065 li
392.14 283.903 391.855 283.808 391.592 283.776 cv
328.349 320.977 li
328.612 321.008 328.899 321.103 329.198 321.266 cv
cp
.301961 .294118 .811765 rgb
f
328.349 320.977 mo
391.592 283.776 li
391.354 283.748 391.135 283.769 390.94 283.837 cv
327.698 321.037 li
327.894 320.969 328.113 320.947 328.349 320.977 cv
cp
f
327.698 321.037 mo
390.94 283.837 li
390.727 283.937 li
327.484 321.137 li
327.698 321.037 li
cp
f
grestore
331.056 327.216 mo
394.296 290.017 li
394.745 289.753 395.02 289.196 395.018 288.407 cv
395.014 286.822 393.891 284.892 392.501 284.099 cv
329.259 321.299 li
330.649 322.092 331.773 324.022 331.777 325.607 cv
331.779 326.396 331.504 326.954 331.056 327.216 cv
cp
f
gsave
331.056 327.216 mo
394.296 290.017 li
394.745 289.753 395.02 289.196 395.018 288.407 cv
395.014 286.822 393.891 284.892 392.501 284.099 cv
329.259 321.299 li
330.649 322.092 331.773 324.022 331.777 325.607 cv
331.779 326.396 331.504 326.954 331.056 327.216 cv
cp
clp
331.056 327.216 mo
394.296 290.017 li
394.745 289.753 395.02 289.196 395.018 288.407 cv
395.018 288.158 394.989 287.902 394.937 287.642 cv
331.696 324.842 li
331.748 325.102 331.775 325.359 331.777 325.607 cv
331.779 326.396 331.504 326.954 331.056 327.216 cv
cp
.196078 .164706 .537255 rgb
f
331.696 324.842 mo
394.937 287.642 li
394.873 287.323 394.772 287 394.641 286.683 cv
331.4 323.883 li
331.531 324.2 331.632 324.523 331.696 324.842 cv
cp
f
331.4 323.883 mo
394.641 286.683 li
394.495 286.332 394.313 285.989 394.1 285.668 cv
330.859 322.868 li
331.07 323.189 331.253 323.532 331.4 323.883 cv
cp
.301961 .294118 .811765 rgb
f
330.859 322.868 mo
394.1 285.668 li
393.666 285.011 393.109 284.446 392.501 284.099 cv
329.259 321.299 li
329.868 321.647 330.423 322.211 330.859 322.868 cv
cp
.47451 .466667 .929412 rgb
f
grestore
329.259 321.299 mo
327.875 320.51 326.758 321.162 326.761 322.747 cv
326.766 324.333 327.891 326.263 329.273 327.052 cv
330.663 327.845 331.78 327.193 331.777 325.607 cv
331.773 324.022 330.649 322.092 329.259 321.299 cv
cp
.47451 .466667 .929412 rgb
f
327.476 321.135 mo
319.746 325.682 li
320.199 325.417 320.83 325.451 321.53 325.85 cv
329.259 321.303 li
328.56 320.904 327.929 320.87 327.476 321.135 cv
cp
.196078 .164706 .537255 rgb
f
gsave
327.476 321.135 mo
319.746 325.682 li
320.199 325.417 320.83 325.451 321.53 325.85 cv
329.259 321.303 li
328.56 320.904 327.929 320.87 327.476 321.135 cv
cp
clp
321.53 325.85 mo
329.259 321.303 li
321.468 325.816 li
321.53 325.85 li
cp
f
321.468 325.816 mo
329.197 321.269 li
328.895 321.105 328.606 321.008 328.339 320.977 cv
320.611 325.524 li
320.876 325.555 321.166 325.652 321.468 325.816 cv
cp
f
320.611 325.524 mo
328.339 320.977 li
328.103 320.947 327.884 320.969 327.688 321.037 cv
319.96 325.585 li
320.154 325.517 320.373 325.495 320.611 325.524 cv
cp
f
319.96 325.585 mo
327.688 321.037 li
327.476 321.135 li
319.746 325.682 li
319.96 325.585 li
cp
f
grestore
323.327 331.76 mo
331.057 327.213 li
331.504 326.951 331.779 326.396 331.777 325.611 cv
331.773 324.019 330.642 322.092 329.259 321.303 cv
321.53 325.85 li
322.914 326.639 324.043 328.566 324.046 330.158 cv
324.049 330.943 323.774 331.498 323.327 331.76 cv
cp
f
gsave
323.327 331.76 mo
331.057 327.213 li
331.504 326.951 331.779 326.396 331.777 325.611 cv
331.773 324.019 330.642 322.092 329.259 321.303 cv
321.53 325.85 li
322.914 326.639 324.043 328.566 324.046 330.158 cv
324.049 330.943 323.774 331.498 323.327 331.76 cv
cp
clp
323.327 331.76 mo
331.057 327.213 li
331.504 326.951 331.779 326.396 331.777 325.611 cv
331.775 325.362 331.748 325.105 331.696 324.845 cv
323.966 329.391 li
324.018 329.651 324.047 329.909 324.046 330.158 cv
324.049 330.943 323.774 331.498 323.327 331.76 cv
cp
f
323.966 329.391 mo
331.696 324.845 li
331.632 324.527 331.531 324.203 331.4 323.888 cv
323.669 328.435 li
323.8 328.75 323.902 329.072 323.966 329.391 cv
cp
f
323.669 328.435 mo
331.4 323.888 li
331.254 323.537 331.072 323.195 330.859 322.873 cv
323.13 327.42 li
323.342 327.741 323.525 328.084 323.669 328.435 cv
cp
f
323.13 327.42 mo
330.859 322.873 li
330.423 322.215 329.866 321.65 329.259 321.303 cv
321.53 325.85 li
322.136 326.196 322.695 326.761 323.13 327.42 cv
cp
.392157 .384314 .862745 rgb
f
grestore
321.53 325.85 mo
320.14 325.057 319.023 325.703 319.026 327.295 cv
319.03 328.878 320.154 330.802 321.544 331.595 cv
322.928 332.384 324.051 331.743 324.046 330.158 cv
324.043 328.566 322.914 326.639 321.53 325.85 cv
cp
f
319.658 326.175 mo
316.944 327.775 li
317.345 327.539 317.904 327.571 318.524 327.924 cv
321.24 326.323 li
320.619 325.969 320.061 325.938 319.658 326.175 cv
cp
.952941 .470588 .454902 rgb
f
gsave
319.658 326.175 mo
316.944 327.775 li
317.345 327.539 317.904 327.571 318.524 327.924 cv
321.24 326.323 li
320.619 325.969 320.061 325.938 319.658 326.175 cv
cp
clp
318.524 327.924 mo
321.24 326.323 li
318.47 327.893 li
318.524 327.924 li
cp
f
318.47 327.893 mo
321.184 326.291 li
320.916 326.148 320.661 326.062 320.425 326.034 cv
317.709 327.634 li
317.945 327.662 318.2 327.747 318.47 327.893 cv
cp
f
317.709 327.634 mo
320.425 326.034 li
320.214 326.007 320.019 326.028 319.848 326.088 cv
317.132 327.688 li
317.305 327.628 317.5 327.609 317.709 327.634 cv
cp
f
317.132 327.688 mo
319.848 326.088 li
319.658 326.175 li
316.944 327.775 li
317.132 327.688 li
cp
f
grestore
320.117 333.161 mo
322.833 331.56 li
323.228 331.327 323.473 330.837 323.471 330.141 cv
323.466 328.729 322.466 327.023 321.24 326.323 cv
318.524 327.924 li
319.75 328.623 320.752 330.331 320.756 331.741 cv
320.757 332.438 320.514 332.929 320.117 333.161 cv
cp
f
gsave
320.117 333.161 mo
322.833 331.56 li
323.228 331.327 323.473 330.837 323.471 330.141 cv
323.466 328.729 322.466 327.023 321.24 326.323 cv
318.524 327.924 li
319.75 328.623 320.752 330.331 320.756 331.741 cv
320.757 332.438 320.514 332.929 320.117 333.161 cv
cp
clp
320.117 333.161 mo
322.833 331.56 li
323.228 331.327 323.473 330.837 323.471 330.141 cv
323.47 329.92 323.445 329.691 323.398 329.461 cv
320.684 331.063 li
320.729 331.293 320.755 331.521 320.756 331.741 cv
320.757 332.438 320.514 332.929 320.117 333.161 cv
cp
f
320.684 331.063 mo
323.398 329.461 li
323.341 329.18 323.253 328.894 323.137 328.613 cv
320.421 330.214 li
320.537 330.494 320.627 330.78 320.684 331.063 cv
cp
f
320.421 330.214 mo
323.137 328.613 li
323.007 328.303 322.846 327.999 322.658 327.716 cv
319.943 329.316 li
320.13 329.599 320.292 329.903 320.421 330.214 cv
cp
f
319.943 329.316 mo
322.658 327.716 li
322.271 327.13 321.777 326.629 321.24 326.323 cv
318.524 327.924 li
319.062 328.23 319.557 328.732 319.943 329.316 cv
cp
f
grestore
318.524 327.924 mo
317.293 327.22 316.301 327.792 316.305 329.204 cv
316.309 330.607 317.305 332.312 318.536 333.014 cv
319.762 333.715 320.759 333.147 320.756 331.741 cv
320.752 330.331 319.75 328.623 318.524 327.924 cv
cp
.913725 .247059 .341176 rgb
f
258.395 362.771 mo
257.072 361.674 255.244 360.877 254.356 360.892 cv
253.684 360.903 253.078 361.274 252.51 361.632 cv
251.959 361.98 252.001 362.354 252.036 362.936 cv
252.132 364.551 254.043 365.777 254.865 366.092 cv
255.747 366.429 256.319 366.328 257.196 367.25 cv
257.39 367.453 257.547 367.724 257.801 367.853 cv
259.782 368.858 262.197 368.228 261.234 364.957 cv
260.811 363.524 260.902 363.261 259.449 362.391 cv
259.113 362.189 258.958 363.238 258.395 362.771 cv
cp
.196078 .164706 .537255 rgb
f
252.005 339.837 mo
252.252 339.512 252.699 339.437 253.101 339.365 cv
254.863 339.051 256.584 338.352 258.319 337.931 cv
259.098 337.742 259.88 337.612 260.668 337.596 cv
262.386 336.047 li
262.419 336.287 262.446 336.528 262.466 336.77 cv
262.934 342.406 260.674 347.884 260.961 361.111 cv
261.005 363.113 260.703 364.266 259.886 364.951 cv
258.48 366.131 256.959 364.795 256.684 363.825 cv
256.161 361.982 255.622 351.843 254.933 350.578 cv
254.035 348.929 253.264 347.157 253.131 346.184 cv
252.942 344.801 252.841 346.092 252.699 344.705 cv
252.569 343.435 252.104 342.264 251.878 341.01 cv
251.806 340.611 251.761 340.16 252.005 339.837 cv
cp
.905882 .627451 .490196 rgb
f
256.279 361.09 mo
256.417 362.35 256.551 363.356 256.684 363.825 cv
256.959 364.795 258.48 366.131 259.886 364.951 cv
260.703 364.266 261.005 363.113 260.961 361.111 cv
260.958 360.933 li
259.616 361.624 257.876 361.556 256.279 361.09 cv
cp
.913725 .87451 .847059 rgb
f
261.491 351.184 mo
262.007 350.801 262.785 340.618 262.466 336.77 cv
262.446 336.528 262.419 336.287 262.386 336.047 cv
260.668 337.596 li
259.88 337.612 259.098 337.742 258.319 337.931 cv
256.584 338.352 254.863 339.051 253.101 339.365 cv
252.699 339.436 252.252 339.512 252.005 339.837 cv
251.761 340.16 251.806 340.611 251.878 341.01 cv
252.104 342.264 252.569 343.435 252.699 344.705 cv
252.841 346.092 252.942 344.801 253.131 346.184 cv
253.264 347.157 254.035 348.929 254.933 350.578 cv
255.002 350.704 255.062 350.925 255.115 351.219 cv
257.074 352.147 260.7 351.771 261.491 351.184 cv
cp
.0941176 .0627451 .376471 rgb
f
248.441 361.149 mo
248.396 363.035 248.017 368.104 249.721 368.749 cv
250.565 369.069 252.832 368.406 252.996 367.481 cv
253.987 361.899 255.265 350.791 255.213 350.613 cv
254.885 349.492 253.403 350.127 252.677 350.377 cv
248.101 351.954 248.765 347.752 248.441 361.149 cv
cp
.952941 .713726 .603922 rgb
f
248.605 362.583 mo
248.398 362.44 li
248.327 364.725 248.325 368.221 249.721 368.749 cv
250.565 369.069 252.832 368.406 252.996 367.481 cv
253.193 366.371 253.402 365.042 253.609 363.625 cv
251.934 363.994 250.118 363.63 248.605 362.583 cv
cp
.913725 .87451 .847059 rgb
f
253.318 337.824 mo
254.338 337.884 255.361 337.895 256.383 337.885 cv
256.836 337.881 257.417 337.966 257.856 337.859 cv
258.237 337.767 258.538 337.469 258.937 337.375 cv
259.25 337.3 260.129 336.651 260.377 336.857 cv
260.754 337.17 260.231 338.432 260.126 338.911 cv
259.192 343.175 256.483 344.077 255.647 348.346 cv
255.079 351.251 253.984 354.577 253.456 355.863 cv
253.076 356.787 253.741 355.981 251.574 356.366 cv
251.066 356.456 250.549 356.492 250.034 356.471 cv
249.643 356.455 249.144 356.269 248.788 356.467 cv
248.565 354.945 248.727 353.373 248.41 351.876 cv
248.077 350.304 248.148 348.602 248.094 346.987 cv
247.68 334.616 247.177 337.464 253.318 337.824 cv
cp
.952941 .713726 .603922 rgb
f
256.451 348.305 mo
257.286 344.035 259.192 343.175 260.126 338.911 cv
260.231 338.432 260.754 337.17 260.377 336.857 cv
260.128 336.65 248.235 334.917 247.872 336.694 cv
247.642 337.815 247.527 346.496 247.515 347.685 cv
247.493 349.757 246.657 351.254 252.571 351.517 cv
256.657 351.699 256.158 349.8 256.451 348.305 cv
cp
.196078 .164706 .537255 rgb
f
246.648 319.653 mo
246.616 320.058 246.685 320.848 247.08 321.114 cv
247.406 321.332 248.12 321.252 248.49 321.286 cv
249.653 321.394 250.816 321.469 251.978 321.544 cv
252.506 321.578 253.034 321.612 253.561 321.629 cv
255.106 321.678 256.644 321.577 258.149 321.327 cv
258.733 321.231 259.704 321.09 260.168 320.702 cv
260.629 320.317 260.672 319.694 260.595 319.073 cv
260.458 317.965 259.91 316.878 258.856 316.455 cv
257.798 316.03 256.753 316.212 255.705 316.346 cv
253.281 316.656 250.887 317.12 248.539 317.735 cv
248.121 317.845 247.697 317.963 247.348 318.215 cv
246.948 318.504 246.694 319.066 246.648 319.653 cv
cp
1 1 1 rgb
f
247.445 316.281 mo
247.819 315.719 251.089 313.77 253.961 312.735 cv
256.646 311.768 260.04 309.481 262.591 312.012 cv
263.521 312.935 264.009 314.231 264.169 315.532 cv
264.355 317.05 264.088 318.482 263.854 319.96 cv
263.625 321.401 263.426 322.85 263.304 324.305 cv
262.31 336.126 264.399 337.376 259.386 338.017 cv
255.037 338.573 249.289 339.784 247.809 337.339 cv
247.352 336.583 247.554 335.669 247.601 334.843 cv
248.216 324.006 246.211 318.137 247.445 316.281 cv
cp
.772549 .784314 .933333 rgb
f
253.237 310.377 mo
253.133 309.66 258.919 306.989 258.919 308.059 cv
258.917 311.188 259.456 310.731 259.551 311.88 cv
259.639 312.938 258.663 314.879 254.895 314.333 cv
252.051 313.919 253.57 312.658 253.237 310.377 cv
cp
.952941 .713726 .603922 rgb
f
250.037 300.717 mo
249.639 301.201 249.329 301.745 249.234 302.383 cv
249.021 303.805 249.594 305.266 249.285 306.677 cv
248.986 308.044 249.572 311.149 252.268 311.944 cv
253.632 312.347 256.323 311.875 257.189 311.461 cv
258.351 310.904 259.118 309.778 259.804 308.688 cv
265.435 299.747 253.856 296.07 250.037 300.717 cv
cp
f
259.95 297.763 mo
258.927 295.565 251.07 294.778 248.936 300.004 cv
248.769 300.412 248.736 300.843 248.619 301.256 cv
248.371 302.127 249.197 302.439 249.382 302.564 cv
249.953 302.949 250.06 303.839 250.306 304.441 cv
250.462 304.821 250.771 305.029 250.859 305.438 cv
250.957 305.893 250.974 307.54 251.724 307.077 cv
252.326 306.705 252.211 305.406 252.638 305.492 cv
254.699 305.893 252.1 311.768 257.854 310.493 cv
259.185 310.198 259.697 309.925 260.885 308.231 cv
262.055 306.563 262.178 306.082 262.371 304.68 cv
263.258 298.285 260.398 298.728 259.95 297.763 cv
cp
.196078 .164706 .537255 rgb
f
253.085 304.638 mo
254.144 304.408 254.611 305.695 254.029 306.829 cv
253.859 307.16 253.519 307.482 253.275 307.761 cv
251.601 309.676 250.858 307.982 251.384 307.337 cv
252.607 305.837 251.753 304.928 253.085 304.638 cv
cp
.952941 .713726 .603922 rgb
f
253.06 306.702 mo
253.167 306.572 254.279 305.672 253.376 305.305 cv
253.127 305.203 252.9 305.442 252.901 305.691 cv
252.901 305.82 252.96 305.944 252.959 306.073 cv
252.959 306.468 252.457 306.654 252.593 306.957 cv
252.691 307.176 252.999 306.778 253.06 306.702 cv
cp
.905882 .627451 .490196 rgb
f
248.521 366.334 mo
247.32 366.947 243.905 365.403 242.567 365.943 cv
241.627 366.323 241.356 367.84 241.692 368.687 cv
242.192 369.948 244.287 370.429 245.486 370.339 cv
248.695 370.1 250.461 373.015 252.585 371.08 cv
253.559 370.192 253.137 368.721 252.996 367.481 cv
252.117 368.386 249.796 368.639 248.521 366.334 cv
cp
.196078 .164706 .537255 rgb
f
231.514 300.399 mo
231.624 300.323 231.781 300.329 231.91 300.38 cv
232.038 300.431 232.142 300.523 232.244 300.611 cv
233.207 301.463 234.252 302.568 235.081 303.531 cv
235.012 303.488 li
235.132 303.622 235.246 303.76 235.354 303.903 cv
235.412 303.987 li
235.796 304.09 236.183 304.222 236.439 304.502 cv
236.618 304.697 236.712 304.946 236.78 305.191 cv
236.894 305.604 237.009 306.838 236.993 307.261 cv
236.989 307.375 236.731 307.693 236.56 307.724 cv
236.511 307.687 li
236.5 307.723 li
236.208 307.948 235.96 308.224 235.777 308.534 cv
235.625 308.789 235.335 308.732 235.033 308.823 cv
233.91 307.446 232.494 306.72 231.662 305.182 cv
231.558 304.991 231.465 304.778 231.507 304.57 cv
231.549 304.363 231.785 304.182 232.003 304.255 cv
231.903 304.058 231.95 303.809 232.115 303.659 cv
232.279 303.509 232.549 303.468 232.762 303.562 cv
232.709 303.372 232.825 303.166 233.007 303.071 cv
233.093 303.025 233.19 303.004 233.289 303.001 cv
232.762 302.489 232.283 301.989 231.77 301.34 cv
231.602 301.127 231.323 300.857 231.383 300.604 cv
231.514 300.399 li
cp
.952941 .741176 .647059 rgb
f
248.972 315.067 mo
247.771 314.611 246.569 314.155 245.367 313.699 cv
244.69 313.442 243.874 313.268 243.249 312.88 cv
242.816 312.612 242.396 312.196 241.997 311.863 cv
240.212 310.374 238.63 308.467 237.304 306.468 cv
236.971 305.966 234.221 307.949 234.212 308.394 cv
234.205 308.761 236.35 312.504 236.684 313.054 cv
237.544 314.465 238.446 315.775 239.717 316.713 cv
241.071 317.711 242.431 318.714 243.892 319.507 cv
245.104 320.165 246.366 320.744 247.688 321.06 cv
248.59 321.276 249.571 321.203 250.378 320.7 cv
251.068 320.269 251.6 319.53 251.83 318.682 cv
252.016 317.994 251.994 317.202 251.634 316.608 cv
251.232 315.945 250.508 315.649 249.831 315.392 cv
249.544 315.284 249.258 315.175 248.972 315.067 cv
cp
.862745 .866667 .941176 rgb
f
157.83 307.027 mo
157.693 347.106 li
123.816 366.793 li
123.953 326.714 li
157.83 307.027 li
cp
.164706 .160784 .443137 rgb
f
123.953 326.714 mo
123.816 366.793 li
89.7179 347.106 li
89.8551 307.027 li
123.953 326.714 li
cp
.262745 .254902 .701961 rgb
f
157.83 307.027 mo
123.953 326.714 li
89.8551 307.027 li
123.732 287.34 li
157.83 307.027 li
cp
.227451 .219608 .607843 rgb
f
393.658 273.416 mo
393.666 276.898 li
389.461 279.372 li
389.453 275.889 li
393.658 273.416 li
cp
.913725 .247059 .341176 rgb
f
389.453 275.889 mo
389.461 279.372 li
379.649 285.144 li
379.641 281.661 li
389.453 275.889 li
cp
f
314.41 299.244 mo
314.402 295.762 li
314.39 290.891 317.772 285.996 324.285 282.165 cv
335.498 275.569 352.308 274.3 365.122 279.224 cv
365.13 282.707 li
352.317 277.782 335.507 279.052 324.293 285.648 cv
317.781 289.478 314.399 294.374 314.41 299.244 cv
cp
f
gsave
314.41 299.244 mo
314.402 295.762 li
314.39 290.891 317.772 285.996 324.285 282.165 cv
335.498 275.569 352.308 274.3 365.122 279.224 cv
365.13 282.707 li
352.317 277.782 335.507 279.052 324.293 285.648 cv
317.781 289.478 314.399 294.374 314.41 299.244 cv
cp
clp
365.122 279.224 mo
365.13 282.707 li
352.317 277.782 335.507 279.052 324.293 285.648 cv
317.781 289.478 314.399 294.374 314.41 299.244 cv
314.402 295.762 li
314.39 290.891 317.772 285.996 324.285 282.165 cv
335.498 275.569 352.308 274.3 365.122 279.224 cv
cp
f
grestore
298.595 301.56 mo
298.586 298.078 li
298.6 303.571 301.126 309.057 306.158 313.908 cv
306.167 317.391 li
301.134 312.54 298.608 307.054 298.595 301.56 cv
cp
f
gsave
298.595 301.56 mo
298.586 298.078 li
298.6 303.571 301.126 309.057 306.158 313.908 cv
306.167 317.391 li
301.134 312.54 298.608 307.054 298.595 301.56 cv
cp
clp
306.158 313.908 mo
306.167 317.391 li
301.134 312.54 298.608 307.054 298.595 301.56 cv
298.586 298.078 li
298.6 303.571 301.126 309.057 306.158 313.908 cv
cp
f
grestore
379.641 281.661 mo
379.649 285.144 li
324.276 317.715 li
324.268 314.233 li
379.641 281.661 li
cp
f
324.268 314.233 mo
324.276 317.715 li
314.465 323.486 li
314.457 320.004 li
324.268 314.233 li
cp
f
314.457 320.004 mo
314.465 323.486 li
310.259 325.961 li
310.25 322.478 li
314.457 320.004 li
cp
f
319.837 305.862 mo
365.122 279.224 li
352.308 274.3 335.498 275.569 324.285 282.165 cv
313.069 288.762 311.138 298.517 319.837 305.862 cv
cp
384.183 268.012 mo
393.658 273.416 li
389.453 275.889 li
379.641 281.661 li
324.268 314.233 li
314.457 320.004 li
310.25 322.478 li
300.776 317.074 li
306.158 313.908 li
293.925 302.117 296.502 286.57 313.981 276.288 cv
331.461 266.007 358.256 264.276 378.801 271.177 cv
384.183 268.012 li
cp
.952941 .470588 .454902 rgb
f
310.25 322.478 mo
310.259 325.961 li
300.784 320.557 li
300.776 317.074 li
310.25 322.478 li
cp
.913725 .247059 .341176 rgb
f
188.103 322.153 mo
188.342 325.036 189.469 327.78 189.829 330.651 cv
190.013 332.117 189.997 333.617 190.381 335.044 cv
190.765 336.471 191.652 337.873 193.042 338.373 cv
193.536 338.551 194.158 338.576 194.516 338.192 cv
194.885 337.796 194.8 337.172 194.701 336.639 cv
193.3 329.081 194.003 321.145 196.709 313.95 cv
197.165 312.738 197.68 311.39 197.188 310.191 cv
196.736 309.091 195.511 308.456 194.322 308.396 cv
193.305 308.344 191.679 308.544 191.076 309.445 cv
190.401 310.454 190.048 312.08 189.636 313.229 cv
188.613 316.082 187.85 319.099 188.103 322.153 cv
cp
.905882 .627451 .490196 rgb
f
189.146 336.096 mo
189.388 337.216 190.064 338.187 190.516 339.239 cv
191.129 340.667 191.341 342.244 192.046 343.636 cv
192.336 344.211 192.726 344.735 193.196 345.175 cv
193.645 345.595 194.274 345.862 194.854 346.047 cv
195.43 346.232 196.029 346.371 196.634 346.352 cv
197.238 346.332 197.853 346.141 198.3 345.733 cv
198.602 345.456 198.815 345.074 198.875 344.667 cv
198.94 344.234 198.828 343.839 198.678 343.437 cv
198.34 342.53 197.872 341.68 197.387 340.845 cv
197.13 340.403 196.866 339.964 196.612 339.519 cv
196.192 338.782 195.79 338.026 195.481 337.236 cv
195.149 336.385 194.364 334.754 194.227 333.354 cv
194.227 333.354 192.478 332.261 190.957 332.828 cv
189.672 333.306 188.856 334.752 189.146 336.096 cv
cp
f
199.011 344.536 mo
198.976 344.386 198.938 344.238 198.895 344.091 cv
198.603 343.08 198.128 342.146 197.61 341.234 cv
197.217 341.67 196.748 342.035 196.237 342.323 cv
195.631 342.664 194.967 342.897 194.284 343.022 cv
193.937 343.086 193.586 343.122 193.233 343.129 cv
192.993 343.135 192.752 343.162 192.546 343.024 cv
192.377 342.91 192.245 342.746 192.148 342.569 cv
192.02 342.334 191.947 342.075 191.875 341.818 cv
191.699 341.19 191.523 340.561 191.346 339.933 cv
191.175 339.321 191.039 338.684 190.812 338.092 cv
190.663 337.704 190.48 337.327 190.248 336.982 cv
190.046 336.682 189.794 336.422 189.667 336.075 cv
189.501 335.622 189.531 335.125 189.635 334.661 cv
189.688 334.427 189.761 334.197 189.842 333.972 cv
189.881 333.864 189.922 333.756 189.964 333.65 cv
190.08 333.361 li
188.964 334.175 188.811 335.225 189.011 336.154 cv
189.253 337.274 189.979 338.235 190.431 339.288 cv
190.952 340.5 191.227 341.852 191.716 343.074 cv
191.803 343.292 191.897 343.507 192.003 343.717 cv
192.72 345.132 194.047 346.112 195.611 346.449 cv
196.376 346.614 197.239 346.673 197.997 346.446 cv
198.329 346.347 198.716 346.156 198.945 345.887 cv
199.237 345.545 199.102 344.937 199.011 344.536 cv
cp
.196078 .164706 .537255 rgb
f
199.21 318.556 mo
199.587 320.497 200.342 322.366 200.511 324.335 cv
200.646 325.908 200.402 327.503 200.631 329.064 cv
200.86 330.626 201.734 332.257 203.25 332.698 cv
203.755 332.844 204.362 332.822 204.731 332.447 cv
205.204 331.967 205.077 331.185 204.97 330.519 cv
204.185 325.656 206.273 320.788 206.329 315.862 cv
206.344 314.534 206.213 313.179 206.573 311.901 cv
206.941 310.596 207.814 309.295 207.415 308 cv
207.118 307.035 206.129 306.385 205.123 306.299 cv
204.117 306.213 203.118 306.614 202.3 307.206 cv
198.929 309.648 198.47 314.755 199.21 318.556 cv
cp
.905882 .627451 .490196 rgb
f
208.796 332.924 mo
209.169 333.234 209.544 333.544 209.91 333.863 cv
210.488 334.368 210.965 334.947 211.456 335.536 cv
212.019 336.213 212.615 337.037 212.222 337.938 cv
212.092 338.236 211.838 338.468 211.55 338.618 cv
211.261 338.769 210.939 338.844 210.618 338.891 cv
209.603 339.042 208.55 338.927 207.591 338.561 cv
206.5 338.146 205.593 337.427 204.897 336.5 cv
204.573 336.069 204.29 335.609 204.051 335.126 cv
203.79 334.597 203.497 334.333 202.983 334.017 cv
202.355 333.628 201.672 333.337 201.049 332.938 cv
200.575 332.635 200.114 332.263 199.845 331.757 cv
199.506 331.12 199.45 330.364 199.67 329.68 cv
199.826 329.192 200.116 328.816 200.364 328.378 cv
200.472 328.187 200.561 327.417 200.538 326.588 cv
200.531 326.332 201.405 325.647 202.096 325.4 cv
202.477 325.264 202.917 325.232 203.277 325.419 cv
203.762 325.671 204.462 325.17 205.013 325.248 cv
204.882 326.683 204.929 328.541 205.669 329.702 cv
206.41 330.863 207.451 331.798 208.507 332.682 cv
208.603 332.763 208.699 332.843 208.796 332.924 cv
cp
f
212.366 336.933 mo
212.222 336.388 211.889 335.912 211.534 335.484 cv
211.043 334.895 210.487 334.368 209.909 333.864 cv
209.451 334.702 208.925 335.379 208.041 335.816 cv
207.4 336.132 206.465 336.464 205.874 335.909 cv
205.534 335.589 205.277 335.207 204.909 334.906 cv
204.525 334.594 204.117 334.181 203.71 333.901 cv
202.798 333.27 201.725 332.395 200.946 331.758 cv
199.848 330.66 200.336 329.725 200.39 328.319 cv
200.032 328.703 199.723 329.273 199.588 329.694 cv
199.369 330.378 199.465 331.137 199.803 331.774 cv
200.072 332.28 200.535 332.684 201.009 332.987 cv
201.632 333.386 202.322 333.673 202.951 334.062 cv
203.463 334.378 203.756 334.641 204.018 335.171 cv
204.185 335.51 204.376 335.835 204.586 336.15 cv
204.675 336.283 204.767 336.415 204.863 336.544 cv
205.476 337.36 206.324 338.175 207.239 338.656 cv
208.215 339.169 209.398 339.162 210.469 339.109 cv
210.848 339.09 211.231 339.064 211.589 338.938 cv
211.947 338.813 212.281 338.575 212.442 338.232 cv
212.626 337.84 212.471 337.334 212.366 336.933 cv
cp
.196078 .164706 .537255 rgb
f
189.17 237.528 mo
189.095 238.462 189.098 239.403 189.104 240.371 cv
189.116 242.27 189.555 244.172 189.261 246.068 cv
189.005 247.713 188.211 249.206 187.323 250.592 cv
186.902 251.249 186.538 251.75 186.345 252.496 cv
186.139 253.295 185.762 254.086 185.374 254.81 cv
184.494 256.45 183.232 258.047 183.295 259.907 cv
184.986 260.636 186.936 260.295 188.492 259.396 cv
190.235 258.388 191.359 256.499 192.548 254.917 cv
193.406 253.776 194.213 252.578 194.721 251.244 cv
195.116 250.205 195.325 249.096 195.333 247.985 cv
195.337 247.403 195.288 246.821 195.237 246.241 cv
195.006 243.564 194.774 240.887 194.544 238.21 cv
194.533 238.309 194.707 238.326 194.756 238.24 cv
194.805 238.153 194.768 238.045 194.731 237.952 cv
194.292 237.919 194.262 237.741 194.281 237.301 cv
194.3 236.856 194.462 236.43 194.47 235.984 cv
194.481 235.376 194.199 234.784 193.776 234.348 cv
193.352 233.911 192.797 233.619 192.217 233.433 cv
191.646 233.249 190.982 233.174 190.48 233.503 cv
190.051 233.785 189.84 234.297 189.684 234.787 cv
189.391 235.705 189.243 236.613 189.17 237.528 cv
cp
.913725 .247059 .341176 rgb
f
222.395 271.344 mo
222.73 271.265 223.04 271.091 223.369 270.986 cv
223.811 270.844 224.278 270.828 224.738 270.813 cv
226.052 270.769 227.365 270.727 228.679 270.683 cv
228.895 270.677 229.165 270.707 229.24 270.928 cv
229.273 271.026 229.255 271.136 229.219 271.232 cv
229.108 271.529 228.838 271.724 228.557 271.816 cv
228.276 271.908 227.979 271.914 227.687 271.94 cv
227.2 271.982 226.718 272.084 226.251 272.242 cv
226.141 272.313 li
226.208 272.551 li
226.462 272.851 226.769 273.091 227.097 273.285 cv
227.267 273.385 227.443 273.474 227.621 273.555 cv
227.785 273.628 227.922 273.75 228.087 273.808 cv
228.984 274.121 229.939 274.263 230.777 274.735 cv
231.058 274.893 231.417 275.368 230.917 275.516 cv
230.503 275.638 230.067 275.515 229.65 275.406 cv
229.143 275.274 228.631 275.164 228.115 275.078 cv
227.994 275.058 227.868 275.049 227.749 275.018 cv
227.542 274.961 li
227.209 275.086 227.949 275.573 228.035 275.642 cv
228.374 275.914 228.713 276.186 229.052 276.458 cv
229.433 276.764 229.843 277.118 229.934 277.626 cv
229.964 277.792 229.972 277.934 229.835 278.009 cv
229.731 278.065 229.548 278.061 229.437 278.035 cv
229.191 277.978 228.991 277.791 228.795 277.617 cv
228.316 277.192 227.806 276.81 227.271 276.476 cv
227.023 276.32 226.743 276.126 226.474 276.022 cv
226.119 275.884 226.251 276.264 226.415 276.432 cv
226.778 276.801 227.16 277.165 227.438 277.619 cv
227.554 277.807 227.715 278.079 227.753 278.304 cv
227.801 278.583 227.525 278.673 227.324 278.602 cv
227.123 278.532 226.962 278.368 226.81 278.21 cv
226.44 277.824 226.07 277.44 225.7 277.057 cv
225.547 276.898 225.38 276.652 225.193 276.544 cv
225.055 276.465 224.892 276.481 224.919 276.691 cv
224.955 276.978 225.131 277.215 225.234 277.48 cv
225.305 277.664 225.342 277.865 225.341 278.065 cv
225.341 278.158 225.32 278.27 225.24 278.301 cv
225.052 278.245 li
224.744 278.023 224.438 277.754 224.253 277.398 cv
224.055 277.018 223.736 276.663 223.473 276.333 cv
222.934 275.654 222.32 275.023 221.572 274.63 cv
221.25 274.46 221.119 274.302 221.118 273.888 cv
221.116 273.396 221.115 272.895 221.244 272.423 cv
221.33 272.112 221.48 271.805 221.701 271.584 cv
221.949 271.335 222.097 271.414 222.395 271.344 cv
cp
.952941 .741176 .647059 rgb
f
199.964 246.131 mo
200.071 246.135 li
199.758 246.039 199.579 246.121 199.964 246.131 cv
cp
.952941 .392157 .372549 rgb
f
217.923 274.078 mo
215.303 273.245 212.126 271.805 208.07 270.138 cv
206.978 269.69 205.942 269.049 205.049 268.241 cv
204.148 267.427 203.654 266.408 203.236 265.187 cv
203.046 264.633 202.898 263.972 203.194 263.429 cv
203.463 262.935 203.978 262 204.483 262.064 cv
211.372 262.947 214.676 265.19 218.758 267.994 cv
219.747 268.674 220.729 269.364 221.703 270.066 cv
222.031 270.302 222.378 270.565 222.505 270.949 cv
222.634 271.336 222.511 271.758 222.372 272.141 cv
222.123 272.828 221.797 274.202 221.009 274.365 cv
220 274.574 218.89 274.386 217.923 274.078 cv
cp
.901961 .901961 .941176 rgb
f
204.554 266.171 mo
203.362 263.395 202.236 259.734 200.67 255.178 cv
200.248 253.951 200.008 252.641 199.99 251.335 cv
199.972 250.017 200.387 248.902 201.005 247.712 cv
201.285 247.173 201.673 246.594 202.28 246.47 cv
202.833 246.357 203.365 246.667 203.799 246.996 cv
206.421 248.979 207.866 252.279 208.47 255.41 cv
209.031 258.323 209.997 261.149 210.535 264.078 cv
210.637 264.634 210.783 265.224 210.769 265.797 cv
210.704 268.519 208.924 270.183 207.092 269.358 cv
206.195 268.954 205.201 267.679 204.554 266.171 cv
cp
f
207.987 257.485 mo
207.643 256.438 206.945 255.451 206.512 254.416 cv
206.106 253.445 205.863 252.421 205.621 251.4 cv
205.262 249.885 204.891 248.412 203.744 247.293 cv
203.179 246.743 201.972 246.663 201.211 246.552 cv
200.238 246.411 199.252 246.367 198.271 246.423 cv
197.54 246.464 196.815 246.598 196.089 246.599 cv
195.62 246.601 195.101 246.251 194.638 246.356 cv
192.975 246.732 191.613 247.456 190.205 248.397 cv
188.651 249.436 187.159 250.584 185.851 251.925 cv
185.642 252.139 185.438 252.358 185.239 252.581 cv
184.876 252.99 184.525 253.423 184.32 253.93 cv
184.19 254.252 184.123 254.607 184.156 254.954 cv
184.194 255.346 184.44 255.56 184.54 255.92 cv
184.745 256.655 184.995 257.377 185.274 258.087 cv
186.796 261.97 189.185 265.565 189.877 269.674 cv
190.147 271.282 190.146 272.92 190.055 274.544 cv
190.012 275.313 189.876 276.106 189.915 276.875 cv
189.926 277.083 189.881 277.461 189.917 277.638 cv
189.975 277.921 190.119 278.021 190.383 278.227 cv
191.785 279.32 193.615 279.444 195.175 280.244 cv
202.027 283.758 205.792 278.878 206.317 278.481 cv
206.71 278.182 206.54 278.273 206.208 275.432 cv
204.848 263.785 209.992 263.574 207.987 257.485 cv
cp
.819608 .823529 .92549 rgb
f
206.303 276.201 mo
209.945 282.899 208.297 295.113 209.162 302.114 cv
209.461 304.538 211.893 313.869 204.206 314.655 cv
203.602 314.716 202.988 314.699 202.399 314.844 cv
200.385 315.34 198.345 318.379 193.514 317.622 cv
191.959 317.378 190.119 317.186 188.847 316.195 cv
187.272 314.969 185.721 313.064 186.031 310.969 cv
185.453 304.151 184.891 304.914 184.812 296.926 cv
184.682 283.72 187.052 281.382 189.931 276.002 cv
189.671 276.487 190.609 277.925 191.939 278.713 cv
194.996 280.524 199.955 280.806 202.646 279.751 cv
204.811 278.903 206.096 277.055 206.303 276.201 cv
cp
.196078 .164706 .537255 rgb
f
191.581 248.579 mo
191.585 248.917 191.67 249.235 191.887 249.489 cv
192.518 250.231 193.254 250.868 194.171 251.23 cv
195.396 251.715 196.811 251.698 198.025 251.186 cv
198.466 251 198.886 250.746 199.212 250.395 cv
199.784 249.779 199.836 248.945 199.969 248.155 cv
200.09 247.431 200.216 246.708 200.33 245.983 cv
200.465 245.126 200.658 244.196 200.534 243.326 cv
200.38 242.249 199.428 241.871 198.508 241.546 cv
197.777 241.286 194.435 240.664 193.662 240.649 cv
190.843 240.593 192.52 242.067 192.626 243.14 cv
192.753 244.429 192.575 245.611 192.049 246.789 cv
191.835 247.269 191.572 247.958 191.581 248.579 cv
cp
.905882 .627451 .490196 rgb
f
194.359 245.824 mo
194.187 245.716 194.02 245.6 193.861 245.474 cv
193.48 245.172 193.084 244.77 192.917 244.303 cv
192.756 243.857 192.462 243.475 192.235 243.052 cv
192.1 242.801 191.901 242.62 191.756 242.374 cv
190.027 239.441 189.943 235.509 192.406 232.955 cv
194.152 231.143 196.926 230.394 199.347 231.082 cv
200.002 231.268 200.627 231.55 201.234 231.861 cv
201.757 232.13 202.277 232.431 202.675 232.864 cv
202.937 233.148 203.139 233.482 203.323 233.822 cv
203.531 234.204 203.721 234.601 203.826 235.023 cv
204.227 236.638 203.415 238.256 203.552 239.883 cv
203.618 240.669 203.926 241.396 203.938 242.204 cv
203.955 243.419 203.506 244.592 203.183 245.748 cv
203.02 246.335 202.854 246.929 202.556 247.461 cv
202.343 247.842 202.058 248.198 201.669 248.41 cv
201.267 248.63 200.911 248.6 200.47 248.525 cv
199.465 248.355 198.518 247.97 197.592 247.559 cv
196.927 247.265 196.273 246.943 195.65 246.568 cv
195.225 246.312 194.779 246.088 194.359 245.824 cv
cp
.952941 .713726 .603922 rgb
f
188.56 236.638 mo
188.881 231.568 191.647 230.884 191.647 230.884 cv
191.647 230.884 192.473 229.24 196.645 229.207 cv
198.545 229.191 200.778 230.158 202.116 231.606 cv
203.113 232.684 203.735 233.918 203.94 235.367 cv
203.993 235.744 204.136 237.323 203.646 237.366 cv
203.226 237.402 202.691 236.885 202.373 236.662 cv
202.241 236.569 201.077 235.688 201.158 235.549 cv
200.742 236.265 200.052 236.776 199.349 237.21 cv
198.645 237.645 197.902 238.029 197.286 238.581 cv
196.656 239.146 196.185 239.862 195.741 240.582 cv
195.537 240.912 195.333 241.25 195.051 241.517 cv
194.769 241.785 194.393 241.979 194.005 241.954 cv
193.797 241.942 193.59 241.854 193.436 241.713 cv
193.311 241.599 193.269 241.42 193.144 241.314 cv
192.853 241.067 192.314 241.108 192.012 241.295 cv
191.486 241.621 192.664 241.869 192.787 242.363 cv
192.812 242.456 192.634 244.594 192.634 244.594 cv
192.634 244.594 188.242 241.661 188.56 236.638 cv
cp
.913725 .247059 .341176 rgb
f
191.703 239.708 mo
190.443 239.623 190.123 241.189 190.988 242.397 cv
191.241 242.75 191.688 243.063 192.019 243.344 cv
194.277 245.268 194.845 243.187 194.127 242.531 cv
192.46 241.01 193.29 239.815 191.703 239.708 cv
cp
.952941 .713726 .603922 rgb
f
192.335 242.576 mo
192.189 242.443 190.753 241.595 191.731 241.017 cv
192.002 240.857 192.304 241.094 192.346 241.381 cv
192.368 241.53 192.321 241.683 192.344 241.832 cv
192.44 242.079 li
192.567 242.287 193.003 242.486 192.918 242.79 cv
192.842 243.059 192.418 242.652 192.335 242.576 cv
cp
.905882 .627451 .490196 rgb
f
184.988 252.281 mo
185.603 251.464 186.69 251.201 187.675 251.686 cv
188.611 252.147 189.214 253.089 189.63 254.045 cv
190.767 256.656 190.779 259.693 190.012 262.388 cv
189.313 264.84 188.601 267.305 187.731 269.702 cv
187.636 269.964 187.555 270.259 187.408 270.497 cv
186.014 272.749 183.665 272.424 182.429 271.157 cv
181.886 270.6 181.567 270.098 181.546 269.341 cv
181.526 268.562 181.732 267.723 181.838 266.956 cv
182.07 265.285 182.325 263.617 182.602 261.953 cv
182.908 260.12 183.237 258.29 183.64 256.475 cv
183.922 255.205 184.185 253.845 184.755 252.664 cv
184.822 252.526 184.9 252.397 184.988 252.281 cv
cp
.901961 .901961 .941176 rgb
f
191.659 285.752 mo
191.973 285.992 192.295 286.242 192.488 286.587 cv
192.628 286.838 192.689 287.124 192.784 287.396 cv
193.006 288.036 193.409 288.596 193.687 289.214 cv
193.754 289.362 193.814 289.516 193.818 289.678 cv
193.821 289.84 193.758 290.013 193.622 290.101 cv
193.429 290.227 193.168 290.148 192.972 290.026 cv
192.246 289.574 191.956 288.681 191.463 287.982 cv
191.1 288.294 190.981 288.818 191.042 289.292 cv
191.102 289.767 191.315 290.206 191.526 290.635 cv
191.772 291.137 192.018 291.64 192.265 292.142 cv
192.331 292.277 192.399 292.426 192.364 292.572 cv
192.221 293.171 191.603 292.572 191.311 292.76 cv
191.059 292.923 191.18 293.283 190.994 293.489 cv
190.832 293.669 190.525 293.638 190.335 293.489 cv
190.06 293.273 189.964 292.84 189.799 292.54 cv
189.803 292.644 189.807 292.75 189.774 292.848 cv
189.741 292.946 189.663 293.035 189.561 293.052 cv
189.274 293.097 189.151 292.794 188.941 292.685 cv
188.722 292.571 188.446 292.675 188.205 292.542 cv
187.948 292.4 187.776 292.145 187.625 291.893 cv
187.335 291.413 187.084 290.909 186.874 290.388 cv
186.673 289.892 186.622 289.341 186.584 288.811 cv
186.582 287.906 186.744 287.042 186.797 286.149 cv
186.822 285.738 186.594 285.288 186.471 284.899 cv
186.317 284.411 186.163 283.924 186.009 283.438 cv
185.942 283.227 185.876 283.001 185.94 282.791 cv
186.057 282.413 186.514 282.281 186.902 282.208 cv
187.441 282.105 187.98 282.003 188.52 281.901 cv
188.839 281.841 189.197 281.788 189.463 281.973 cv
189.757 282.177 189.813 282.578 189.886 282.928 cv
190.116 284.027 190.777 285.078 191.659 285.752 cv
cp
.952941 .741176 .647059 rgb
f
187.284 285.78 mo
186.211 285.362 185.613 284.075 185.198 283.034 cv
183.947 279.892 178.207 267.414 183.925 266.416 cv
184.796 266.264 185.756 267.42 186.36 268.211 cv
187.111 269.194 190.355 278.404 190.637 283.161 cv
190.674 283.789 190.676 284.457 190.368 284.974 cv
189.874 285.804 188.115 286.104 187.284 285.78 cv
cp
.901961 .901961 .941176 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2006.i039.014.P.m004.c33.STEM education isometric concept icons-11.eps)
%%CreationDate: 11/24/2020 12:40 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj2N:ZS;<+^9;>OK/;1O#YqF)/Th.en,e7p&0N,X0m3X/hVr*YE]uV#rN.P@mC(iZRtQ`;`b3T=8]kd>-.T.rl2LWt]i-GH
%CDY\#5Kg#PgU0pPbdX[<D;jB^C]3e<qtFH`%tdoWQMGj3;[mL/K4_e6Zs("dV;?#?VfG!/[FAOA!e)Soh?T<<rU3^o;CGkf2jl8l
%FJE(I2X8P%Tq)g1Mh')%IJfrG?U4qlGCn#eXX\j]Jp&(["+AY.LRZu\O8u-W(-WcD(Ze]0=_O/f[Ejo<BkC#:Y)e0(62^eS/Z0H`
%[fAXio"fUF;e`9e;r(LDfCksRG-RFgD]kiE?O7R*d=7J]:]62s+i+#b`:/8gbm+3&J%&?OMQ:_,%e;T6XVqHq`Ei8lefV,I!>)P%
%PGAq0ef3.+o;XZi_m%[2:i0/=m6GS@:V6,&O=pP4keBf4fIPM%Z+MpVd)bc[>'MLN<W?[>nC!?!gNQ45po>D4]psBd'M:YimsM"c
%4t?RSlnHX2A`i'F*d0#!o1c@BL8bQ4q.eCPlD:-T9@EcdUJ`3iLo^m\WEU>YRMS7/kdOm_i1;Nu4NmZrW`._*r!8BNR3#nR&_)j,
%DeYq=Nj*N"!%0jFq^L[=:5W300jEt@(ph*l=Z@aOJmFbh-#ViG;!i_<Hr7$u0/3d6lIrD<kfm_Me0SdBV`aVWiK<gXs6#mOe'eK]
%g[1YGk0NDCgg5XkXRt?]NkJaLjm#k$KbjYD$VXD"I]:gMoWR)#cu79"VkK4r_!.m\Hr-tSa++$UQ28`e4fEJ\a3A50e(C[kfDkX'
%6Dd^H$W8[\Arop*5"[ER5L'4((Wq_-A%i0`"DQ6M5XF";Ig)*`,LWi3Q__ZS8tf:!VW`f>_qjljn4Nf/l?8!nKD)oFIDY,)Jmt3q
%Tf.>tO(]+#.EPDujk;s9"=l=`J(L/knB\4/V*gEKhFn1S"QOej\dI01bPj[_oV[%a$RjPp^sJq-rn07*#Bk[h3d'4/'S1M3hrR.t
%I0n%?W0LQF_Q&*/2[q]D_3-?]Y#)*^0:IU7A\"2N2ES%ae8`0.$%%a/4WGpI)uYFs-6a49e7NR4VXPHC<B'+`&1!eBAr9(d^PWs:
%I[m63begHJb!;Uepj-J?UV@2P6bDHd7)X?BUO#tEPZu\BpF,)&33c_i"@k[[m3%Oa4"A\>imt(&Vf81`pfa`j]19\S4"o4$:.QCJ
%b3bkFS+ULu%FN\QAYB^_$CR2Mh(IM^ctQ@J[BqbkRk[S7Gk?.mbgA=P-r7aqVj?:Kn+Lp3Jb_T]c^0Q'9ba$\`r*3,>55"!WPOWg
%YQ2r==f39j+F=/!1X0O*^J47(>U_O_)RZeJ:U`SJKg4Q=m2q-Br4'Nnli*[/dj+(`G1#(.Y<o(\>Q%h[[4d:lWthY7'hgm%HSX-m
%>R';JbB<r'9Z'GqP6@;''&`<+FJJ=M!=D%<LI.P*OGMpX*i!dcGOdj/i7?A';HRP>:,A0TA`8l58$?/iJ/'tgP&/.e-55.)jr([h
%[:1h=/_!j3=!R'Z+pcl^nYgT1qo*a;Y94.j7N5,sZD9'r4BcBO<j9s[^3<sDPK90+p6.hG<^1>c_>YC7@#N`I3$l\dosC;)El_SI
%&ShTQ:*ka_2@U<,RpgAMUZO[FiWmNaKLTLtUK;o%2l0au-;&SP5IR!pFePE]%ZPcZTZBD#>e3WWL!W]1djt]m.U%pEM\>F(`;,+7
%YSMLq$/">uc%7LMnIp/9&'e*(F'!8EOI<_$dtPZoQ('+%NmD"Ao4A"CQ--.R\TM,H\HKN*K?d_RYf#7_S,75I?Z,;Te`X[%gm>Y?
%^)Xm^^0DjmB#^0AZ>Y:QQOJ^"pZK?@aTd4uQ(uMhWW)YikR).e8nXM"r'bsKK)1YCfpgNXe*=KOg802d=.)s?'DVXUjqG0)2@H'V
%X'DT7LXY1'gW^&uVj'RnQ6n!mPMhNj23fMeS*K2"Xe7h/N+PqO-'QQZ@e&p9(<n+k=3u93Cq_*!o(`*&\DP^ZR"&(u`!1@r8PrWB
%P_`A<H!Vm'8&[eMKR0(_$85(ohsUsu\@F_hS8XaEi*c"7PsR9.YI3)<>*@,Jr+':3=ih7\s//_t"kQ)FqoOdX*)!GG-!6mUpP,*$
%#`U;-LV]rcKZ=$<5i_kkDIX[9bI.%]ZCoR.h`$N>c)SD0DO="jkF.G'r+'2Qi;@@-c&0hg]i0r*P5kmt[4<W@7UVu?2E%b%Lp!cb
%9!/<^q.^b<4ZK\1`aMslWWrbm'B3`k[:,b3DI6FsG*4ZCRF6tXEgpsth]fHf:BC7`Q(KtjHC]TZXDI*,d(BX'-"kZ[8M2u?kC3?[
%=j44"DT\P^o.6MBfM"ENa%_*/["gLPD98"I2?,J!2KJJ:-//i[s%@;NH/%qX=?=9hok'msmNgIodr83S>:O,s]NaNf,mYdBQrA04
%o$!9TE5V8,\(R8DB&aN)$78SI;s8t[`Rr[uZ/9YOBkeN8g4`UkRnIh]p$[,9[icdd/A[b%bj]hN>CFuGh\3Mrn[fWcL9k9+iPkQp
%\Z[f60g:-h3PQCqI2CqiOr40SUN_mBm&=&K$$Ki['[M^S-lA7_'P7*9f+TKX0-Lp)9n*5d=b7Z^9<2d]Om>Q=M'-f*hukWU=fBl&
%b#)!/=!*SFW"",0.Jtq-%bIkEhr#jqei*>EX&1;["+9rVYL&Y.PuB8"G6s9>B>W-^51Pl9pab\+lZe*IY=ZrQdr8b/0gRd6G'$[r
%nNQV,C'"PCJ!Z*mmt-N3'%8Gic4WN0AqrI2&D"408!9@H^KBl5C+8PYVl-%49[c!T=";<IO=HIKcij7!Xs^K2l;PrDkKS<1a^.fM
%8`>ds,",67#Cf/JN5_p&rM5OVeS>J9VbepfWgs_>#<eGC)GeR,+(dr36hS8a,/pD59a[.PjmU'I"R(B0cn7-gRM;d``2$W>F@o+3
%=/f5a6DIG]"bd*29T"Nr&YHU.J5<Z=Ul]<q'OOBR'2#)V^35r5,(rZ<l<+g9j_>tOp>gGBi"d#=>OlYt-;&9LM)&?H>*9>_Q12aT
%'4mWlZUp$Dc!W$Dr5$)"bXEu;VHf?R;L@\/cTE"T>1?=LdrIou;%aJko]Mq_Dc8:2m>tB?>a/Y6c#Zb]ASj6L7@>o<B1rBLmEA!J
%hPOPB7,iX[FjrMiASU:1nM]L',U0=(kDn;cMirbAAqfPhns!`%F(u?TjY[llP']4D`Ua^RGg1GAp'Nk)c:7`_=\Ni?\#OmcB'V9L
%2.96u3'oH[qC>.iEaJ!CrqQ&DMmVeMR@27+lc:q<QYQnn?nU'nEc!G\AjWZ&2ZYZmf5?qc(>u(8V:o1SrO8WWgfV0g`nF[tc)'-D
%>,k"eKMEn6^--=+P$eTFob;JE%KP[.FF?'1F#HXp"EQJiZV_7X\5paHOMIcU5"q3Y(MPr[C[=:W[*V,7T:g4$.Ju/r^n&M[UZH)a
%XUi*35&8,Ab-b,d?EO`eGdAd\Xq;B%q*[X],&J]])G@=MgIa1:rj5SmIk1#4q#;l66g>F5'9<fqo7AW8R*?#QbR;.D\V,Am._`8.
%=S$)d.eANNZWH[.g.\9J6r-q29^_oIHIhOlnCsk.kl-KSr3LB21%dKJLN<*iSg"p8eOI4U52Uf:_$fun,H_[eJf-Q^bF)(n8L]`D
%:38?EKdOACfP"_85QVpg#d:98b,tk5f;i>)p>E``)i%j7HTa@XR5$"c?7-MWjn<7CBI?[I1TMI5;oQ`Al2:ROP+9LDLhi1=XR,3L
%VVdU5q="7ZG<4'"-W#&,g1Yb\r];(^^Edmi"PC.`'$?jBRIC'tGCJ[95P(H=1Z/!Y+7h;Gl&*'u9UoXBjuYg!SY,^a=)TE#!(R>g
%U%bpc'Tr>".[Bkfj&)kA0.u#+@&\s92\TTNs1uXtSHQr-q>@nS$?GeXQtE`O!drpaM>;W-A7)6[%OOVBWpFRd.D59Sh]eV<o*>$=
%]eT*a=W#,F8'!#*s-81?\S)15D$?:\=92sU(\O'.b4SBR?>0V?Q$Tc5)gW&NMkRIFg3Of)S&`k;n[%O#Pk.sskOGmNRehLmIO5\t
%9*H(*=2Fr3V!Z+=J<p86_Z,n%SbB9('75PZ[%)*&-=8*\Fr(UDM<:\rQ(tUb/X`"PHa#)?F(FC@"s7$.TEllPF+/1<$3Li2h@2@^
%G`@O9i$VIJ<dM4?s"qLp\e]nR:Zd4pH/RfYU5!(l'mS,'(lH)P"#'8]b<58L&%l.S1!TkSo>&O3n1kNer3!iYj@k<_PNO_Z!Mgt-
%nB>tWl*als]ldm5DJ-'7>$0%lS]f\=2Nae#^pFoI8:nad(Rmrn0OnF*@[[qWVI(k1g-QI<Er2M+*ZCZB7FcWU?RM7YjZ'H^1`a_Y
%?AWAWPiFXgpUPmG[">qb<LAq"rVrC.SAk*nCQRb]m,u%XdZZn5>P4im9V%oQb<i3-p\^/Bq5sRocI5E_7-d)1K%dRd:P+?G9*noS
%V+-ZCYp;:;dfV`mr%g>QlK@?4TT*L3$q^hoIqD+&mAa4$:L!L!oDsDq87uL8YNH<fgWnU&E:hpQ]6t_=j4=2!'`*$aPULHC\!rUo
%@nmYI/q[\K:gq75TsM\m"R%,9V']kJ,srl5;*.(5p:hB`Qkrtua"aGONZmP)N2\^c]iu&g8:n`AN\QT)bi9Q336"(@EI0WU*ljY%
%36$Hg6YdJNAR+&7s6RC$.(0MK=7pTsHunu:f_#N^T@tbE[8(idnGXq8iItt*8KhZA'9l6P/$snfB(3JIe;?iqK"grB_Q?j'C7!\o
%@?JqYD\UqHQRdpdXf(ifO=MX`!mQ\-:qYaT\Z+DIgFi2<<M:QdS`#opG!1]AW_^0Y5B#,R8bRe*9a[(g>kfb)L7OYrMSj6;8g)s,
%\j>qn6,W2[QOWeN_4U%X%Jj@]TAr]<XA]-[4Ng%,H1d@E\4lnu=s>n67RFN7]Atg[P`DXOB&0>;Y=-IU9YsjDA>VKF.gZRSA?Y5W
%9'@0;Vo.dRr.cIhm;ZakX;rZ6877k%dfaH8S1p/I$-6Gfk<NI=p?CA!)peS+?g_:aR^k@9pZCVp>X(,fDf5!frAVF#"=E\VpZ?@%
%H<>d9$8^nl-,=9`cHY1U\N;`okN;3fgmu(=m[SWngpohob`"Wm`,:,nQOJ_]9/dkDh+>:d\nDkBW576VceZ`a%):n9jg=l]^KQ_-
%MTKa:Sq3C,\e=W2R.Im%e&(_*/s>Oq$;/O8n@G"h)3Y@r=29nrYE(?/<=6^GQ';@#)hhb3rF7ib(pqim;+VCsf'OeQG6o?oT,DX1
%&>**6UCAK]RH1*7WtR9"EmDNch)]7(mFFR]$9dNhQYa;,n)Z"`5:RE])$2t'-Uh]u?RE?Z?-s1709'GF.!#8.9FAN;];Aq(c.-V%
%$@<ECY5aDO@@&+#Ut'1N(Q(LVU?l_\.D-9X<')mnl'?Rra^5UnjT0:^TGUX)JU\u)VafB89N4%Z`(Aqfb107]j3=giV!oNB1kD)X
%^WV#IQV#ru-9I<;niJ3c6=<lqpmJMODS+_G>:kJC^!]!O%]7P(2Z%\-CO>Q7M;addl'pA/s3mpuJnlO^rFBd[c&JITBGA^.U)T`G
%OlkVj2N$W'b#9@n^R`s%[BR65g"4\"#neZWX'nFgU)SZC-:Ls,E(D1iXsPR5&m3Xb_qOb@^nuH#L?2M/i4p^q6h7bMoP;E4ZeW9r
%#)Sp#QmqE).CTfpje4<Y/?6]oqS^Qn/&ro%H.nNn&fdcS3@7TSF6,B(pA8)\c5#CC;#8N&``\6CcQ=*r<hnjO1"r_B1H94cE=6RW
%gr_#$ju$;`8=dF<5%DdlbbDrIgKqI`Uahf&_F2oUFI/Xo_edE`PbnD<qca=DO"L;fM6JZC-\_(;I,,^'`ANQ_i]=A`<hok(kLgfn
%CXXj^DX!^shklO5[=5rqQMQso&']K]N26Zsps^,%=LnrA1A5YX7G-?46CZpX'0ej$1N6B8lVd('r/SC2r7`^b::lQ@/&G]&P6dn)
%QJdq[bRiM$ph/m:BpRiQoXR7N@7GQe*],guc.`p4R@q?e[N06%cB9`r9LL8q<.Z>A6MPEGn7,8[#tpJA:9Ab#P@ET2&Qr;7XOM)7
%ZctLu9q';Ym2'BfM'e">Mh>)_O.1i,lTE9^$<'Lef1oeI7m/2-7&t19AS1T-]RtLnj58K&8pSTZ._gb_B$nN,0)Nm#S^(Drj_pU(
%2'5,qT@m])l$BHG5))HZ(I=t&lEp`XKk_#JBm;PG.+b3.r:.O'%Jn=J^E$97nE2tubQ8I#Pj2mI.bj<s/lR+N>2^Z=VY6K*R,b[u
%;sMt>Ti*=H.#"gn*nT_CVsn>sGT$,EdmpCESe*$l4.Y8Zg5u+R#/b'J8>csN4N/k0rX]%8<PHi):Z#6gAX`!2/-t)6G20(Is/sba
%O=(i.!]^r[WdP)oGm./6/:1@!2C_#Fa@bj[+"#/;s*Ig4a<CJDQEFd$:2(l"iApNHbI.GJZu7\8ok3_Kpjl#!HM7OA[1.W_#-bjN
%+]<ZdO.WORkn!RZ&:";r.)Ak2*?=<$9"7&;70KU[X)h+9"RUB*co=!X54=2dL[]_mh5!:cX:c`Imf.7fH@P_MIg<s&<E_AU,%191
%UoRLge($eT8q2)Im:$smEkT`TKus%)pu#&M-9k(;+AM(?UEA$mH3LqWs.WDg%m"M04m@@-fVsHqOtX1N.INfl2#sFBr+D)9"@,AK
%`r%r(4[J+)62b$Dgs@IeoZ7![O`nP=dtJ%7f'-OqAnttZ&HIg\LTsTs31Et;5A,GEcH8"l?u13;-a\RR4UToHBMB*j=1%deWBdmm
%YDp"!Tj=L$]F)XoDk`YeVDh'\^V17(9s+;janE<);5?UMO^rY`^A6@s$HmoF(CSl=3f"dG/9Y4aH?BS5hesggj]2EL37OWEBTc<Z
%^VMj!j"me9mJ5Ni<c4K.4U(I@"-U;s.2Qo`(j@8"d]UJUlKM_RW/SMRd0mfJPO9C,PK2#C/LTqtp3?Lu4Xs-(M**:NGmp$U^bF.G
%Nm2uQZ^;ZDK[5j!h:TqnR`:C;5n$.X[U(&0cWRpjk/M:XhVN1:0?2%4Bek;_9oW^M,#a2Yklp560J,QM9uT5p6+]qpS*L8*j8\[\
%mZqtQ,SA9i=qet4XI?6o5m_8qD5;6r&:S5LZ'>&@<Gp>;Km&OZX,;:;h:f9Im:gr'>CNU!CnK5cbu0FVfV`P!h[0-;@BeSGd!hul
%BEZRZX'G$k]'55BVfu,CQaGU`V_4G2:8<lhZ+Dn8K/X-3]Q=XCasH9Js3/]?lT4HQ//WaGK\JF$j_3\Z4\+(9CrafIk8rAp[j_uN
%kCcQ(`%>&hrDdMOFdIXOXQr/.BEcYqK%+f0:HPsj.^oduj\!)^UUpoF6YIH/n\ErJ1fCr>g-qoY&Yop%NGpBP"Lp:X;ehQG\e3O:
%5f/V9'C(iPTiC<TJSLm$eIO00b,p,_>)dj?b7C#C<2S-IV[a*:G0oS.6'mqtd+SITC^2hj8QqX-.MCbJ3=>Li05+XGI1tkB%KkX\
%:+m?+5M5G3)aLrD4rH1LqZ.(*RRmuI#.K9Q7e:E,e,X?qAU=oS,HS@KP\QnW,Im,5%i[rA7E?3EdWtNN<CX]OGN,7-P5`S^.s^>"
%A0NO0X4>sX:[@D1*@lRKd7B2<+4pG'=fJ#..Yg<b;ea4P*.<6?Da_@"'!Y+NFW(_AW`G"/or7o)JnCc\%`P+,KmasE9rpb60)lZ&
%JnR,4RCN5l4%Rec&EmiP,E/V$#1r9cVgobOg("#g.P]Aq8tC__#*Q&cXp(e*]32lU/V+)fVsSR_C3c)tg?;KcL/d'IggI,>f7a+3
%J\?ie=0LG"'NABSg+X/t(,WMk/c%Ka7L@i;er,4h1.k@.BT$BmdrFU(rQUM91e^&h#Y'MO]:=HV0!kgOP^Ri\!^PS8Y*X`K#fF$d
%'+4O!.6acYUo^jq$Q-Uc'Dr]RXMmfB!?rB@1]Mt2^-KOWS5/^7-8GJI?U.F1[t3BDFDlSXR\SasN,Yp=MXEOpY^"-5ZP8X5E(iEC
%<H%X2/rUFrKm@49'%tFJl@eh_UJq^8b\71jHOs^bQ%3`Gqe%j*10q27g,4JSI]K*;NHt[IIM)3(BRa5_*b_L2C"3>5CpnpVSPG5`
%g:Aamc<t"^q@N%48%9<aL:)eHe%gV+#U\Rm1tY=81g3K2.I)*TCo__c:ITM!])?uLFN`.BMTi@hA7c;;o"LD"a$ZXibhi"43QE;'
%gCd=!&\T';H)k4BQW.>!!9*pqpP[:=]85!!U2?Z)"W:.9-(dW$1q$I#HLA5#UEr`+]%r0^Z&p*ZW#jhjgI<Ub2iS#]4O2Bl)qM;B
%)T$a1)i<cs=fqgSVCS;@PIGG]NM5N]/8aq)XdbHPGd^;X6h++BQ.'Q6+:oG&B.7us,F*2!(2aVU3;gK+A#&]nAcEqaDq21E,<Dmk
%MoOeglYe^I$Ik$iQ8&H@'XZ"![A]:"O-1o(g:8<Y-ag%JQRh)!W=i+2ZZ<Z]BT*[S^&'O?Ei#2,FuAor-H19?[_7Z$r?se4BrE6%
%..:V5j(9`GDjE]`pN`75/^H]n?IkVGf<nakRo-%oN9rYcn3qX["mSS>]FAq@L,>Zp?X[k_)u_]!doN_N.K1/-YuIK-XYl9-ThuaK
%a=qKc*)"qg8thAT3HW/9#W+06=6ZB4-JV/6N6POn.l3?=WL8q-&]P[8(+?n&DKf53D7d')%blT^8"JB^MrLX\L8OLN7`AsfPD?S4
%9;E!9_mjm785dsiERDuo.l:J*2R&)DLr$$m8^P$h`G8`=W2b^+@G&4rBO8+CAs/g0G:!V77qWIT8*@:'\l9OlrD]O]o=SBK.Jg8S
%X)f'IU_C4A/O6f2MT/gEXn5a6D8&l:hFcCOMZWamUKaF!K^SUP)T%6%H>6r9X"`nD&0_rEkFc8LZ2ce30P\#"<R=2?Ws81]Y"*;X
%IEc;mm/NuGmWIW)H?%2uc2K[5F,)Tc(hbt+TiR3dh`bpr]+%c%@8'TrGb[bt#Ft_\*[)WWZJI!iOuUsc2/<#f7B&)[fRXei*W;\p
%>!kbbpp_-)b+38m^,F2FJNh)@/)ZMt&uZU]G2B257o>ReUj`0&]&I?lD$q1b)rGJ5a&/p-9s03$iFY!U[@S&U(Lj@&g=5k"UDYp#
%j0et,TkDr9\IFsWM.dU(5=X@?h3Ra-j]KQ/fq`Um1JV`X3#i68HVaN@6/'e9V\S:Y71+"Qqt(ctA^mb&N5c]!rMV)9)"m(JDA;u@
%r(g-L#b'pBZ/8GP*5uR<".EE,)h:PGCD?Nk2iEj')TLl:RB:IKogl:tj7X>ObOeDpkdjTOUOuOZD9";<:U<S[,T:3e2PX_4XKV"V
%Ci'#YW@^o[>1blZ\_P9bK::%sZVX!7-WR+1o^P@7dmWi/q.^]^,h#_"d5fUi=1r)m%'Da\qCKHr?#i[pY,D?8CtHSbZ$n/^WYHF"
%QQX38C$HbQAJW_&7WQj`:ODcLTVKt:E.QmTcs;,_Y[B(nW:$VR=0U;U[*(_PRD/0_^8Q(6hp=31IR_#u<b1(1?eb7[e@tc.8h!Y1
%&Z*Q^ZcJQm\=d3!i%<Q`.]kUr(7eX@:UY,jY#9LGTMMM?B-hs=W)9K^NDm5ArMM<YSn>FaZC,Fh.(?VG\TsQZM(ZQuk:cNNHsBo>
%H1l3RnF"E,o3d%s]@Pc=?7oU7mVHgsH*Zon="^:QpV`Pflf.@'g7-@MHi1kRm\bheCX#UODQMT>hL3E>?-@!E^Z@,?=SLBI^8)jS
%XZgI+elk0/;]'+`AbSsK[+]D104)BL?!HF,;6Ki`Gqkpd5J.gMCU`pW#*eqCqoeQJAip%[F-_;XHBP8YG?[<=mE<K3ibiBRcgRE8
%^Ju>H^bGS*C\oZk[sQOfQZ$5\r004eV;Db)2;2sDo@iK[`ojbk<k>l0Ir`<1Z*7@lLLFl02SPdNGOjph:Lpo><dD0%T"St'0'*>h
%ZQ``ujGRjKqqC=nLF9)HQujkQjl/oRrq>8sI]Khu-bJGf]9bN]\m&*sGZQ;9?l8pu_I@Muke:BE?1QI0e]`I)_.*,gPHTm[\VG)]
%E^AmYo=*Iu03=%M_A3'P]XWF)H`;a3f$f4eQLB6-/q;P,ALmL^4BuVRId1HeNui[="<O\ICgT4WN*(B&GqDrF5--A#gKSqQX.PuK
%V0puXG;@G&(0eFTAmq%Fr-%BXXIOYTa:lTD/XLNS$a@`hn(GS+P9=(l#??Jqqq_-b\ZODo-gOQU(N1ne[m#\]cXj9YAT@B[l/T't
%G5!fcqn.(o:jO`8ho0I.-r._H)D9S3m+!>cU^?[1C"Hgdn*];0(02MngfaR%`*ifJn:c1^-8:C$p?*3hIk3e@=Ohn*4^$Z>m;l(S
%^T-/Wp\#A!n2kFUq=F8,G5fJ"1YpI#Zdk>h[oZpM2o?M#J,<C#$j3W;gYii1GGi4lSfM:@J.p/?PKf`JEp&)+$SFW!DoKq?rnCo]
%r9;N$og7Wr]rX2?o@cF=s6`Tn5F4OST-'?5YC6G`Hi_,qq>92N[@eU0l,3?H>C;q%mkXbZq/7XY\ah]LFQL/]s'd3srg:M?56!+o
%@B&*(co_)1h9#$P52Ou65:Z'!eM1jA=9(pch+5:eI.=Z7?(pmqG_NPjj7]+5j6_#&&@oNoNN@fdN-EN.VQ1s"T`#j:[9ET,\pn.<
%?%%jE2En6'6jKc"=#]\8,EJHJB']G_rr)+fh!!mhbu!Kmij.+.F[Bo=9=;IFR5s)86oV0)NKp[d$g0V9N4"!0_1$LpbGq"&mtuqH
%Tc\)%4D6k"?&HP#ou5bZ7[IG4&)Po0fGq#[OAOPZ];cAA\\!oC(ROG>\PdfrR#rKWPQ#tiGZf=He+oW*lUt%!r4$V6YC`;b%$N^.
%.kQ@WH1'k%]C2r_k"ADnm5EkFF'tS^gTid6hB;X$%lPIL<)tpJmK\+/q;tbkN7LE,n1(#JXQNlW'heFB8bSt5bI:8\eGRe!NQ9^j
%m8>fGWP,EHN\B;GK0FGo_[[UN:[5.MN<`,IA*3:Ynf`DSq*A%4mTsYUq'^aln>1[2eh<:Z>^uY=V30sq_Tq=SB4L>gffPGm?h7q.
%ng*hhI^.GXmQp")pg_;?<`rTPl.4Am3)$eIIG7rM?7e"V)loHE+X629*'PuCQN_J(7!(6NXL#Y1m/'@UoCW!="MN0J(GN\`BV9qN
%F`CunFUmuSGh:3G:??!Jkj*Ces6=72Y-#F^V4l#_[ic3)+(X&[c=uF>F3M82;Ibr*!3*+YMouX\Q:2\al20!Iqmi/[4,(;tG5L<g
%[Bi\8LHeC6CPS01l>PGGTD@ucGL$:j=Gt&K7@(['@A6I(qTGF`Mk'V6)uT)cJ"T!RT:6El8#j&<#./_s#_2`;=&!esL)q\3+L[/N
%7)N!qrI%)2++CJC<QaXlW&`i'W#(g(%APVR/ob'UZ:>8!HR$1:)#V$rQ,6,eO1Ms'<sSS#fR/&Yq0]ff^C%+"]RW41Atl=tj"Gd_
%1CLbi3jK$+8O#=bAU=08kq4Rue%8iSqg7/DkhCs^0_V&3ZX,=ch>ZGUZW'(<U=sbiWJH;M#DX@j`%Z"jC^]3prarak^\7R=BnQ+k
%#^MB%N=U5VUNgqGAT5?H#9"q,]bJ&b(hQ2\=C^CDFX7*G@'/%b]4h/!_af$gY`IZ*7(?5?r:,'YW7[^\p"a].2r-(Oh-.46fVN<n
%M\3ubRPXIijF\k[dTGE!hI)!%0)&JBTiHT?OGcq=\GP*C'L,pbIYntV>;X33d>4]?oLEBJr/FN>6kld75P<``O#+gpGA8(4%teB]
%"4$;4rpV^$d%2&c)di?r05oWkS49nu"_Z#MYlL*XJN]43>!':ljs!n+Eb\+7/EVTFZ',n5_6SCZ3b!X[Dg)tP[<i#<W-a8b9q5i1
%2-ZZ#aDX!ZJ*lid&>_hd%F@t"!m]GReK18uh-GC)E$:](<H^UE0VlqhL63u.FuM2Eg=&"VQOC45R@X(B[@U_5T1&;DbG2Jq-2D2&
%Hh"8nit$b1M9]m<Xcj4MVjar)(]!"ZqC\IWE'<"/3.5o3;W4kQnb@In@-c4<GhnrS;ss28o=HM#`p+g^bAGc>Zc\%#*@<WPdq;\\
%(6]Ykl*IAr3UKJDQ_3i&g?&_:*8=O6lO<^0,N7AmX$<iLjkTp&7>T!XlhikdC_n.8Q`AdT)RoUU,.k+kr[Ala?KokO=&R'H]9;a0
%k?s'=p"-=@Vr`Pl^q]3mEscp-rq#/`G;>:6H1K5Eg1bKn?YOjAZ/ZF%Wr0iaUDJe[?9@'1R@TOcpOJ5=^NW`hL=,nf-+eq:i)smZ
%XL+*?<SnJWCDr2V,hUF]AF`%-kD+@RBLu!k/Tpl^lUW.F%eq$+WGZ;uio4J"NT^QJQFH7XKt`#PbcRN#b,qtjT.bUTYTM]WHAP@f
%)I_Z5AZUsY-*R(IF@P5crH75l!B.0J9@\o2D/Z^s&n7X2lWC<lm(E@>Zgm5?SWEu?d5T]J8it`XI03)gf!O&ch!l,S4Lt4Yj0OH"
%*FrLu5<)_/KJ`-td`n-Fa[4;AFXT3"Ra'#7I!P2A"nf01]ib)fc4G;;f"%F-dK,*JH_Bgsp19P6Z5.fXVA6\\T@4oN5CU`L.m$D_
%&'+Tp\t%/Cr:/g_g4&k\$7pFJETM$4;Kdi8Y[,K:2a'!Pm6\t^O2]`nY3tF)5M]HHhs^3EVt9OUp1eLXSAKo"hRa;*Z<-b+45CuL
%&Se5jc3JQ"^WKT//Ba=II!c2$2Z#ORh7Ln4(U(P;TH3R;2>rMo0B_X32_qSG5i-Fn?;T^#Mp)8TX5@c,aesU!GPEV>4Za>m1mBmh
%2]64rC/43a/Kl(J>U#GhM`./jrQ7V.4:)rsB*)n^H$)=O5'XbuC9=dBES+l@VpaHK7N%p?pG?+"?%0uua,@X7KDkL5"5\NVXID?P
%?<,s>M`Y_3?PEUKQOc.qn#UN&639C\a1r`4n+5`,40Dc8BA:[s[InN\2%0Sh05hZPdO*-,b(?mY(LKB'`0JR[L*,cKT,qU)F8JK'
%oO2HJD>D^^\Z<TYe>M<0%pg<kbK/#+O6]U,H_$,q[.:_Bg$"583V!!S@u;NS#o%,eDkQ]2`7E@2ZZV5j3+)8=48"lof;gG-)aiuT
%[u-*I!Hu\oIA"W1P.S6Z=9=8+iD8oUV=A!mm&>+.Is`Z^0[$XP<m'`@`t,oYRQ%$M5'k6[mN$/7hL0@QEI*^\@sn/)IejlTY@%n>
%5;Ds*')GgVZPE:^O\?hO)mXdSIM/[hCX"0?PBm*dJ"BqL%N9bj/i2tAX,TX<&)(DjYu:A7mc(RD=/C;Dl9FMC%2^]KJC\sq;0?:0
%<Sm?%_onsE_3_@&O!+!Dm,@(I@*d8f[I78,!g:[9]=rA7/c(UqBnq_hnp+h[B4S%pnbq^04j^!FFFW?C$CLDBj7]DDien%ZIV7ul
%Oah?MgW!E4HhSJelO'+I>0<-1]I,O#0!E/<ZAg71"JS[NSmJS54b&[7SSgj?7buVSk%FJqeQTt@q0B$mI+>jtQ*Z2;0,sVSbj1OX
%q[ip5Dkt.0hejIaJBpZ1oD[mMdnFWM9qaLlV7IjTJ7pTA>4XC3ALbL@q7Y#2n_3`9=g$r]'^XQ0`u4\e-+C=1o"?SM*%/fIBBfSP
%B=h7&ZgK(.+]Ea`pcI12WuK#YKOgZ='9;JsgDeV*rqWOK<*jC[;i/$]-VP_o=;1@Sn$9.cf*)Sh<-rX*RT[rVE0"=1XfXd*]ZRm4
%]!Jtsp<XPlR_/g;n>M';0b[/+>g8UZ2fb>4(\#JnkskY[c]0$Cojk2=FSlc=BB?Fk4bhr7Sg?dOq3_0b<egKDSTm93m-YW[kagbh
%V;"0f1"9qugA/iH%LV7#[D)E<S4>/Tpg^:CRf0Pcp0PAe_ma";R-7rT_rh<N.$C.u`N&,S\$G/hMS-5M8*uB!r:tu3(!ga"SBsjQ
%9(:s#159HFWj=:9Fe0U<I^"sXqN'$YHNaU\VR^%.qJd[iX2VJAro3@DpY_Ml'\A9&d;$[I^0U-$gQg]V?-I6U]m0j7p#QgJp;]m:
%,K$*`0`[,[]VeH,ik&:T0_<OI=Inopk-psCpA1-SZd8I=j''%Kn*8*okmMMs5qad-l_?7T,U,FH3PThl^A=8rHElGDE_j/Q>AAq$
%KWZD0UjmX:bEUnKFTd3+%.,ZPaLbLkVu8TI3NVW0f?_`<T>_9BXn[L_&%]`+]j<g(oD4m"C-DAX_.YN@*kmP2(uil$]a)%X\bu/l
%F)0D^mYB*en33GYiThBU`VJrA_To##ENM^7Cm=e@h@*nE7pt2$[FU7i%mdArm"G[cg.=f\]9_kiKoI1,=j^EqDf)1JoJBdo#HM52
%bT+:pJ:%I=;Ka^n#5q41/;B@8g=+F3R3+1SB8uMBI"c,`qcT#?i#7GP\Bd?pkKEa?T:[4%["p2ecC\?PNfWY$7!>$+Vu#As2tTcc
%GL3#dH<L-R]5cQ=HepWQ]$p)p2`(q>l_grUq9&u(rV,Z/"`f!4"\Zi'JJ@s&[IL*mb$RA;apb`d`:HI_*T4>Z^?8$Sj65U\_ri'X
%JY`SrgDqM'1(5_`2Xfg]FPkI+igS9nr=e?7'(eY,T_J-QE@:o%0-eY>8AThlgj7MGeeAudkVNA3@'"57<5AsLaq8Vs?1@.48p\16
%rV#Vd/\b;3h9Kpl/8UsnfNNWK]N*V*<!l#RO4W+s[dKNV[l\,,P,\HGgJomW*!<OtEr)$5.t3t395CR]p_2;Le)Ej"=Ck>q]\R:;
%K9s:X%mMp0bGA,,GkomVZd-SB06S)Sr>/3118YnP>)E.-eOT6T(-lUnmY^^5qq8u'-2k2p(e(4qeml8gAatRM`I9"P*n;6l,eT5t
%%j0ANG-^]rj))6Y.L"f#\56DcXOLY.Y=bY$ccED;?S?Zp7IDH7e=Wt<l[Q(>^373jnZ;^-Slg2*noJd;)Gfj=lR`[#'e`j80]e]6
%hjM4[_ba;%r;5OAHne^4b!.LC/M?KD3Zio9++t-<O]A*B$H:JlT&bKU&+]M]h'T^Q^eeC>YN!1E6;p&AD(Qb?ad.AE@.@B3]d,l#
%APVe4r::YbEI08Ms&2Yc++@O'&eai8p%V>E4?_HuYcZ]OaG,34>`p[8g3SQ-gF#fln*aklndiL;Ijgn:M!;4JZsr1e:/e'%o^iNo
%h9PQ1j%#TnAC>[O23bN^/3d6n/Do-mi"1.oq9.%Ce&OOYR$1SI*N8JI@cjmm?^>V\BM9P6f'A!#.nf5Ro7M8b-?E;HrJLR40UccE
%RrI$FLE"akBYIedD_,]><lLP\dSo)@2c"`eY6'*SNOp%dI6h;RLG'^AXLn]'.10juh!;ZOkATU$?[H^@o33OU2BVK/hX_9JSVs&^
%m-DkYOl`^6ORfnYdLLV2(`RYU>(*nem/./J7^h-(-;4"[$,$7Z(\DClbO"[[5/BXX1=4CcG2IgY0;mmgA=F)cp!!4uPh`hjIG%c\
%aIc<t4LU<W[?[<]2NZ[WGPu-hF7C18cb5<n0[/\XNL--krmnYrQ67)Qn&bptUHYZ,?sPM?41#OLT&]$*2oRunL>`ru2f$%,['B$>
%^?ijP<hFL)B,_6!G8B72q=m*-"_`ObpY?.->'XAmN`O(iq?>&%c'#pjZlSV7Y!?l@UX`LhM``N@MWlP#1(^bfj^(rT%6GrJm)hfV
%Iad'OE9E@+I_)o\FRR\&(N&/KhW"3P)nF:UT>5PT0*1?F4$`BRMt`Y*I"X_3;UXlXM`r!7fl+ZtNR$8P(Q[GP^ZXDu^"u`(4Oq&8
%PR=qiEN<"%clJg+1NcW?JMD$2+MVo2b)o*3^mZOqEN[YbPtB,,no"A2$e*X4]iHdm2XAm9?iRa8C+0YTXi>Qm@gB#;#8TV([1?4@
%4CW;,YEZqOEj:rtY&X&_'EV7R+PXS:2/:tD93r%kQgd%R()i1*1qHbK/PY[0W-inIK<W9j!mH[ojm!nae0in&UNW>3l=T[KT0md,
%MLKbteMX0se'**rp_(Y$<G2T9p19?6f<\DXTT'Z<9)X/Ue5ECMk4>GW[1j8<,Po]i"4B`?d)$m:\\"_\;*+BI730:</bNCFa$8j[
%<!.q$<Ni5#7J&DGe`fMr>YC>tlFU#K5G"ZYi37hPX8jS66V#*<<Mk0B6E3p[hu1@-8[/(W_5d9($Obe.KXWWr;nf2Q4&[BinR00p
%0^JR\G=(ClW`-OHC@pa6b\qY9H7h,!NH#ajH8b;tpBpW@4Zj-*U4bA'km"BN8T=C3*;l@P)TO(@<e`rAE"Qo/03=1.3Q3<+g8N1J
%B&.u@k`X#,hf[Z3(b1Yh*%?DLY3`Z-`-;!8j>#f:G8%iK$o>1!$QCOTO#gph7iV,)q[c=P_-5g)\tXPL>T7hYC4+^(\=8UX;#mrf
%WI-RLbt'hg/_VU`ij;PcV'3;dP8B49^J*99gC\0Sp?#;P>H!"e#0\)5jkoan<FQ8m4.,>?#1[jY7XmD33793lU%S%YXU+J0L?qdg
%UW(^oFoPAje<Lu]4iB[CgQsKCJrr'os)f>\.8t'6cO0'q_N,fr'mLopN,24A'M$KZQRT*q@7#,c3@*:J>eO141(.;4fVJ(`3P65S
%^$UYkQdLc@Mf)Ga0k$oWZ192iK<B4#[8/Ton*2)oe/EOd8tL_/m7'o#<U2pSIGCrNa[[sC;Wm`;bDn+khK0fHrThj$`/G^2QMM&Y
%*soWM5'E"RkpX3[IKE`8f)HZJ/Fq>lETN@<E1,D=+k8.?Xne0R[ff&r[4m%Ie5s^dKm%E_fr:Rn$KXn@7P4P@#Wih`S3uc*jdUt=
%A+,Z%?H()e.RsM_3H4LMZ^%7T_b)BNb#8WtcDA+Kj2.CkJfdL_\7pI>r%d2X'q,^VE$`NIN]`QUpQj*QI#SB7c2A6"d>*CiH?P/0
%=.8VSl)0p9V/4b;J%,d?4o=8h$e.5V*i4$qjRE>XEHTXcCunU=.Fn8/>-#GiFUHCNKU(S:U8Rd*&j6g!mdEC>f89F/H?q&Xff&TT
%,>!p_HLMa&o7ZaTU1p5[&dSoEN(_@ei@b[R9FC_h<T5s84?IEW4LN+4&)V(6:9"XO_I_H@?C.%@4RMpXQ`<;T"uG0CQ-<"8%X0d0
%3%ulLJu)mZ$9HQ&mN;Hjs5STIe8nL^b`t^N4A*:KM4fe\6O>1ZU;M[r91Rt+6<Er2'VamO6?&:gQ;+m/$st#5<T`:JKgpu)cim/Z
%7Z]<'A?PH9-,AFT2D')"ib&iZj'CKl&K6NanHjN$NHd7<Ye-0P)5CEbk0im.d(ZTJqPbCDaUY:gE"GI1CflTZ7Y#'5_XUm,!(Xiq
%p/-P(H+)`GH#T+h0YiigfkH"J"WQpAC#>$c(RO(L%pVZIIFou<A4"9!/_<IrmAFeJC^mi%dM##5%Zlj\SIjZ8rU6SJ-28EQ`F7_e
%N_^KHk+sZtGm5K";o'n<DPoY<`MpaYVL?c#_61.]iWpA%<a!7K\kg>\fA.mC%h*#r,!(FXLAO0th&5g'Z/bRpE"a]gqG2j'a+Pg2
%lo6&1qbb2c+]JFdgXisR/8'+Dl4608DT]k?lShC8U&Y]OWbG`U<8o?:f\D35s"L%$jg!W\XaFl%K-V.;333@4&V>-aERUO;\Hho`
%NoadJ[,kH!7=S_]8q&;8Hsr_I!1[I""UYc/P(W>O!<R4W>RM&F)tPAT(6E?;E0$Zb,FHAI2Coc&)Zm9$#9AF>TGXgt/n9()#i>u^
%qllb%&e`Eb[-(ShU$$HL37<t9!%(uCTCT?:Kr^p&PH\R;U`F(d"<rF?SCBLC(ppbFT=Sa[@1GSK>5H$u0G2E\q@k8A+:5`%Krol6
%4o3Z$gJV]%pDD-""$6$9%<?j>:"^pKK`Zf+`&raS%n$-+L2q+lq98b@E+",s?tO2)F?RLiJOT)$_KiqIYXK$t>Jdd*aMQ%[%N&B8
%YNO5:T+H-a'c>E`HP2Q(J3Zb@#aba<$3kHtO.0-j5t@k^D-rZ!(D9aY5bS$\o.>UVMP5j#i=:>g=%(9fC8#fco@)*!XreBMBhL5B
%?Bgs:Y_?'<K7kA@KVA`PU9I3X5V(^n;CAIk3g!t&JQ3p3/5)8,JiQH`!RuZqOn)aPP_UC9"_n#KFMp"lGs8>Gd0d"."RF1=?te2!
%99BR5C_-7L'f1%?KN#7qQ1c2kU!dpo9756<$7$0WfJ`gtdXWm<<Z3C&G)/Va6j!PdVkTj&)$o:OV\.p6"sg]G7-%I%CQKnpe"O.&
%)?s9b'5D'P&*`m^r?)]_Y-3+MUAW(E[=K)KbiW*u<rbg]CIW@c?_IZt)A4N$_ceJDIEb/&6[W-'7lZ6t/Og.940Em>gi52AK&ACX
%cZ);P"O`aIbm1EG@,%s_/Z9rsiD)F3M][e>67C&CiiiLN*b?&d[LCNZ/[mmN)d_6,Q4Y=ZU'LqU-9Uqm:dM\(ToHZ['LVqPHC="N
%6.mbt!EfLDKZu'])'2Bqk+V!jAQ53$[g?JYW@&_4f2.5.NPk`d6ap_1VIBg9Z"6$>/cb3XO;Ue=Ng7k$MW":OepH\hC.91QNWR6E
%)lB$7K8@O^J0F8=^#l8kq9i2R.Ie^?;V)MLXG!KF"b:pI#U0e)(a-OGNRX*!/V_Zm!"HmYg(9,]Utf)CmcO]FWUFj0("f2]f`ji#
%6'0!Cl3$QB4N(&f(hs868B*D\)YqT.5mu&S:q9I#]*+Tis)UOH%+7StjrdlYPL)i*UWi*_#Gp*f&1tVubX!qb,kJkVj%NSeJ:mKQ
%Rc4eo"98K::THgH4uVc@&AH_@i-m/!!7%gZ;2u]6$8J7?Rtb=l3+PohdP[KFk+616dFE3+_2b5F_Ng2d.D_-3!@1Yq&fdMB(;pN\
%!^T,"_]L9d^rp4+jFP]Gbc`0JE.t&d"W0YOdBX(s'gpJ9Fh:i<8@13_enHB3is#VcMOW>XTB9Os>e"&-UkSNRg0\5>Ti]qQhin]5
%Ne)`ZL_'U.)N\Nm:-g;>c&*$[d.#PHES";W*m!9s5TDCS*A`GA%3.hV*6JTWejrq'Y12,#i#pC23E`J!`\pEtR##T@DV361`N7P@
%rOkK$rcs8!pWZ6)#7XJa?K?7`ePMmU_D!f[[=e`2E.JlD/0btNFLL,rLba$K4I?UA=A47\dW/h$F'(#1,d[XRgM9C7?Kb4T[U@KB
%^4V'<X^u#_VANEC6C9)`Qu/;lBSm-HdBL%CaZsU^_".)^ji<Ya@;+Z;<[ima0O*g<4VpMP9s1O,VWK:lhbR'/j`<+iW7FEse]%TB
%JH-(>eE^Drgjh-8q+4*36$#I3$e7QNXV+UcZmfYk9%\<-Eg93AEE9$;?nFJU`<,4j\X#!TJHo/(')2lo7Vi<m?<NL`7VKl;3GFUh
%'*:&!Xc6!jS8*XB0BaGYLqCf?'B#hqkQYm)'lfH>KX(&?G\C+cL5M+@+(6TD>X/@T3\"4(!7u`tasnpj#"q]Y4d\'@;V+qb^-Fhs
%.p!:`-Og,Q8n`e6U@"YI?tFAcZ>:P'5ofr)!//9)2'@\X!e+lo.*^A"#RAJ+b`FMd"1eV$_Gg.L/;dpF7<5og^'8$Xc:3*FG^;eq
%0I7"cg>,3KdLQL<a\sW6N_4q->bU)L3NVAZe2dnT'jU.NO;gN]9&Ks=WF:4OUOXnGH9&9tOD75"\Fj[$Rge[<*a7(WE&0>t/T.Y0
%d"AiK+FfVR"UYji-rhC%e^.<*+"9WNWBm\HVA-8Jj_:Ou10loO^hAb:JUNJ!fLV!"1/75A-@RG!"U:OJc7^(q5gPaoBMi5Xh)2@3
%ZK`"D*9HItRX/53?Z[>0jBUeM\u=qZT)hcDW=oOR<mpZFS^3T$!+ZN!9>,mBll55Saq"_ed]t9cL4mTD:/K<R22(-PJd`II;N;0m
%nt_;.+B^H%F_s^UcLI`>!?iH2Vu>h>dpl'TNbABd*p_UC3==8qDoJ^f0Q8Yrk)(hBM?=Qk;]-sso$:Q'O;6IX;3D#H5lNOGmX2EH
%BWRt[!SqH3*Hml-nBCE,=%b*)CsVd`Ni2eKN+?*Ufa5BuF_LA4U(Hd,k(MRR9_n'(Sm3MnJF5QW>^`S^&V(khWDJjqRGM=%_mgCS
%:d[7_e;t;c3!6T([5O22%Ka-Wpl[*b"ha%K1ROrCE%!mOit2nDW*[9&a/ni6@g>@7lrT!R5\L(jiIauG>B'rcaKLQp-ShT_D&`Zr
%/.ibHY!+fG?"M^3RF)GdE>KW_.\J$2ZCq#bU<'Yb'``5j(0b[$%c]9XKY&o0I`$QL;k\s$O<_f5,=$'Vruai<Tgs6B9g6W=P&,+l
%!Ybpd"s*P>3kBf_:3gM6$0Gs]G).&&[lI()!ccuKZj3M]f#5gd0Z4u01.O@.N*oEfD3kC$_!Z#M@jB(2_3>!)rFQna73-pp^S=+I
%!!;=X.:5.<@M(!'I*4+G0S+j-?Pnk9'Pl[Mh*gP:*9N^rZeHdOd$tqSOa?O_Na'ZHj%O/8(LL;8N3rZJ748sPJ/RC3R`h(ZTgT2S
%$,_"\n/\V7V(GD/#9t,%[uR\hq,VMC0j@nP1&tc1gqe9WaVK2$2URIn5St3PG_1ql_;)g80i:J7"\&b.&>^'XQBkYgZi\UU&tp#D
%[($A<M_WQ*>74IdUN!U-Kf"=k%mXCa,+ot&f?0*5>SI^1C$FQS63ZNajPh%f%.B/j+Qt"U-_>Hj"oqc/7]F#rJ-7-MCW&G^01[lm
%pg%2K_@eopLa6[rk(nZeb$[Sj@&o#US'J5?2MMZ;;bKKSkU%a=iBm*s@[(^!XDg+PWr`f^SfM^HD`#5X2+%@lC+-/[L&!-MqXGQ;
%+^c9DEDthQT8riEX.\\i'U</Wo?76_m23qg(b&UlSW/6p88:,/>[oZ$e>/3ZL<k.6:94I!Egn"c+@cGuY$"UuXAXPkKkhV'N^jOa
%Ad"jII1;<n";pj,5)hhD0;7W]%hqnQSp[7toK36H;8K2L_1,p?e!]N"6e?It<Uh@I<W>CFggN$sCuMp'V6YC1ZNt(`&=6CKqHQ%j
%k^5.D]F7T,)bPZc$h=Hd!r5RDajN^@fOJ,IJ[T"s#Piog02OD\m=A.d@2qhs-tYq%<HFssHJ,3+4DeQ&P-B<Pere01.I`VP_[8W(
%$QBcp,%9h$(sT;k"O<YPYTQM#F$Sg^7^kGna2T>9FZb>c/8uoXF\i^j;?6Z1CR)[e-10+P&EJ+%1BWd'/Yc+dN+'qa1aXO$\_NP_
%.*aOH`RX[=K,+VWJAcg[BCKk5I7f&*9ujUW(+Mi+/;hE2Ja,%dXT0AG]1PC3XLN@g:[rnm>=P*&_B3!-7Q1+s/jb%]\ijX_)L%ck
%r%-1R)C.GY[C5CgE?.ga!]0nS.h1L=O:o*1*i"oPY"lcpV!%e[/[@#]8(4'kfQ>W@/NFqM$]P?Q"4h!+0^>La4_dUH=.b*8`&'=O
%3C64@^nfmT%BKFtJ_#%T[G!I%BIuh;b5fG85*_N-L(hC;.cQS8WX6A;@m8M0k$&oP5'YB>BSsi/DGR6YD=>;74?R"K9]0p29FjKO
%8F`;6+0#3HNlJ*&Z1TElK^@s]!!'k0,\HSBdRk>`nJE9]p9X\cE:K?n1>";c<hNLai#qlBG?ka.!"]Y]JUs*)GWr-Ga#0P5WSJs:
%[bBe.?Q51X:n/Je"<^ZfW7-0;L.fBRXXG+G12Q/YT(5le4Y$&f]BKU7lu[9eN"<`u45[kB$c#];"!V?[E%14m[='^tHsE(G$oZed
%OT;`sD%$Vg92EICQkIHL&'/Y?ckoA9r"Pet$!)RK$k-X9:MmR_d8:&YSW%Lsns$jVTOXF9(a<RP;Rm^!^''$-A`WmtW(nPY13CA*
%n[F%VE)R1Tf?k!L;+.uEN#UHYM0tI.#,D$^[AqGjl!q)m5sm!k8IqDrUEf6f&\_c#iB>rIh]a).1OBb$'Una?@D>52'+4@#]L>7=
%!U:#+)^nI3O]Q20F?H%Sn1_%;J]Kl$'!gHbW3^$!7Nc=\3hYH1Sd,YAaK5hk&Sr26@sEmQ4TcG/;FjP0NeXom&=oMi5g4UjoI</#
%!Q0OA4U+:/C][0]r"eN8^U5eZ))cSE:Dp1.0NdL?PY>p(lr6H.EjZbHSLEHT:p^:sTsSWg)^TV\j@Q\9>[+c>oU'2J&f=4`0p3oe
%5g78#_c%Pq`5jO5Vi6a0Ko!YLC+pk4jQVAb'WH0Cj?ajj:b\GcY!2FWl=([sf]n+l*$!k_*n!5>DcN7_ciVJ>R>5ku&HLKfMT_@s
%bQ)>ZJP]b*eT+N]L#Y4_h/*m7Q_83+,^/p)GS!-uF&KB]Ue+)^jccHN%'u17"/pi6L&SQ`$kN_S`tfr+(tY:;-`&l&Mqtn:[a9%,
%Un%fQK=O]/\M+p9'SBtP.:,'X!P3iGE5P'Mhrk7ne.E+q[+%G*h)>?hAl9gY8f4E"-.@_d>r#12ouln\AhF1L`URimbT2LO!_JQt
%!S**_!F!)F])'R[@6UNNG5i1Lk!]==E[+i*bkK"[9/+[Z]o,&\jagUN=]-bpN:T&iL3&S[@0R<5mjgd%hu,M*%Xqi#//5lhN.J*'
%#Lc>[<6#qNqY\N6$+6/nDs8f$%s(@2!qWdb1qof\=dAcbs33uP/C)?@ZI',#<OsNg)J%ZS,D\'/>RVFDPI)0ZGZ70UNS0cCT(!b@
%YJR]OF`ISqTNhn.U)>-d!T#M**F33_p,%KU9Ej.sN'd>;),<.GZqqXgq95oJa.kWRGuPV%dkV);LN`UbSDDW;0P%`R(8*FYpO@6m
%Cs2K:8Qb&I_-@`HJH!F`/_isYB!t-@r#ctL;G+SAM!'RRp=V;9<_0!_4j[kJpn6]-Q.3F`f6'E532L?Z5L1(XC%:E8E3a*Zk&6sl
%>ZGEp.\g6n'[eAbl?J[,:2PE1-G-AnG!/<LNpo2jZr#MEIV2#]!0Wq2CK]j-W&.80G6>nk&O*]tQpV<Bih;$G)D$ph1PDGVW4Y@e
%Nju[F1>(i5CY9OUW^H:KcmLSm%"4*)l;`p<*A\+,g;DKRAn]'U-pn"TCJ5(EROB/@=sQ))MqFgYj%3gD!%P80cH(<NPfd6@cB2kA
%KT8FFS8^/cW@0u[O^^#J`-+6(qD=ct@_"XnpgY.P<s_ZXii9l9Ca0uf#=WBdptZt!PS54M.93%b'pqXI+VnE,^L9/W*m1.So[Jji
%N%X)_%k:>78!:6#JdY7QFEL?QX&<j>?$GoT\V'Kkd1M(jZ#s,RIH5Xa5k,2J;T1WEd/JK,6R\$r/T#X[O-^ZuQI`L@7,:1;([0H3
%H;.jL.L,dmOKSW.<UkKl7g0`0oIr]6_jN+Wn]["TG[t2ZVMgFN0\XhA37##X2gd39-W1@G0T!fP^.O7h[C3(jJ0@'[3?A&4,Q0TZ
%EK#N*f_<.l3fN*aHck19kmBB+4[ag>6+YI4JF'(a$G=!L:-UmHV]h:7q=0]Ed>_G;fO]jb*p[2(diSOPDGfE583F])_2F`"0MJDR
%=>W>a?s0H7"nV:J'(d0m+I"M@i9VD,%f;o'+KuK'A;1ofG),^<ZR`slq-bI'7L\^>]?0q`HC,uQm8EQGRu!647OT,^1&^e*Iir_a
%b3-pKE7HDEi#EsV,-iE8"K.Jb=%3s%ZNDPo$Y';2pAAi$MX)eK=IN6q_8k:EKJafHK[D9n#Z[[]%LFa]AI+,oL9ng7khB3r0Ph%8
%JHlg$M7\!Ega+mB7XPVKXoFQ\q"X"<6s**IrJ&9/4;CMg)R(^EJ9_2Al#?5oPmFsiK=A0L]OOSHCkUK%3n.>rGa(Z(1VuUF7Y)u;
%fq8CL$kF:_4C]*5L3Miu8qQ7-UVtL[3S\;N":X,c_\5^)]q^6RS>V"=@nZ%AH,A,d(Gg]J=.b:O(mNAO>/DLr7]4>E`\\2O[3uI4
%3c1i\O+KCD@Oql[du8Y'X)6Doca2"5n1]4/Abp2d`5p=]JRDktm?t($M3ss]l$NqQA\0iPQ0YKX!&Zk[RRU_1)4g*D$_\'uR-Ws2
%]3l<u5444\=p`YT*'CEXSR[ldM'2#4Nm)M1*)#f@-'\bQddqkNBUDbe:`-Cp[YFV+UMEmn@-A=a;5jP\RB+-Y`S:N:!B%s<gS)!H
%QK9Pa!AM*&U)"8]L8,<s6m%J%&,<)T-()MY@?,dNL.&.]')$l:=%/IM?s$?hB+fQ!^?`?K7L:2>6c)NffRb`MiTqSM+G*u-qTU-4
%4l8q5$GBDnmjJLcm=jMR@NokGSjepO6`lET?jUlo<<@rKCRC\K:baiGem8bs^#6<#h0q=bBj\K#h+53Xkmr;emqVcl?VkE_Ec>:-
%1h4hh\<u@%pqQknhRSpS@,6/OhPd*WoG.73$3S6JZ/U?J*t0sce8e!NGi?eG>D&:</Of,maeS7P#S\qWWaJ@3MJ(]u/08g.HA7eT
%"mk5X!`dmq`?[\#6d1MJY$#_e;oVQHl6=_Y:fnR\a>o82i6i4OObb("HiS`Yo8GZ8)+c9i^uobJoC*(rn.k_MVA[FlN@9V.5u`Pp
%#S^d%9'B`]L_4R6\kL]\`H!g#U]Uq[<Y]%^^BE,Qkm';KqLp8NaPLpbp]FpXdb[-R=Ns.4ILiUnW`jFf?-kCi\E>;^*3\/-_Dc>:
%EXP/rSUZN6I5FKC8sD-7)-(.>Ca.Ju(t)EY$tEdnPlM0``NZ&Z"kOlW=YqPqe4hUu8Z=o`JTS#ECmO;:R%4:0O((s^&*):^;kQ6,
%Z)#2<960)I"j6Pgh-bn^R(ik*cgeF/M4(SS.^B2cV=#qrH5;7@hJHHXaO3s(+6Ag-/9pWD0W\PIa^*urEci^[ktXEJY!FHOpVZmC
%._:CI+3+L9][%f3Lg0/1#30qi74eg<9>#/$bU%,^&C[>"5`WG/U:q)1<*OqYiFXTFe4;R1Wd08eD.@HW:4Gi\*8&WH*THlC<3#Kq
%]*`&Emr4]ZmV3gX2pO-ScgH,XW!4+#olE8f?ZP!.Z>`Z?&lf4V`*QYVj7q&QY[@gUnlhIl*%Wk`F^CZR5DD=12)%0^<J3X="m)pB
%0"l5ui9Qa>c%S5#9sK!!q*cAkAc:$70&Bt.[>TReS<P!Li$G0+ASnrc\M,FN!S#_gFA%IA9:2Kr4lpI+aH(iWhY*&Rpq_bNhM'?2
%?e[&(0=_.2B#h`L`kUN\&Z$hd^=5/la>J&`m8@@!PokesX?9,P!YL$^_3BBQl;`CCZSC4Z7^JXp"JF0S;k6m!qiietqIHbXh'C!>
%>t>g`P,]]Ae+OXp8e@#^SAf<f'Nh,g^*oQ%bu90*%(mX7(VP5C=>7YJ;Mf]m=;uiB,F#?219rg7jXRqZDEuEP.B9'!#qh@de9YLO
%/Th;imY?]A.,M%&$+[E^-u*a2b.r(HL8L!&(`oj/::NJk"kWm[\uCU$aCBf7js.+%NU26WB%u>sJ6?0k!gqq9]7T,kbbBV#io/PT
%XsoO"UqAk?d%8[qGaArCFf)/U/Q!M2[8`#&:o\J6Ps'ncGu_6bTbT@qk#tLo']$kBlM=o_iq7T@rUXk0ZLMst`5G&>&o'rf$kH?W
%>eL&0kMNeTPQm!/OKSH2XFJG`ja+j*g/Td$jb0"T2rG^qQZNUr/*]L\ULR_qTbHL&JW3^@!b3YdccBR"S#o=)J/,3'Fs%n$!$rAa
%n86VVAR-Jso5^6Qj11%I5iCQ\OTNGeKY$ZM%\U2diuh&05@Z8oPP*n_SK?+-\JgQi"4`VjR2><9pOZ\`;i_ahG2lXqBgrH8/TEm-
%;f75`'Q00P#F*8.h$+k:_MIie#.r%7TYt"iI4PZ)PbD`be"KqQ]TJqI,c\#dGmMuP<<.B32W+b1oI;'*_DmjQ^P=*MCi^61?"F0^
%(lV2l##de\JHalJG4j/6VEQ=AGLWH91&4k:G!r*VWImR.T;s>k3S2Cp>B8-=;UWS%>E`A!p8"QD!'Au;PJsm[`XA0&J@LLtQG*QE
%ZUN\55VNIBV[jbbc0iAQ#%S!\-E$iA25j)f74<ki00=K$,@InH*HtmRi*C3`?^DI98Tkr!a"g$+X@'Wj'dk#Q]`9AFWQY6'?r,U*
%]0<J0iU.kp+D)t8MNR5(7.>Yad#mi&p/<s7]T6['Y&M9ODTq@#iZOtfacO)NisA5qUZ.F7\=5MY1@Ah%GQYQLf8;`'IkH!3)_X5F
%cQ)7T33l?6qe3)dedoah@!DF`/o1rr$nO<no(B@PMOF.@@aF;I[G?m,7pgV)P<n:<AdqESE2+=s]m,.3Q(d"#6A71+qn'YE9KjC4
%crJ%OGN3?7X4YmpY1J`I""k41#.EC)>C4r:et_$@'>cpinHOte*($E`0\Q]O:"r(-+p68Aq>i=J-iL*UgJX<hkX-DdE6a!VTW3`M
%U.-M*7A9R?`62ck*"OYR9'Uk1bTqWP)6=mTb(oZ^Nk4$6=,Y6$[objM=A=V_n1`_a[0Clc:BZDX`!]7r/e.(j4m?=n*D]iD=dV3K
%JZF"OGeMWLi5m-/D28In@)X6aRVD[L3`skV+5f_0(jn&g%TQ[Si%gNpg`7M<:>SZ/2ILpEmN@_X=o96pFA^rI7^D&nND3q[4<58L
%-O5]0S:4WD=&)AgT?GU-&d)?mU<>;1FK!mVWZhNNFthK(g7%BKjep[?R!TQ`n.)^`,KMq`0'M3eW/qqW[gi";Y),o4s&U6/"%<(n
%/<8Z]D_W#[A-7F*Ln'>p[3;\D]GhdXZjn`Q5NYr=V@+sIV837Pql[LmM"f(mKG=Stq@4TI%oC)f"Im$XN]q\sC9*bWH)T'r-Ig:?
%4;bEsj\'\OF:g&T>iTe9C?],+8]SUpNdrfb>mI56<l,;1f0onJ[L=3qW%QWn?`JNL="nJk;%b#^<_^GuV2D=PO7@h03Zg\mV6<,C
%5p]"`&L:Ha_B=bkWEIs?l@2Z\/bIXsK\]]]p!mh?B#K:h"B,UG=I%Y7oP3;2]&mKPX[k-AY7P$m\!_iI;f[IEIBOR*gbo7SLUjFa
%jdMDDa(5as4Mf;+[T)A3$-^pgE]X'8Mn`4'/VGj+rW6NV=*:2J`jtnKW_/tL4+_2S@DZYh.f_H+@#hfTl;5jO0qX)q0jkOMeC<$8
%8J-]"1'jaP]Ei-@n8n#tMsP]PkqMe@UC2G/q(1BeAQ8<H:pt.W*`M;TcOAlD+:hnH0(junJ2nmD1!JS2;ht=(r3ADe7Q5S<M(>[k
%W5-`Tc-aa[G@I.ib6^lhF\a*U3G"k8PYO#CGX4k>DaEEWMK1Bk/?FJ::#)Tq49Pa(M8`&,HMQ)G)D.VYbQV0e?%Wh/O7)\Q,b<.K
%4.$UD3)(,5r'&jP>lO7XOO$;O#5]9)q"Y?@34u<^GZQ_(*K+XsB56OM>rI#=![R&lpl6j`8cNej<o^*VB+Df0lkmbg*SNrI#s^1K
%5qL't$dM_Z/L2073_%K^[D7/^`t4_1'eq[JiABqLbZ9RiB's9_Tmq*/(&ANiX2#]&>T?CpI7oAKbZ!h8=eXX3[LV_H9#rd3jQZ#>
%@PO_`*Vq`DUcDI#;Y;%AL8S=01VMb$(n@.'MLJe[E=ueYI/M>H7;Ak*[hR"]E7B];9^sgI.rOhq`U7))r-NjEK6.cW8%^<20S@G>
%LVK8nhR-Rm7[>Oh`6n5=lKppF[@!u,M<,/N:-qC=J%F>h4h>,R;pBKqBkfY1EeRn]Z'O<`@B;uR1$5*\$%?D9F\,;JY)K3+q3m3X
%R](*`-75bY;H*\=6.LRP1=T$79Nsrt?GY,k.D0$-</R:LCRYJ<+Ga@'oUjJaM&=45;afTi(\&:WEQWD&^U9EIE%d2L+u)VR0O=/_
%r>bG?#c9,e34:;1>#]S9NG1"Fg1Ed+V&&>oPqLN)-hPF;6%&$2(2n^JDJ0u=-?V@e7J-$@YFjK2j(m?CSg$t0*VI[C3)Zb.@Ck:t
%H?l**r]&J#e1??R\h[N>l0?)=2[fS*Nn&Na:FNL7;(?I`2luQTVcO=5p`<u<>$1&]3V$!$l&];aDD+.&TWLK:oo4aj9,Wnej_=^5
%l#+"6$cg[:^Pg2k*[/fl:%SKo\l%eB5M$i$VOpY9MSi0C:Al]:bt-0H7ds#GLBN:`IOq&8GcZEJ%Wr4W5[,SZ!UGO&;%Y-[ZaNgf
%05de29C%oqXiO3HHk-B0Ls]KVXQJtZ!Zq^poBM,:5LSj`>.MS>>k),H3XY^$1osSIgBk1:pFN(3I*;jr0O_EGjdn(9Lg]+r'BW\Z
%4R>t\5iU^K0Gs'8oPfJY@34$/1c,1p<Lf1UlCAD_"T!ZXls2&l&NZ]E<f"(2@Nu1<8tT%0/Z;<85TQ@%21tLUa#lu%3C`jQ"\tr9
%#tqeI;A$X;dWNVNQ!,iYG<<'E.8q%1n^U]HYu246qC.7S7<)7ud`6dO2\^D>I7Z/$Adh/?I\9tgXLYpC*ILM7/hFT_6uKT%#DJ?m
%m5O`51L`;h1(M(FC^!#q8=4oU_'b0UEH"k(>JU8014+ODe.(UY]W:RI=0qtU07-UH"Y:1apF&bD>?cWTq%;BKNJ=E]M@X0n>)c$E
%j3$ur4;=MdOVU_U;+T(?g0mZh$4eY_<(A6Z5,OqQ7fnl@;5+:&>Z[K5'+'bbQmeYd&L59S/!Mcp]MUs21H2F(q@V+@.*(EmV;m^P
%V)tgdb".)Op_]sgQ>pP"8('DO`)JU:@O12C`ml'nKb%McQkPD.4.-bJ]0rqCSE8"u_ViX[XLfR6M?8.A%DbA"VPG;'h)o&_Z[6]%
%<-%XN0K;8Q[_jQI:,jOnnr9(!gaKdknCK=/;1&^D+&65jA:/O#Wac%CnqG/m2=uO/@uWJo?/n7q/M)Vl\h]aS)*9[;//a15o]'=i
%+Ycbq8A98dcpD1s'dp>/Z'#q\(d<\uFWj6Dc`ef[<o;BP>"H;BAh/\;*%^Wr5tN4=K)/nUBO!6kJSC#+qKTUpApH`)4^Ydm=M!C&
%1]2VE_nWR@`_0^>?8DeZ>Yg'9Hr$@oA$Cii#_DGX_[JmWqX+jDG5(Y.TId7Ec/>J[3O?pf.^rO.F..+'=Su//\=j?O`(@.\5Q5ur
%4oN_J"d(LkM#/@'_M:-]rI50O(fQ6^%.Z9i=O!Ck6>+WlbNCptDDaUJj:f]4Ji/-b]Os/_b8Ur:r.H176q=Fc5O*RV\Bg.]l8Y6R
%oRj"TRe"s;10kULU$'YM_I;_pIMERSg@_s^3D7+m+YaW7(*6,Q].-NBd]9CTR!l<RiK_$hY7Q>H?FbO?FkfOo*>V'2V'A1:dGPm@
%S(!k90s\8Jb^klJri"=CJOSZ`I*Y@&"L3D:VP2&SF)Ekk:akZ+<7>VA`VZ.g&P1N`"B5e/d`lT<qI1'lJHRe+._0k2LnH6o-+QWF
%-O3#81.cl\'oZlI=%bf+!W[/a.0^M2KR2ERRTnsEi3U,2_a\?k?DTl")8q:Frd.MCS'%$b?V8(O6,"%YD=i(5CK.k6<6\Kj9\DAn
%3H31R`qYUDL^HFm?W<1,$QhaPA@DT_c`pHc.nPF!9I*2`N?j[uUHoq:#T9.AB_fs=m&/8+N'Y,qMg@esIY8$?fJ$<13A0qC,;.!m
%.D74.di/a#`Jdu[SXt]SH+F,%Kn_S+/VW;Td#\PVdIUn23(]728$MJG+*tIsd?LONlU!#V"sD=I,sE$$0lt"\aNNMsW[]LKLPK%8
%VOn])E?QX_4l.,@_ABHK@kKf7;C'!I>sB=L;dhiM/(ZnGKT@WTb[>K#K]@s1bj\)'+D,4X#PMZ$i^AB<6dR/.jDm>X!q_oc\[FIk
%YR%lc@@QX!G`IV'Z_XPW5Y/geEGe,!7,[=L'VU/i!:%ZTXJB<f(ILrqErX5FFI7'u,0hW6G.\&!20.&KcOC^OG]/eI*;tn!XHc.N
%2]!u<;%;2mT;f<n,ecg)r6)?;X*I$j*`+)C0Q2%f=61P:<(2g1HHeU,cRnD:7h='H_)I0QRB?U_YM-BbD(6;#^T`L5]^H&WKF[99
%,"CucFMh)gM%dTYNpi`Wc^!]Z_h<r'OPIKM#nZT,Ghi!-J!K598nego<#lB5\ZT91Sg]\n=@OQ:A6UN;e.^^.CqXpWBS."74fX+i
%fYG/0k,G.hS54>l_'A!>_("75$M7,r3Z(N\9PDgs27M#o:IJ`Z:2.M:&&(iq(T,OqKCDqioKTm8TE+^f<UrGS`4-l^CqJhp4NgZV
%d6G[@%_#k+(EImBo8.0]\BVL6>4F6m0@HV.U^b*4,?,\>,tShhlOW,sP*2CBD-k'W=M\,[B"LDhk35\n1P%LUV/<6?8JP)Fg?G6i
%gt]H6Ls_2b4Rin'?7$&R=RZhp=3D'_>`"<F"B'gdPlmU2/,L04oJF%%GdBqd#N=.)+EJekpuuJ.l=)0OW78)dOlG>*C:).J=_dOF
%VrZ,oH/>I.A$gTaBE+S3*%=H(R8:Xf$aV',ldEF&bY@dNG<(C&#K[2-b&k6KI7dL&!FJC[N]EYmb1@7=M]$OEU^D_U&!e1[(b#>!
%bMUt2VnT:=QdKe3FGNpLe;\/4,^i%<i2e,V=o'0S66&SHfg!C$@%Gj$s#.dbB*][ck@uQn'nS1oA47FJMW&V/_WO*G+*dNMCo931
%.Z,+O)EU(seF8llDci`';HQ<MS'cIR?J#PB2E.)O;Ut8e6DS/s_:3p&83Z4Vee%="4YCLfd\9f^A#=IV0p;Nm.9YP`J\p72b"fV3
%NC:prB`SdX)ikR@<=+jSSrO@j[OX.<#dY2!O7`%mP`Z'?d5/AJi?Np:N!&[`C$b_0VBX"X=K$b1oU)=^4T@_Ro0SqeM.P,pE%tg)
%iK8r7A1.TFP<9!,XiHe8c4-WiL_'Hq^-`QgWCm@rZODa=<68P<*%*RQY["L).W!j!N=HF&&2*A>a`BrX"gSPmiNZ^L53:qV%1AN?
%UgOUK/9RU&S"e+)+uU5f3Hl2U)eVXu1Fr7G]dd#T0=R_V80Hseic?\3_A?TXRpmB+K]!Fd;\tNY.ZQfcorgtH-o>;9`%*`GHMuaR
%\>%h>h`M\?gD9UCS@dpsHND,J7::MhJ@JDlm8+7-I>ng=U!KJf:K3*kn5L7NVf>Y"DSoUe<n+qA'n;Y*Dt"%1&$)^f;=ptU(qJ!Y
%-LkUg97r!0&=<r*q;449LIopS5o*^F:N)#j?OfSR*L1/ni<&l269WRMLuNb9;nV?@kau'Za#\P::eLe3M.'E)ZH;.un=:09d?sQX
%@0p!ROCYA7[%J%/[U)0J:p3["N9fb=i@9ingV+00@6Ds2;DE7*nT1eG\LIODa$[gSW0"WC1.Sn+;MrieL"XM'^Z$qG)r5^HRp_SB
%4UN_A*A4^@Qo`=RS)`:#\Y7*)A_U>4R?@kmH@6<>r()5jP$oI<;t*V*UKD_p]`]AET*^J+KSCnR2)&*+6ptL\)$P!(hV.baR'LHI
%<K\,s?<HEmO@cW%Uk:VPE(EJ9$#/Y08uPU@3hueTV!oT9>i1'n2MTE:?I_-1T&X,Fs$TDUYCp*:s5%^f&8Tao<rtKr@nAt/]M<D+
%GQ_UCI]JA[M_NZm;^4Q,n?h5US%/[=GI!,$J;U>$O&-1_i0-7"1E/m/VQ;X`\p%sjg'(:".@uMq?htt#:ZG<>&1?YN%RD(WFG1jp
%d>nLi9h[]1Nj\8f'F#%a=+OV@SK`cS_d,o`/+?Z'X:G#&>:^'ABPING0[DU!#AXENG+6jB_mcRDD15k-:XpCO.*"GebVr@tgBaO[
%QF$lZ,;d>[e^4O]U?Y*BlPT!lFI6B.HoMc_<8kXC=OFNU>UIV><M/9M#,eA#I*:XjA.,&.YUR)[Qe9=KSurtG^8.b`#R.](V*'.h
%Q:pg$?N,kVM;gd#n:Z:PB;h`sp3,>0j\s@%Kkd<)C9uAZW>4DGlP,f*:]3C5+C^U4Q&O*2@;[ln8DhC!+b[RHN_d?caP>/\QZV\d
%\,[sNfqb4#=-o$6nO41i/L,Yg"R$_!5LcG1#iZ=&L0;'QB3I<Ie#jg1C&?Q'fJZB2'lL0l.!`%kQn8VTV(Yd*HP[0%C/6Bf4^rq<
%]_miP09s61@6t@9@Y"`uB>/J9ou%*18%[<E=PQcP>[fC0FW_<i<'(.I3k5DZY,rfjKLhdEAKXLBnejX*6fY0oI!"a!HL_.kDdk%*
%A"$12;]Zmq*350](j"mA+-jEsjD,-L?O1>nOWd.LoiMLo/2G5,gDJKG`:IVA*=^ap4@g#oU,ol8H;1h=DaXn)fLBK2bJ#Uq2kt,Z
%cmtE,FAeLh:HRN<5U!_)!lpt$;LQ97WI64+*QL+KiXKtaCf5fi_SYW=VOpT%$q]4Mpb33+M9!"Fohi)0dSW=6)bGDtS3FoMlU2K_
%"9FYh4uU7m=hq&lG[Cpk=B%9c+.(MZN/qnTWj<TcK?^V(FF(&G1Hg7S1[-.Ni]+=P7]1<e!Y><\Hf*8Hfl:Q3+$fk"2Zi=HMU(t6
%?J3g:0E;Q/i;pS9#b$h`\0ZdUBP.7Wo/n4Tm/":tln/VX4M*r0^#-L^+-H(QE<7gC*%C\cc'*VsA"qNrgG-l5DTSJY?l=&=<p&S?
%Q;UT_E6T88$CMi0n&B?eg`c<]Gi.;k=<nECd_dC*Eb.F@^@/4Gh.j/156F%t,g(,dTu*#\_a@68mleC'*e"7E>2bCu+Dih[*H]I8
%L?X>FcR8A[AZa"gl=\L7aog+[UA?)`*=\t)5`74WEr\8;&2#jUpVC)!M^5_dCb2)s:b4D'4Vk$n9Kgra%s65m`V$BgqiXnIXu?1b
%_u$UfI&U8BJQH(i$M^HlI]:QK<VkNti18<tVTj`LjQ2DLBB*Ge4l"nToY=+JnPH2IeijVoe@W<YZ-I\t3DL"3],L=8U'51`qY3?;
%dBKBq@ATMkrG_Hu5Pn).,-7u"N5V&<6X,g*7tLKc8Z:tW/tDEo+0<]tlF`b%@hSYJ;kG3M`Wk[M$oC$F;:o`?p)E4`*_k*Lm6%Qf
%EE>,ARnDs2#(;[bF-3-EeVE33erK@)7ibRpP2iDu<W"+_1>%bBDng8pYuXR82Y;4s[I@j<['jQCI'6\Q?YH.U!e$D]M0YSRA3m"6
%)5cq@+>6U5%s6aM"[Ng@<+@C681)[*S$U(UfBH>GI$C_j"A>A@VR19Rf@9<snQ%<`l_Ce3%^>J%B(Jr^YU9F<`']:>Win0@R;J1m
%Qb.Q>TeL><rS>t;lHFPAES.[bg_KMkQo5D61&a4M/t[@W"Yf"%a$Rl2/*b"b\1:6b?M^c6s/?tM13hbpN7,Y)LQ80RBu#SO/WhhV
%d_8VM^KurP?d@4*qp2pqa>11F<Dda&/7;J.B8dB.\JS_Ke5b'7/O:8p)0`L/Pn\6+F.sPnL'%\AlL4eECW9A&8&Mu#9>&Gf<oJc*
%.V=TmIMg*W79A<5iW42E$j+/d-%V.E6Y=rLTWLhaHWV:M4He5pp5g.[O8I:fLE/>(P7At6=M"$<!m;\5[Ln02N'*R?SF[Q`QF9cT
%H&`KF?NOVa.\aL?:betGK.0+pC3m+56R+I(%(*j==E\=S-]-3T[OeQ51fYlMNlkjEnA7c'72Kk6I/q/8qa0nS$;M/(\7lAD,m0\i
%(kOP:&k-$UcWNZ<KP[[W1[)Ej[&([P1Nk#^UX]pEN#@L/h$]>OefJb;mHm\+@K8i?;?uHf7IU/ge16'p$[TEXGog7<&([1_c^r0i
%KoS)a?)YM(pm^8jhbMul+ca%&"__YkG\!ih`<3Zb.\*%G)rd-RLJNt7@F3OZNJf6bI0SDk3`Wq/NN>&LQKI3br-5J2fFj8>:67#:
%O#9sqSSd+=p1SE%`kbI/@U@pBBQ7!qbf<lJ3<kqg+V5k6mJ"m!\W*nk6P8MA3.Li!Y1i3$W9O*c=ed`]eWeouf(GG0(fWYV@Ku[:
%QFILGl^L2A?2)YW3rEBe?Wh0ZH-n\USt7sjM8/Q%HGll0W+eSrB7=]XPZT]^UTdI(e2h4YojFS=97_l#<<gHH.7^LVOkkWoW\p/t
%b*&dA[Qc9^8#];gY9LO?<f6bn>%P&-HB%3rhA#+l1^0lb3XH`V+g,b*a?3i,82K27bj/(sjto\p2\!-,*UH.8T.tUX*:rA0Gh8ZM
%7P:V$>9Hu\_Cim`mEb\jg_'7Q-?72GX#fNmdGEQm+*dpTPc^h,h&R8m;jnWgr7p<4J>b8PD[=hdK`cc4c7_"HBGO#;!88Z5liqE$
%B?d0<\a0kBpe\c'2XM!M/DrM1-WrGN0lZh5Gl')s"mdROB=;6G<?RE3CYL$rT%:8n@G_mb<[e#t#?Fu9V4SfWNp3XsIR8Al'*KO]
%!PfM__0/+oQu@VGIB]k=]U.8;j>\kYXTua.I9&-.m$$9q$nkgN^SMc:\6f0Y!."WX&mn7!3\*VmcO4MQNe64A<].!48_LeGX6s(s
%>jHgU$I*PZh2<*DVVjJ99'T'\/"(P=s6Abc'K8!GY_]dGY#d8cAgLol'-^&:Cn3:\a%Rq#fH=@[:*_uXT/m$.7q-eQUM`peJ<hYB
%>Jr(>Y;^(9*/RBOc@_'S*Ug8NI&f6J2e*_F%'^2(m%J)"E29%*!:88&hD=A!aT_c:&*+^"k:ol4<SRkKf>YajQ0/?4#u_%kM5@'9
%0#BT><`9b8Vq,VFf>%q.Y2f+'dOStC13gJRXcQVl%6brCnD9tVB6XR"$MR/ilUi!CRop6)g4<'0N/0'_U^f1r=X7Ld06j;D`>aIO
%h?4_V^L>gXGfE/#4s],^!'7'CS?!Oj`R`iJ<1lT5UX94\#:5QWp]HOLEKhjDfII^*Kg".&C9c*>%\jg^qls*!=@C4"q5N1Y;EYDL
%mtaFq=S?ZU[Z2V0#AKspj.:PMgA#JCNSTt0=)FX?3oY^upi&EPmaC@L;=oNS,\/LN+4h+U^j="!S*S_PHm(W2[=@n[%KO^U_ehpj
%9r#-%it'3kQJpSZB`!%XXPB6cdc93.2ah)u4-(Dm^GG*U(C_EQ.[NNgF[=[b;kt@ECK;6pX>32h@#W2X_V:(6_k]o$,=M"ko5Af`
%fAVJ@DI_!OO,!S-#$aU-oV_',cd,$MXrQX=F\+e>G%P$fMT>B-k!)A"3](aV-'7g.H'pX./GEKMjFeYNVAKM6\+nT^o"-*/ahC[.
%gZYI!m0f\nLNYeOVi2JbKJ1DG+OFDPY_aC)Z;$<Ai5NYZmA#@=H-@%*OJC8@=ue<F2>!GA\<TlRN5$po%^I11V?--9/lb$nKcG;G
%j)'8Z35P*B$^pSt[CUb[5+]"0`Y#B`(?Ml<cC3@;OK1h\WDm"PSW/gRA3S.(7.t9:_"`4C_B:FK49V._JAV*L[K_%;L'`nIVLqj/
%78,1JFUXKlE!ugO5FN$06IVAJ$cfATQBKu9QD_!\kQ+d(*OY"mFsieoq%QSY"eKr+,i8jIqM``ka/<KD@EPP5ke-9C)K9l2YV!6C
%iBuD0&#*4*]\d"g+5L!#EU>t\3:"Vp%^q/aWRW[q?,<XjS;:9BNA-3/N/HT))ONGPo*B9f5m+X!mBFO+<s]NUkb,H!j;Co:3)bhQ
%C)5&;7QJCM(%:;lHB'JXf]2-q?b&0OW!t8^12E0+.R5<1]7p>ub[AAQc-jGr5G86fI-sL;AqSLuVaQM/'l/>Kj[ha,m\Nfu<fF<#
%M!,*X*lE.^h1`t<"X2RZoW?b=a4uX#mEn?[:-$t%"c\)]h2:S^KVDW;gh'aq3uJ*X!Ca!o$-a#t1mFf7h/+rJ2#:]r6bgtLCM(Vb
%%3]i)bner$IGRYcb^?K5=MkD9Do'IJ.+k=+`p&,>Lk^1F3W9`:f;kEFE%'m%2fe>hmmqh^M\sm%Ct02^Cs=XRkY.r$ZWF0%2&YGV
%f]LXL#ge-M(_Z#p(]%-r#hq"a4V<dD4/2U^BpUp_A>D*g8-<\(9qL:K'jY"ICpAp;n^#+Y>'FLicI-Hn6<+CrD@o-`bUFU^9#umA
%1K^(Z]h<S)RWhU1;5?1q<%,l`:B'3FjtTT.K?G_XQtdL^mq$Y)KAh:8N&\0s'>DPB=&&EDmEio8a')Q3bf%$b9aSY2lsY-<`#dc-
%>YQ:CZ)ENl4qQfnA]fk$iDqcA1/uYA4qN,j@A>[".A8T9QK^$V"hZUnA&eu65/=XtD9at,FT?MfcP?lf7%eST&Eu&4=A>sFYYQ1M
%QEMQ?Ts3H)F((dLM]A7I(2NPn5n<-HJ6_#m@AERQNDf7/e*q6G03t!s;$/TIb1;Mq.S7!/*Q3^aYX?aK)<X8Y/&6C5Qr+l+&3_%Q
%7(Wf1:8TWq@7IL.o9?>P:k]$fq=YfB$93N[%Ur.fqHB0%<H%K$UZIB6)CWl[Nm9+n+O]L)N34>V@oZ:NLM'K,T&Q,\LmQu)bn`h<
%<(S10.NWXFK.$8L84rX)kRibCi.`lBr,#aLWU=P%'cM68f^M4RF^Ps3NHq(Y.AUDL_M)n>.G!47oSUhX.s.A=^@YQNe:GfW&MCc[
%5uHteEK3#ong^5kV=VqfVh5.+f40Prs.oVEgg_"U!TEsd^#([k@.P"\Jj`EkI%e7BqC%.PI]9s.No*NfE5CL/Z/A]HnH96mDAL7p
%\6hnqXR;`,?>%5p)d<))@er,Bq#+*7Q[LNhb-p:lmIB[.BKgs@[`#mT1\K*%47%MCen.%&2lCnqUuQZlDR!POReQ(:;TMPQKn=Xh
%%f=Wl>D$(%GkMja57`+s1W4;ZeecW3d1bh>gRo6kKK^EUjgb1).F6/?H-U7Y-+).fD]WWQO+aK/^R<YKka$@-?hVG?+D=i3='&e,
%eg:!:#4TMj/b;F]dr5Sg@%83>L)lkQb!C9\=dD,tFC<HrXfkU\>B*&k242jX2C.U\&:5BSU9fOsIRMY+M`A[Zl3@2DDf%<46AVm2
%Tj$'e63GV)BY9$"C>l\)iNOJWP"$cQGf3rMP<H)FB[R&<r'hO61`8Y,Q8!(Jhus*p$_&GrZm8l4rraY&=R#&?S3tarhd_jq1l?R;
%Qmh5@N!,.YhG'Is7eds&HM-.L%<RNN#b>+6A1NZd'kS@d+<s</M8VTXC[;f;e"_p`loE&P)lcU7a,$;PG[OfD73Iam7l5<q?U:Q*
%bKX9<&)4?3pJ(Ds(08edHfd[`Tf8`lqmL=/8O`l4`a+TOHO%IM)UV=d08WtmNj:*&\mqgXdm)qkDh84N9Q\Ns,mL)odhPu6YGq'2
%LfR`9f&+H]JarkXmHc]@K/!^l``@To_Rcl:O]i+1`/tio]VR>0ja:TA'D?I5]l)Qp@:9APQm&=no<ICD2#ni?4FcQZA;gcUVSS^j
%;@L1qUZ9Qn`JS(KSY1rJXBf9QgKD$OisF?\"7M+GEuc8:C1A:?UYl&#;#HAf6l\?S/i\JWX!!ZRm8cQc("JL'AV`=%[+g3LGl*'d
%*S=IT"Fp2h#kt^7n,(E.hTu't^>h0]!d'qsO:/mK^d4RiNptIiF?/FKe.9jIHf!iBRt'PcM[a80aWKu4nt.`nIj$[@n!5'/<]-A8
%lR=$#grsAnf,sRWT2AkJ%?p+lNO?ra^O2k`G$aFrK\PU/Wk\/S?[Xo(OA[`]H@FnllgN:mkgB.;IIG4K5=aHo.$*lSZT(Col%+fB
%H\Ufu+-Y"l&00.Z7FIqf[;URpTI1uhNci2GC8A\?]cK8%i/fjOJZUXgaTTeuX^?q,5PFJ2!*dHel""U[P>bnsKebLM32Y<4s3TD>
%GoB:PTeOHg\3uD2jC0,,Jdpcr;=`8oS-O2KM1tG>E`&.i?CcboM9,`V\1Q[-[s;;?T=5N3V@-G]4;aVB0-eo[NSI;N\W=!Rr7!=g
%.OsDnd(TAqL@3gB(qOWmH!u-u\I7_'[G(XnFmH5YbVse8/UW%F+$d9qLRgYn)3oI.NY"]F^=4)k$QL&$dQJCiTGCV=Fuq.G%-a,[
%rF*t:q*j(Fg[tsUb%\Z7Y)%o\!.eIhiROWOSaZQEW5Tg*q:f!Mno'#<\bS0Qns;apn]8(cqd)W,#E/J]1L+FQA5n!"2'A>a9LFki
%q6.YFGjm_3htQAoH1bjLeGsa#e5T#T=XWsZGknt$($"iBCYlf"bL87311HA[?>0bdjYfP-rSVo"*96RuYJBWGg*3:6pepGnGmeP^
%a1h+kgr9$SPK0`cnX)HVh]i;,c"o+%[@`\t<6@^WhKYA.l-,*TgGY/`PN`EB"\KYo5nqrVd295!q3I9*ADG$=J-L&pm'FtVl.A8H
%$b>"s((+M^8#'M#S;RV>po:A;^\O/Y/*jhr%5@(^II%2dAV:"'U\KE-r7K([Cj[WC<=qqYa5CUnh<?/Koums'k>b<t^O>Ruph@A(
%LF:)O*V6>`:c'hln_<f;'J/ZPUV*=F`A\kiq8_d`B3-p>3K_>--?o:UoKOL=[:bG1NnU3P^>*Khi?Jps!;&jLO,ZDo6/Zeq*=a6s
%ScD2a/ds7B&0.&BWQTDu.X;#EGVePnTr,9SgPag<0@h#4gH4/7hm--<=qZQ^[f]N;0EmYSm8a\#*Xqqo&6MsGi-PG->:m>oneS#.
%ip<0Xb"^7uM)(DoZ1nb<3l#>#r"lopCHR"^c&%/f9EZQ%\*%VRc3hU%BpYd&!PH>.QAu=6(?HR#3Fs>FUKF<)&;.$hJdFhsAj;bQ
%"AqRMR/@2TEUCg\ZF9@]!4j&pK8O4%IJ!tQW5O)DO)f6u]j[+JjS=aY"IE$@0l80Ie4Yoi*"0Sfp*a?8IME6aNct#u`S#`ggR=7&
%4QCVA':IFCU-L,hgYfo"IGIR4??!I>#)G-5D>7/kF-suT/:%$fK)P'f+m'\G^2rU=OD3,+TJJjE'G^eC$LG?C:`ufHG6$]JH]&N]
%;-e#DeB4^e6<nJE"%Esj6Ofk\PrmuaZ)SJ*qC=;*[0m4Z`9]X;2;egGa;/.t>it/h!<n4Q?;CWYA;^iH,1&hW^WcQL8m,..%AL#d
%.$j-<q23kPV3A.CZ=j5Rqh1DmjRV(9LlBq2QFojTdAmiCn4k<gGkK";KYK#3j_jE6&pN6%?^P,(]s(O2l9U)KVlZ17C\S=q5),)d
%?/.oCX)=3.oC#,iaGL^Mj9T$XLHYJriIWuiKb>^(.'5h=*5f3saEi$s'%&He3!P6G.h>aO.&C+gNb-AY4]+"rHsY%M\gk'>ADj]X
%X)"dB:%KiRe%16R][4G-(qQAl/^1:]UUYdWlD)ZEs&$D&(A#VO`c#jTB%)>&5q);RYc1rQg]$S)ffK$^o]e.kp=_eAe#QAa>Y!mn
%^UeZ;O:AYS[A>b)p50KZD317<E:rK/6FEQo`ee$g#-M`@n0edQ8cM(<Oum=\dENdm',5jJ6$&4qmK1C)7Jr7t;XQlMXopjrQ2.13
%U=NGuCCdV%Cjc9d9"CrHRI=c%8A;$6>1ORF132+(^nm%fNB+@,Jl/[*J[k:343P"5>D57cQicL%mLYXEY1dq?kls&8,6q>K[lTuP
%%dCj\F-*_N(BdU'Xr%_AWiSE80cGo$La1+:QHfK&K;XC>G5>T6heX<\D9cN9!l9G1\:u#.]%1M:DeotUOYG6D2P$UJ5`[`B(4"#O
%_i?YB,/i%(^T^"e[U7A,7?_\/+e((i=fA_YcfUQ+,d9saPQF#7bmu-kBOpJcC6NII0YZ)'DIM1Z0Wt#q-4U:%1?!46aLeoA4^HrO
%%95FJ`X3_K]pbi;4l-MF#.Kd1l,%//qA>+]j[hTs9ie.W^qlm?:DBPW6Um@BhjpJQZlW9PG@<J4n=cRiU-RiB298$op8*]Z+.mdP
%Xq'#0qL+CCa,3q4VQFY1jka0'I'u[R5Ze;!W*C['U7JlHM$hh7Z=:X9_>7[C$7KW%:02],lo!X&K+j2EkP/htiqu4aVPR@!:9gdE
%_LfXjE/W?XB%f3m_%u"[Nk?6O$`qocif)3j2k`ss--9mRN#S&fa+8[T\[:$03A*J+Ti.1]$-(`;\q+2"QWB+i9$Prca\43)S9!na
%#Er_eJ-9baJUOb?\?1ieS"YWsSb!)drKU0OIgjs)1Yad8br/[b(f"N%=eSoLQ/F4f1RF*G33#\]P.<gnkYjAo<u_>%CA&.Ih:t^6
%p:;3<"(5C+P=@RLGo9pl8"-2\)m9^9Mb5ZBY:pPR_"uOb\<k)$)r()H&Jnr-?oek:f/h+8XuQN:d86&GQaLFG/<hl,;[;EZ6)"&l
%8t2omBFJe8SOBQ4QULY7DFa$OG+17]HL[u*Q!["&YU6Xg5sEbT&":BW2oP\8-cVms&V[jah%$Zf5S5ge_iH3ah'qa$*<]U]K,ar9
%6N_DF/_MZ8JS6MTThHh!!us1*+;ErM^U@s#_kLMBkSpOm8'&jP_,mgEBlk%cjm:ck?u/^\=q(K/*QV.*,@%j+7eUI+!08*t'N7fq
%_?VUaPs)AVd&&sOF<mfDh*3&a?K6^3R06AC(LdQiLdWkLn3J6m=33QA<cDVHp;g-KU%ddQfCdq%%0R$UGJg/r5p000]aF\k\njZh
%kB9:EA6s;WC2>P@:H)a&:4ph>ji`%uoKG\%a.Y5n8ld+,F[ZjO_TLi<#A)HfUT7pJQ+27Q[LE<OAgjSs)%JYOr.?A60&["\gE!R`
%>j-_b^9@,o?Ch?p_^1F]gq9cH:>7HZ&2j!0Cu02J32d0(K[2"_)@;P!ecXe\6Xs@1@S"J+T[!Xu&a^LB>.pHJfI7^<jR!W"@UT9G
%\o/%/N>8Lm;X61O5,ZamU_U-11L2oh)HTNUGA??F!YR,%LtoZT:kop$.k>k>,=cA=7OPrO\$E"Bg2uo!2_3c6^?)QD)EKmb-AbO-
%Ck6[uD_u8BTfL&=IedkB-8\#$_*'t1HDHaZ9ql<Q!32!gn#)6$!p`sH)S'a!4r\u]]GhX[mJL8!lP^]?aC0's"9W_PSn/<9i8?"0
%I^3OM-?.[S`/4d-P>UL\l8S@\V.kn;^dJ8!`MROl>`%l"7?ZH+1I?Bs*>?hd"ZP%hC4Zhlgst7eH\SCMA@mDYDC[&SDN$&'O<O'p
%)p:Oc7[Gcoa(1;MA1;okKt`S.'\r#Sd*H`e.iXY*ZJ.6]Ve4Ei.CLq,0!i`1cF2OKpW>gXn/7\*7j6_Q;ATrFq2LY[m+]\Z46c2f
%dHLpa.4l>&D&T,!*6$8kBC2tPZ\^Bn19aZqWHt[ic6t1>g/V0WT+1coBV:n9O+FH\rgHTN5+![?:Z36<Whg1a0%A<E4uf58Ape\*
%=dI?HT49FRb1m9A7Ojq&jQ`OqZT3fN+F?T\CgO0Bb)QI&U]!F[W@j*daaPFCO&?aR'P#[[-@9\W[jN@;YR7EL!`_$ubp4$+#NOsS
%'+8MZSiJ(Gasc&."MW%sRZ<L=BKn:q/>gmRPij)rdS73gi7#jXPHrCQ]#kV2loEAFMIJO4UgWqLQM8Qib:d%Ko1$K7)UQ04o=6f'
%"#7VTGC$sc8L5/mXkA$V??B$+WO;)%;Ch-YD,4UL[uB*>Y$nRp$s4MF0#J[Slk.i/GH`]q^e2;!7e,hM_hmj,OctN[g%C(-#50B\
%ghUZ'19T"tM^6C--<4mC5)Q"DVRP8U$"1p_ZJpjJ;hR/OEo?&8Za`_DC+uU*"R<QR<m3ftAD[k$cY#TmRDfX?%-ulFF`La?\aYZY
%pFq@p[E2`n*@Wd5,h9bsA_kb4I.g5#p:@j06%>'D8>e4p.V=I@pc14[&mO]kKD)'mX]t("J:!b,2f<9Yg6p/1Q4M"eCe5&r+F'J%
%fY[_PRi'7"h*"d;3fk3rlUEupZO&&6LuL$<*NIuV=[4E:-?=jS'Tc\jM"Mb^BZg\b2e.I@LjD5I$UA0\Ag3<G48oP>_:GRfa+C[-
%6HFfL(5-.n0+t5.?l>YgclAAY1u8fplF3dZ]VRTW#K)q?*OJ<F<0?3pM^O(dDi0u#F];rX!>ckm@Ybh^DEs$uRtI@'kdL:#g<')Y
%/N^,bn<9(;5V1<Y9-dg!&K0-9#<Ss-.M6UL.Dg"qOjGBBX+mU;hAo`k(Og@[lV6Up1CGPXi\e`!`ag&'':642+;;X(-?q2!#UqCT
%@coWf$3?W_aAS%u_=eb4(&,Ok@V'T/PH"n>pnC1\]#^U"("erEl!E*j]*9A:_:&Wuok7emQAUg1dZs;M/OZH'Ie10,?Qm]8S"nFD
%N<^aUBRA+W@_Zc!NV_U485"gXWe='(DNIOV76H!PX@>U.A0Y;fEi*T3\mchE2/[HWOrf7n`LKX6.q:bVlf^K58eSNbaAE>35JFcR
%T%7h/\,"RjIHDeanus8fce'XSn\_YU1N?gbWnlZ$6Ppui]]++F.F3Q[aEjjF]")t#69OKd1Bb@Ghm5^Q\>m6*5%e1b23MSS1SE+[
%lna"@#)Z5!.EQL8[-.7I55o)5Mh7,M*WW.m>hN2Um5'V-k-ka!>sae._4gob+FBq-0^096b6#(W$Z_)3(IXuu\K6Q?$l,kg&gB_f
%G]O>"!f/4;Z(FWJXHLt"03JSfMT553b[&JT;Hr2%X7S#^:6nWIpu%&lbB/5<T1Jji,dYu,+]b:4+>YT`;=SGW^:'_>BNg7S)X_To
%Xal079&fcr`(:0db!$++ru+[2FRsm).Mn_cWMp8?5AE=ZpuFIANd)Ju;;<Q)@p'd&__5^N5c?9E8jU2J"<%h5D-%P\mC[Po)2AXG
%Bb=((7FeLh3GEX;+XXZ(/iD:XOQUlPiT;@6+Ioeg/b!0/hA<D8@VkT&nghLN!sM\^\4._nbD6UTGeN+ZKJ@t(L9(tqJ/<;*3M+jW
%MVDWo&QQXbLTsbG0$#Bc<"6T2bE^D8-HEe,4>+?m]"op_o`e\P5l"$fpBYiUm<O7'W*2mk2KBiuZ;A>1:W3J.ZX0S;*p/nVMh]#b
%%e\0$d@`j.P'@llQic0!Zu445eLiCr,2#Em/,YlJR/eM6dFI61dTerT/XbT0ipPos@oEF9"^?nc.EB%J&=WLij&"Q=AW;!ZKkZLo
%-E$r<a%HtC,PcVe.u'"P8M!h/MA]bb[F*&pliCks:>0Yi5_5En%hGf[C+jLRd4A/GHFu8$VUcA6['4+-N"kReUr7>"*Ve0I!?OCA
%:Z_^,C>;@Bd26H+6!#4RJ7\is%F.fce7s@)XtT">KDEXY,`7b^]FRHV+fk@b/$4&kc'MtmR<mc16X`V"miBM-N1-MapdA$'@(s+O
%7hkJKZ]2LE.qEMj45VAC.,_g3hVi&h/E4(1XN.#bDY80]Z0,/6L+0m<aA@XtV6P?JeKN(Zhd/pHpH?&]fd\?R4c`DY2V\&lcV(sZ
%&XP,0HMJb@,;I'(8*JD6UL$m4)CCqFW%@V_i(m+_-ob+^'K`;c/;kVl??G%2,muIl.%)S*:D3\GFb66kOrV.d,YVtCntkU!?156]
%%RU9KEJg$C\tdOSkjB?6LBF9$a^iF/O3[KN7rkN52_uBfdOk\_]5cU;=eBnm5Vr>V4e1pn"qZkGUrBF7d1[R3/2M)V;YiYRN`uo0
%C;#Jicr2Aff"QCcOG(/A&jqt>5u0_.dYrfhV3m^'%Te$o^Z/Tu^,I^cHQb!_SN-;(p?m7kD8()4RR*ju`"!%1NHf%Hh-FIo)=T'@
%Bc.;dDL8ZcB<?kI_;'CshIs0h82#oN.T_8Q0YHNa0nin$J$]]V:rd)X1j<9,3>@NOWFhVKlrZ%qDR:+/Y)ckHeV03I14K]jot%W9
%e`%FK9U/3ck/Uq#$]d"g&@PE?=c`M:G1[P*Cr'F4e-%-9H5o1N%.8e&[N&nr8B2;G4sOBk>X/a$b:t"*(sB*%D#%JL$r$GYYcSLU
%Tu6XMqnDJ"kYkrcOg]0P?FXYEY.:"qSIE)Mb]ZC:&L$PfU*c!(:(m48J_20$6&&7X[+gEM\BeSNUBf-E1Cb5J[u#Ya:aW*_N'RU`
%UYlNU2u2DS5DW3;(k=F/1=E`fB5j:#BRhkN</KXA5?_ZTgRGnka1.1]7R.lga%@<#V2Ymnfs4#7SAln1P!Lllk-BIKX[;SQ;Z^U+
%K*e)cl-U^`2&$Wj/]enI^9Gk;T1LtA(ba/q"jl:d+YokFPB87QnXjl)k@XZ@q>(=L9m5dJR?P-m,duJJ%pZfCh,*=>JV2\pOK+*E
%$NS->`)`uGmM(012YsS6"k;Qe37oX=0rKJ4Mq71<4_)uUH<IA\1CibZX9e7SB4nR^n+RU\"VsJX>;P3Qe-m10ShZp?->/B(33W18
%.4aca(p;F>0]dR:f2u3&ALY#s++tG-7s'=8(tDHTSPDjImh6d2J`2!\>!KOCO96>0rlLC<5MJ(``k^)SB]eR1e6#hjUjukJ+sAP[
%QutTg%=_0Q*XuXH[_`8@,FVF@8Q6sGX#<'%WAlljR6Xa,1d=?d+>/[qiX,dPXP"B#0R)\o\tXk6(mdeBbY433dPDcq$2QBY"8aG;
%L.Qn$6ar_8_epG=e7oFDd\o=GO^hKo*%F;`W!L?d$TJl#_gBfS"\P[R5g$`<TlP0I%cc,<4<;+3Pp8dE(Vj6%09^T$d*Oa4a\eg]
%!]EVoJ0\=9#[=;Fm,B6?VXV`6V/2AVeO#EX#PBQ$6r@pTaX5#\BZ,9tNn4gC=J8&sG[ufY!LiJCRNp`_hEaW2N1^)i]mXjp^_]#7
%ng@@,Is@aL1S^LX>C\7A_(-B#<"#qQ9ff>%H8g"@;;<*o7m4+"Y4aac@Ai-]OI#eV9IgTn?sV@.,.-.G*A'?i$+,:ipjm8&*-)_R
%V'?Y0]Yt"[\s+Ee(L^d[P?L`<V)>pX>4t5pJT,R3ep@b+EnB_i'FZks`BQlq<Of]PmM7h?<USuj3=M'?5(<RB"?>MO+ZpI$[!Pe%
%[t^["?IuWd/nIj$"`7&t0,R],=13%QTe^Vgf1[ei>-]ND)5+89M>,*]3Ah]aO9k4@jJ`J!VG+9#W=d[9N/B$n0pZsO<=jjQ,5T?Y
%2[0ft4kO1KeX&'^VE%'U:A7V?[+`_hS(5*7:[5sB,df.tClZ$,0Df29ht++COHmg.$m5T3RpcmD-lETpc$`T1on!2W1%!'\'W1@C
%o9#<R&<&o*XN<dpNp,JbEP!@lB44jCjH0#>:O?WcD`tcoUl.Ef-/Fn@L0>k2OD;Eb$0IB&\OWE'DJl>qDSWtmBFAVr&togo#RePH
%;]-ba?jm3T]@h)5?q#2q!_c`1]Z`d#R#$jRf5#0%:5`A08X^4sUlhhCglMj&DZFFR(>di8G(9lXDrK_(l;,:FDZHa+=QAf1L8h1-
%;hTPmE2pAUHL1B^A#,9RM]YI-1"aUbBpOq\8K6?=c$YPuSs2)jE+I-"\Tfh"!i_+9PTnltn^f4,<*Vut^Q?835QT*E=kFSh)VQK(
%f`6pF?/#.8J4X1W:h)1?4PgjQGA&em9Yd>q&!SI#2+^>Kq`m+?r8,[[$(tZmr,d#pL2c$H^q$iW3&Ntd[91HM9jpduK$p[W:!5d[
%f'!?V!tS6;&=$P6!oU(8K?\QoapdXt^>4c<G=3NjNIur;QRl#[.+6)/E5Ms*L-M9h\eQ0>#+N_<]BG(XcL7+8[5+//$D?L(9CrL-
%d7\47=>_Qo@a?PH4m/b-1Vb0N:Cg:d3h)2oVu,Nu?B)-V2LcW0c.)T!NdZtHWSRp=I47V@g[,3/H(YS;Y1']$Z386r[)9.!(CO'i
%h3\"n]5Fi#NB"^MS15hJ,01:8"BG<!#]@UZBZmg.og[\\S8``.h?q)d*/R\Z<#OnboZ]]i,mOr26I3Y'eQtU!bfBcA\q'=O4*c=]
%F-8BtbG?8]f.ULA9A.?Dh.tNDZNr'3'>/l!E``OoG&@":VJDN8GJJH8<ZaRq-+l00-,RT6-8nZIq@jZ]NY&!sG(2CRfb^kjc'f,%
%KSLM6'q,`AO*5b>K6.d"!B2)\]<OSqmCTDcdIWpfJBgo\gG6H5GHCp8Fn],>U1.Y^d@?4GA`6HF)D6k<292piVoH/N<@9kcMMY(#
%Y.7!b$M8qi&Qj^,CJ&mfOCATt9u!tO"+iQe(Sn"''<iOcN;TbkPko%[ZetW3k)uE#199!8WP8UI]g\n]pq^aN=<u4`/[4(;5VcGN
%Ne:9t#:MsK&_dQ$O2+))d_TE"bT/sI`2GY"&r?4OeVj=-QI>,;2YR]tmD[(X#@I:)Xd*),F!Og<2?<_0BSp'D>eXXg:U:tP>j*8L
%\OoZ<gj^o-Thk'`7#4LB(P)H^'q<"q+\%+D8bV]"[a[<,NKih'[&H-)Da2$!L$.?!^^^8Jp1reQ9_&D*=]dPsCGd#HE6;AS9J5JQ
%:un_%04^'h-['+e+\OuU6IKGp%LQg9"bS_jSt9t%<DpZ(EAsgU4jMnA8*s:WNlN7L:(h.-L7k5d+!'SJ&D"q.PIb31hh+`,p/uUq
%+(S1ONLOR&56Qs:oA-435]qql4")p@j=\V:Et<4/eNa_P'tY1;@sAQtT;9is/;=D'`EQ6r74j*"!o#p(Xh/QB0]><N1r,.e^C\d]
%`)n-_1Ik]ZU@u+5f2N<07>hg=a6GShfi^%fZ5fXU>YC*0EN4"<nNg/VMCj[@YWh,b[fAj6!OBV)&eVU[a\qm^9s6/,qhO%kHt!UL
%Q9=7?[iXk;&LE/ZWD+4qAnN#!UQJ%tle/"G"4b%5SEn<Y+U#>t*\ho9N^ZK)ekd<&(t8lXcAQJ52cA5'4&e!c7AC&V+XKQ!I%3(&
%8WM80BSHiRc(U*+)0c.W.kApN;SRF6G61rqj`hq/K*WsJ/V385U3?I=[-L_P9jr`c`nW3p=qGTI*?[9,nNf9MMb$2]>mGq73UTXX
%$!?u*MY`\FEX[ep?Rrn^)(8l8TUqKl$auXs=6t@D:`rrfH^kZ)q;u%6@:BI--NW"@X>'qL6OsbAR=CGud^h9/b)SI=V0G?>[@ugT
%ZF-p`0qht4]HE_D#_RiDNTnsFjZ?ZcUelYcN-fV<!hBDYa2eI*3+@jjS?hA8.S:#),&;`\cI=aV`26^&3Qq]Wjmmj=74SgW3V&.U
%:VjC\mb7FaNO*NiBK+Wn;gC.k2t/k89&5e^Tq$gVGGnp"IR#5L.r+AiT2TdAL!Wi6(;tj18CU?%'ei\"OXR?W4t5'(Zj@E!C7I)J
%nK-&5A.SM@2jo31`Q'<+Sj+2_5segB]NHK4c)"l*Mbkf[K\@U8(QdG&H!4\QrbMjOoJ$0XMi#Ob0Ic>T@T/iQTpR]OjI$9hOR*Np
%?$U!;J<']=Y3/m?gZEkU(=.f[(<Vpc!`\)<Sdiq*j&_GCH'#f0nX>jX%+7_kOHjU3,OA`(bd%NIBT/-a%0O.6fKZ=cY*U:Va,^uN
%Z$*;4Y\VnKf2Q#_kib#h6slmF5<_EGI\&QTjPYi'Jsho4da=J.`*sZp"kq&Oh*GPk/OG,3*0><hbHBg\N=ZIG#b@5R\-e'MGPr<4
%dX;CG%,$P2p`@BW-Frl\4,6J5VH4K<I.CiIl7L!/89,DLMTTdfpO2Pe+0iR2[b#:8&YJ#)"17*>5T)h+fM$Cn$BM6qU)7ETo6K@Q
%SK)O^VSSZTA:)X!)N-DtmVI*.,\+kb^DjP_I-Drsp"%?^`7.[9k%,?Fo]KLYT8i<eCc;Aeb2&'PeHeg;JJc\t8FbMMY0/!;C:P'3
%98[<L&R2NB*fe,qj9Xt/mFc-^J;hD(3J%Ian7To9_3f^_Z%0N`mahfK]U,;\5Q&k-qUIh0_lqqpa#F%dgY[DMrAWX5iOeQncMd'Y
%s5lP.[4m#WDE8U3pi2r&]BqJ*pZm=.q<R\G^\#;@qO`93p7't1YM[+nk5.A6p<=\nrQWsc-TpqXhli3'B._KT#aJu&&D@"p`./b!
%h?I)fp+=?W=liLXk_E9fMY\[dTH-%+0rCZ.@6*'D4sgJ5U!7eWIu^"?8VDucI@.beMFnZ5d3KE?<lqd1Lb]S+QNlZd8YiBjp`om6
%6;SOH'b$!t0!7+=JGP"AWu:5D:n8'ZSQh%l$mj`dpT6nuq`0)3h8L;:=MdPI0Z)$>2Oo/)IM(dPKU&)r)='c<:s;2;er_hR?EoPA
%XB3I_;FOX!V0dPF[9b0^_W%D'bfG[f_GW<\EYLE"s1h0-U'm=rq2rA2clu)b7U4#d&/kC67X%:qOWj$CPQB=6_RUO5.h4Xk8Y/MH
%+;$QM?jt@u]@9P"LlrD9Odcu4;1k<6<m[(_/?MEGOpKCT<mDHGXV^..,HIeqp'47hK:8qs7%`VBFNO@>@NG#BW[bW(`6N;N36;D%
%[uIJA?q*,)(p4+/YM(n?-V%ZT`WrnpCG\)+/=ZZb,3?=OqC.YflI=Xnc"fj]-.9HL^if<0(eE:T^!i2,@O<]Q\C'edr_YpOZ>Ru]
%)./]ZO(qgSlULA15jW1T&MJE],=#e\@POU8LJOg@d(1f9Nn$=Y5AG!PB'[$C2rN-Hd7C,>Ce9S>*k:ERL\G?KL<1Z']s>2?/Ab_Y
%q',Ef$1U8q+r+9iUbuAEQ`,2W[fkTWl&c77.@2DtH.u>L,)5"Y_r18YU,5"pqT,E%\b:As1!HW%G.iZn)RA<?\uP]=,Z-)d]8(H/
%%B-"(Cs".V"QgFcph;BQbCanGQKp'F.G`@NM0DPL3hJ&_6eHAGJb@j`^A;^jh(0/T@$ig1\R-1=(eZGg_I3(3aCk07Snp[So"T_7
%6WTcH1SXf<]6?nfGF?at#DHB?M?;5UH!Pu<,M`K,2JX0Y**@Yc=hPp1[SF[`f2b*rDaOIpn!=Cf!O`a)$QH3&(Hsop7o7Pg-/C,p
%G!`hV^0U,$jP3Ib@re:`0=gp*[Oj+gdKES#"InfjQZ<MnhRP?e5M]!Wi6CY5Fg0'i-Z6I.RAn;JgeOE,%1Kf?hE=Pt!2^BHC#h.X
%#:YMf!lo0MqZ'@;[/lZ"l(KAiLk0@l:CFkbYYPLLn`S_W=`A#2fA4.j"g:BS6'S<R#o-<(\<?jL5!42MTX22?n;GDtj(M^J\i-Bp
%"fTLSruf0%>MKKW6MB2:g^8r:-J8lgMeZ>2l:,i'(<,Ko."kFeaaiN`=gDT)9P%qg^?/(0s/:Nh=5peC.r:fIOsP1R6'f_."f&"(
%"TUIWe2?P`)%alr&.hm=J=L+*elt&Wj:Md^K]QsOUl+*SS>PnDI>?Qi\`f=,C:n,LVJj]HUKUf&4q3=InVZDk#i(H^$.#i^hkQ.U
%gIs+l/*D*ejGu;pa2gr(Ed$d?b^%.YZpX>'8.3/^Us=+pW)Udb@,dZa)W/^`&eGf*CB:HS#X0)<B!j&Aor\sthV_0`0bN=D,Hc`#
%aaFnCXCTiT0UEFA&Ro#iY['p/FU-p<jB*('PM8!:o6-PqM"7?_dP896bef2'JYoM'V:A8e^dc]4TWH/1@t/b$TPE[6g9Y'D_TY1Y
%E3pr]KOt-pm!#msIk]q*=V#A>)9\Z#TD#tDkIWq<=9%@frprAHYQ+%"s6H_(rq3nlT:V)$QiI#R?[qf7^Am>Fs.Abos2EmnqY/nF
%n[ga;r:[UEm!&L(r9MV2^]3`rJ,%johnAjaDgqH,OPm!___6N8GQ7(!J+5Jt&"gIp)?~>
%AI9_PrivateDataEnd
